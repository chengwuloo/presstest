// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ErBaGang.Message.proto

package ErBaGang

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SUBID int32

const (
	SUBID_SUB_S_GameStart          SUBID = 100
	SUBID_SUB_S_GameEnd            SUBID = 101
	SUBID_SUB_S_SCENE_START        SUBID = 102
	SUBID_SUB_S_SCENE_END          SUBID = 103
	SUBID_SUB_S_PLAYERLIST         SUBID = 104
	SUBID_SUB_S_JETTON_SUCCESS     SUBID = 105
	SUBID_SUB_S_JETTON_FAIL        SUBID = 106
	SUBID_SUB_S_GameJetton         SUBID = 112
	SUBID_SUB_S_SCENE_Jetton       SUBID = 113
	SUBID_SUB_C_USER_JETTON        SUBID = 107
	SUBID_SUB_C_USER_ASKLIST       SUBID = 108
	SUBID_SUB_C_USER_REPEAT_JETTON SUBID = 109
	SUBID_SUB_C_QUERY_PLAYERLIST   SUBID = 110
	SUBID_SUB_S_QUERY_PLAYLIST     SUBID = 111
	SUBID_SUB_S_JETTON_BROADCAST   SUBID = 114
)

var SUBID_name = map[int32]string{
	100: "SUB_S_GameStart",
	101: "SUB_S_GameEnd",
	102: "SUB_S_SCENE_START",
	103: "SUB_S_SCENE_END",
	104: "SUB_S_PLAYERLIST",
	105: "SUB_S_JETTON_SUCCESS",
	106: "SUB_S_JETTON_FAIL",
	112: "SUB_S_GameJetton",
	113: "SUB_S_SCENE_Jetton",
	107: "SUB_C_USER_JETTON",
	108: "SUB_C_USER_ASKLIST",
	109: "SUB_C_USER_REPEAT_JETTON",
	110: "SUB_C_QUERY_PLAYERLIST",
	111: "SUB_S_QUERY_PLAYLIST",
	114: "SUB_S_JETTON_BROADCAST",
}

var SUBID_value = map[string]int32{
	"SUB_S_GameStart":          100,
	"SUB_S_GameEnd":            101,
	"SUB_S_SCENE_START":        102,
	"SUB_S_SCENE_END":          103,
	"SUB_S_PLAYERLIST":         104,
	"SUB_S_JETTON_SUCCESS":     105,
	"SUB_S_JETTON_FAIL":        106,
	"SUB_S_GameJetton":         112,
	"SUB_S_SCENE_Jetton":       113,
	"SUB_C_USER_JETTON":        107,
	"SUB_C_USER_ASKLIST":       108,
	"SUB_C_USER_REPEAT_JETTON": 109,
	"SUB_C_QUERY_PLAYERLIST":   110,
	"SUB_S_QUERY_PLAYLIST":     111,
	"SUB_S_JETTON_BROADCAST":   114,
}

func (x SUBID) Enum() *SUBID {
	p := new(SUBID)
	*p = x
	return p
}

func (x SUBID) String() string {
	return proto.EnumName(SUBID_name, int32(x))
}

func (x *SUBID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SUBID_value, data, "SUBID")
	if err != nil {
		return err
	}
	*x = SUBID(value)
	return nil
}

func (SUBID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{0}
}

//開始游戲
type CMD_S_GameStart struct {
	CbPlaceTime     int32             `protobuf:"varint,1,req,name=cbPlaceTime" json:"cbPlaceTime"`
	CbTimeLeave     int32             `protobuf:"varint,2,req,name=cbTimeLeave" json:"cbTimeLeave"`
	LUserScore      float64           `protobuf:"fixed64,3,req,name=lUserScore" json:"lUserScore"`
	Mutical         []int32           `protobuf:"varint,4,rep,name=Mutical" json:"Mutical,omitempty"`
	LAllJettonScore []float64         `protobuf:"fixed64,5,rep,name=lAllJettonScore" json:"lAllJettonScore,omitempty"`
	SelfJettonScore []float64         `protobuf:"fixed64,6,rep,name=SelfJettonScore" json:"SelfJettonScore,omitempty"`
	OnlineNum       int32             `protobuf:"varint,7,opt,name=OnlineNum" json:"OnlineNum"`
	Cardgroup       []int32           `protobuf:"varint,8,rep,name=cardgroup" json:"cardgroup,omitempty"`
	Players         []*PlayerListItem `protobuf:"bytes,9,rep,name=players" json:"players,omitempty"`
	Shuaizi         []int32           `protobuf:"varint,10,rep,name=shuaizi" json:"shuaizi,omitempty"`
	RoundId         string            `protobuf:"bytes,11,req,name=roundId" json:"roundId"`
}

func (m *CMD_S_GameStart) Reset()         { *m = CMD_S_GameStart{} }
func (m *CMD_S_GameStart) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GameStart) ProtoMessage()    {}
func (*CMD_S_GameStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{0}
}
func (m *CMD_S_GameStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_GameStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_GameStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_GameStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_GameStart.Merge(m, src)
}
func (m *CMD_S_GameStart) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_GameStart) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_GameStart.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_GameStart proto.InternalMessageInfo

func (m *CMD_S_GameStart) GetCbPlaceTime() int32 {
	if m != nil {
		return m.CbPlaceTime
	}
	return 0
}

func (m *CMD_S_GameStart) GetCbTimeLeave() int32 {
	if m != nil {
		return m.CbTimeLeave
	}
	return 0
}

func (m *CMD_S_GameStart) GetLUserScore() float64 {
	if m != nil {
		return m.LUserScore
	}
	return 0
}

func (m *CMD_S_GameStart) GetMutical() []int32 {
	if m != nil {
		return m.Mutical
	}
	return nil
}

func (m *CMD_S_GameStart) GetLAllJettonScore() []float64 {
	if m != nil {
		return m.LAllJettonScore
	}
	return nil
}

func (m *CMD_S_GameStart) GetSelfJettonScore() []float64 {
	if m != nil {
		return m.SelfJettonScore
	}
	return nil
}

func (m *CMD_S_GameStart) GetOnlineNum() int32 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *CMD_S_GameStart) GetCardgroup() []int32 {
	if m != nil {
		return m.Cardgroup
	}
	return nil
}

func (m *CMD_S_GameStart) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMD_S_GameStart) GetShuaizi() []int32 {
	if m != nil {
		return m.Shuaizi
	}
	return nil
}

func (m *CMD_S_GameStart) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

//開始jetton
type CMD_S_GameJetton struct {
	CbPlaceTime     int32             `protobuf:"varint,1,req,name=cbPlaceTime" json:"cbPlaceTime"`
	CbTimeLeave     int32             `protobuf:"varint,2,req,name=cbTimeLeave" json:"cbTimeLeave"`
	LUserScore      float64           `protobuf:"fixed64,3,req,name=lUserScore" json:"lUserScore"`
	Mutical         []int32           `protobuf:"varint,4,rep,name=Mutical" json:"Mutical,omitempty"`
	AllJettonScore  []float64         `protobuf:"fixed64,5,rep,name=AllJettonScore" json:"AllJettonScore,omitempty"`
	SelfJettonScore []float64         `protobuf:"fixed64,6,rep,name=SelfJettonScore" json:"SelfJettonScore,omitempty"`
	OnlineNum       int32             `protobuf:"varint,7,opt,name=OnlineNum" json:"OnlineNum"`
	Cardgroup       []int32           `protobuf:"varint,8,rep,name=cardgroup" json:"cardgroup,omitempty"`
	Players         []*PlayerListItem `protobuf:"bytes,9,rep,name=players" json:"players,omitempty"`
	Shuaizi         []int32           `protobuf:"varint,10,rep,name=shuaizi" json:"shuaizi,omitempty"`
	RoundId         string            `protobuf:"bytes,11,req,name=roundId" json:"roundId"`
}

func (m *CMD_S_GameJetton) Reset()         { *m = CMD_S_GameJetton{} }
func (m *CMD_S_GameJetton) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GameJetton) ProtoMessage()    {}
func (*CMD_S_GameJetton) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{1}
}
func (m *CMD_S_GameJetton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_GameJetton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_GameJetton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_GameJetton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_GameJetton.Merge(m, src)
}
func (m *CMD_S_GameJetton) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_GameJetton) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_GameJetton.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_GameJetton proto.InternalMessageInfo

func (m *CMD_S_GameJetton) GetCbPlaceTime() int32 {
	if m != nil {
		return m.CbPlaceTime
	}
	return 0
}

func (m *CMD_S_GameJetton) GetCbTimeLeave() int32 {
	if m != nil {
		return m.CbTimeLeave
	}
	return 0
}

func (m *CMD_S_GameJetton) GetLUserScore() float64 {
	if m != nil {
		return m.LUserScore
	}
	return 0
}

func (m *CMD_S_GameJetton) GetMutical() []int32 {
	if m != nil {
		return m.Mutical
	}
	return nil
}

func (m *CMD_S_GameJetton) GetAllJettonScore() []float64 {
	if m != nil {
		return m.AllJettonScore
	}
	return nil
}

func (m *CMD_S_GameJetton) GetSelfJettonScore() []float64 {
	if m != nil {
		return m.SelfJettonScore
	}
	return nil
}

func (m *CMD_S_GameJetton) GetOnlineNum() int32 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *CMD_S_GameJetton) GetCardgroup() []int32 {
	if m != nil {
		return m.Cardgroup
	}
	return nil
}

func (m *CMD_S_GameJetton) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMD_S_GameJetton) GetShuaizi() []int32 {
	if m != nil {
		return m.Shuaizi
	}
	return nil
}

func (m *CMD_S_GameJetton) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

//游戲結束
type CMD_S_GameEnd struct {
	CbPlaceTime      int32             `protobuf:"varint,1,req,name=cbPlaceTime" json:"cbPlaceTime"`
	CbTimeLeave      int32             `protobuf:"varint,2,req,name=cbTimeLeave" json:"cbTimeLeave"`
	LUserMaxScore    float64           `protobuf:"fixed64,3,req,name=lUserMaxScore" json:"lUserMaxScore"`
	LAllJettonScore  []float64         `protobuf:"fixed64,4,rep,name=lAllJettonScore" json:"lAllJettonScore,omitempty"`
	SelfJettonScore  []float64         `protobuf:"fixed64,5,rep,name=SelfJettonScore" json:"SelfJettonScore,omitempty"`
	MostWinScore     float64           `protobuf:"fixed64,6,opt,name=MostWinScore" json:"MostWinScore"`
	BestuserID       int32             `protobuf:"varint,7,opt,name=BestuserID" json:"BestuserID"`
	BestuserNikeName string            `protobuf:"bytes,8,opt,name=BestuserNikeName" json:"BestuserNikeName"`
	WinIndex         []int32           `protobuf:"varint,9,rep,name=WinIndex" json:"WinIndex,omitempty"`
	Cartype          []int32           `protobuf:"varint,10,rep,name=cartype" json:"cartype,omitempty"`
	Userwinscore     float64           `protobuf:"fixed64,11,opt,name=userwinscore" json:"userwinscore"`
	OnlineNum        int32             `protobuf:"varint,12,opt,name=OnlineNum" json:"OnlineNum"`
	Cardgroup        []int32           `protobuf:"varint,13,rep,name=cardgroup" json:"cardgroup,omitempty"`
	Players          []*PlayerListItem `protobuf:"bytes,14,rep,name=players" json:"players,omitempty"`
	Self             *PlayerListItem   `protobuf:"bytes,15,opt,name=self" json:"self,omitempty"`
	Bestuser         *PlayerListItem   `protobuf:"bytes,16,opt,name=bestuser" json:"bestuser,omitempty"`
	Dallwinscore     []float64         `protobuf:"fixed64,17,rep,name=dallwinscore" json:"dallwinscore,omitempty"`
	Shunplace        []int32           `protobuf:"varint,18,rep,name=shunplace" json:"shunplace,omitempty"`
	Tianplace        []int32           `protobuf:"varint,19,rep,name=tianplace" json:"tianplace,omitempty"`
	Diplace          []int32           `protobuf:"varint,20,rep,name=diplace" json:"diplace,omitempty"`
	RoundId          string            `protobuf:"bytes,21,req,name=roundId" json:"roundId"`
}

func (m *CMD_S_GameEnd) Reset()         { *m = CMD_S_GameEnd{} }
func (m *CMD_S_GameEnd) String() string { return proto.CompactTextString(m) }
func (*CMD_S_GameEnd) ProtoMessage()    {}
func (*CMD_S_GameEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{2}
}
func (m *CMD_S_GameEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_GameEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_GameEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_GameEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_GameEnd.Merge(m, src)
}
func (m *CMD_S_GameEnd) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_GameEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_GameEnd.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_GameEnd proto.InternalMessageInfo

func (m *CMD_S_GameEnd) GetCbPlaceTime() int32 {
	if m != nil {
		return m.CbPlaceTime
	}
	return 0
}

func (m *CMD_S_GameEnd) GetCbTimeLeave() int32 {
	if m != nil {
		return m.CbTimeLeave
	}
	return 0
}

func (m *CMD_S_GameEnd) GetLUserMaxScore() float64 {
	if m != nil {
		return m.LUserMaxScore
	}
	return 0
}

func (m *CMD_S_GameEnd) GetLAllJettonScore() []float64 {
	if m != nil {
		return m.LAllJettonScore
	}
	return nil
}

func (m *CMD_S_GameEnd) GetSelfJettonScore() []float64 {
	if m != nil {
		return m.SelfJettonScore
	}
	return nil
}

func (m *CMD_S_GameEnd) GetMostWinScore() float64 {
	if m != nil {
		return m.MostWinScore
	}
	return 0
}

func (m *CMD_S_GameEnd) GetBestuserID() int32 {
	if m != nil {
		return m.BestuserID
	}
	return 0
}

func (m *CMD_S_GameEnd) GetBestuserNikeName() string {
	if m != nil {
		return m.BestuserNikeName
	}
	return ""
}

func (m *CMD_S_GameEnd) GetWinIndex() []int32 {
	if m != nil {
		return m.WinIndex
	}
	return nil
}

func (m *CMD_S_GameEnd) GetCartype() []int32 {
	if m != nil {
		return m.Cartype
	}
	return nil
}

func (m *CMD_S_GameEnd) GetUserwinscore() float64 {
	if m != nil {
		return m.Userwinscore
	}
	return 0
}

func (m *CMD_S_GameEnd) GetOnlineNum() int32 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *CMD_S_GameEnd) GetCardgroup() []int32 {
	if m != nil {
		return m.Cardgroup
	}
	return nil
}

func (m *CMD_S_GameEnd) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMD_S_GameEnd) GetSelf() *PlayerListItem {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *CMD_S_GameEnd) GetBestuser() *PlayerListItem {
	if m != nil {
		return m.Bestuser
	}
	return nil
}

func (m *CMD_S_GameEnd) GetDallwinscore() []float64 {
	if m != nil {
		return m.Dallwinscore
	}
	return nil
}

func (m *CMD_S_GameEnd) GetShunplace() []int32 {
	if m != nil {
		return m.Shunplace
	}
	return nil
}

func (m *CMD_S_GameEnd) GetTianplace() []int32 {
	if m != nil {
		return m.Tianplace
	}
	return nil
}

func (m *CMD_S_GameEnd) GetDiplace() []int32 {
	if m != nil {
		return m.Diplace
	}
	return nil
}

func (m *CMD_S_GameEnd) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

//開始游戲場景
type CMD_S_Scene_GameJetton struct {
	CbPlaceTime          int32             `protobuf:"varint,1,req,name=cbPlaceTime" json:"cbPlaceTime"`
	CbTimeLeave          int32             `protobuf:"varint,2,req,name=cbTimeLeave" json:"cbTimeLeave"`
	TimeType             string            `protobuf:"bytes,3,opt,name=TimeType" json:"TimeType"`
	MaxBet               float64           `protobuf:"fixed64,4,opt,name=maxBet" json:"maxBet"`
	CarType              []int32           `protobuf:"varint,5,rep,name=carType" json:"carType,omitempty"`
	AeraInfo             []*CMD_AeraInfo   `protobuf:"bytes,6,rep,name=aeraInfo" json:"aeraInfo,omitempty"`
	OnlineNum            int32             `protobuf:"varint,7,opt,name=OnlineNum" json:"OnlineNum"`
	Cardgroup            []int32           `protobuf:"varint,8,rep,name=cardgroup" json:"cardgroup,omitempty"`
	Players              []*PlayerListItem `protobuf:"bytes,9,rep,name=players" json:"players,omitempty"`
	Shuaizi              []int32           `protobuf:"varint,10,rep,name=shuaizi" json:"shuaizi,omitempty"`
	Self                 *PlayerListItem   `protobuf:"bytes,12,opt,name=self" json:"self,omitempty"`
	Shunplace            []int32           `protobuf:"varint,13,rep,name=shunplace" json:"shunplace,omitempty"`
	Tianplace            []int32           `protobuf:"varint,14,rep,name=tianplace" json:"tianplace,omitempty"`
	Diplace              []int32           `protobuf:"varint,15,rep,name=diplace" json:"diplace,omitempty"`
	ShensuanziJettonFlag []int32           `protobuf:"varint,16,rep,name=shensuanziJettonFlag" json:"shensuanziJettonFlag,omitempty"`
	RoundId              string            `protobuf:"bytes,17,req,name=roundId" json:"roundId"`
}

func (m *CMD_S_Scene_GameJetton) Reset()         { *m = CMD_S_Scene_GameJetton{} }
func (m *CMD_S_Scene_GameJetton) String() string { return proto.CompactTextString(m) }
func (*CMD_S_Scene_GameJetton) ProtoMessage()    {}
func (*CMD_S_Scene_GameJetton) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{3}
}
func (m *CMD_S_Scene_GameJetton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_Scene_GameJetton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_Scene_GameJetton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_Scene_GameJetton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_Scene_GameJetton.Merge(m, src)
}
func (m *CMD_S_Scene_GameJetton) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_Scene_GameJetton) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_Scene_GameJetton.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_Scene_GameJetton proto.InternalMessageInfo

func (m *CMD_S_Scene_GameJetton) GetCbPlaceTime() int32 {
	if m != nil {
		return m.CbPlaceTime
	}
	return 0
}

func (m *CMD_S_Scene_GameJetton) GetCbTimeLeave() int32 {
	if m != nil {
		return m.CbTimeLeave
	}
	return 0
}

func (m *CMD_S_Scene_GameJetton) GetTimeType() string {
	if m != nil {
		return m.TimeType
	}
	return ""
}

func (m *CMD_S_Scene_GameJetton) GetMaxBet() float64 {
	if m != nil {
		return m.MaxBet
	}
	return 0
}

func (m *CMD_S_Scene_GameJetton) GetCarType() []int32 {
	if m != nil {
		return m.CarType
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetAeraInfo() []*CMD_AeraInfo {
	if m != nil {
		return m.AeraInfo
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetOnlineNum() int32 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *CMD_S_Scene_GameJetton) GetCardgroup() []int32 {
	if m != nil {
		return m.Cardgroup
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetShuaizi() []int32 {
	if m != nil {
		return m.Shuaizi
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetSelf() *PlayerListItem {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetShunplace() []int32 {
	if m != nil {
		return m.Shunplace
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetTianplace() []int32 {
	if m != nil {
		return m.Tianplace
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetDiplace() []int32 {
	if m != nil {
		return m.Diplace
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetShensuanziJettonFlag() []int32 {
	if m != nil {
		return m.ShensuanziJettonFlag
	}
	return nil
}

func (m *CMD_S_Scene_GameJetton) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

//開始游戲場景
type CMD_S_Scene_GameStart struct {
	CbPlaceTime int32             `protobuf:"varint,1,req,name=cbPlaceTime" json:"cbPlaceTime"`
	CbTimeLeave int32             `protobuf:"varint,2,req,name=cbTimeLeave" json:"cbTimeLeave"`
	TimeType    string            `protobuf:"bytes,3,opt,name=TimeType" json:"TimeType"`
	MaxBet      float64           `protobuf:"fixed64,4,opt,name=maxBet" json:"maxBet"`
	CarType     []int32           `protobuf:"varint,5,rep,name=carType" json:"carType,omitempty"`
	AeraInfo    []*CMD_AeraInfo   `protobuf:"bytes,6,rep,name=aeraInfo" json:"aeraInfo,omitempty"`
	OnlineNum   int32             `protobuf:"varint,7,opt,name=OnlineNum" json:"OnlineNum"`
	Cardgroup   []int32           `protobuf:"varint,8,rep,name=cardgroup" json:"cardgroup,omitempty"`
	Players     []*PlayerListItem `protobuf:"bytes,9,rep,name=players" json:"players,omitempty"`
	Shuaizi     []int32           `protobuf:"varint,10,rep,name=shuaizi" json:"shuaizi,omitempty"`
	Self        *PlayerListItem   `protobuf:"bytes,12,opt,name=self" json:"self,omitempty"`
	Shunplace   []int32           `protobuf:"varint,13,rep,name=shunplace" json:"shunplace,omitempty"`
	Tianplace   []int32           `protobuf:"varint,14,rep,name=tianplace" json:"tianplace,omitempty"`
	Diplace     []int32           `protobuf:"varint,15,rep,name=diplace" json:"diplace,omitempty"`
	RoundId     string            `protobuf:"bytes,16,req,name=roundId" json:"roundId"`
}

func (m *CMD_S_Scene_GameStart) Reset()         { *m = CMD_S_Scene_GameStart{} }
func (m *CMD_S_Scene_GameStart) String() string { return proto.CompactTextString(m) }
func (*CMD_S_Scene_GameStart) ProtoMessage()    {}
func (*CMD_S_Scene_GameStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{4}
}
func (m *CMD_S_Scene_GameStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_Scene_GameStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_Scene_GameStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_Scene_GameStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_Scene_GameStart.Merge(m, src)
}
func (m *CMD_S_Scene_GameStart) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_Scene_GameStart) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_Scene_GameStart.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_Scene_GameStart proto.InternalMessageInfo

func (m *CMD_S_Scene_GameStart) GetCbPlaceTime() int32 {
	if m != nil {
		return m.CbPlaceTime
	}
	return 0
}

func (m *CMD_S_Scene_GameStart) GetCbTimeLeave() int32 {
	if m != nil {
		return m.CbTimeLeave
	}
	return 0
}

func (m *CMD_S_Scene_GameStart) GetTimeType() string {
	if m != nil {
		return m.TimeType
	}
	return ""
}

func (m *CMD_S_Scene_GameStart) GetMaxBet() float64 {
	if m != nil {
		return m.MaxBet
	}
	return 0
}

func (m *CMD_S_Scene_GameStart) GetCarType() []int32 {
	if m != nil {
		return m.CarType
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetAeraInfo() []*CMD_AeraInfo {
	if m != nil {
		return m.AeraInfo
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetOnlineNum() int32 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *CMD_S_Scene_GameStart) GetCardgroup() []int32 {
	if m != nil {
		return m.Cardgroup
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetShuaizi() []int32 {
	if m != nil {
		return m.Shuaizi
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetSelf() *PlayerListItem {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetShunplace() []int32 {
	if m != nil {
		return m.Shunplace
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetTianplace() []int32 {
	if m != nil {
		return m.Tianplace
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetDiplace() []int32 {
	if m != nil {
		return m.Diplace
	}
	return nil
}

func (m *CMD_S_Scene_GameStart) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

type CMD_AeraInfo struct {
	Mutical         int32   `protobuf:"varint,4,opt,name=mutical" json:"mutical"`
	LAllJettonScore float64 `protobuf:"fixed64,5,opt,name=lAllJettonScore" json:"lAllJettonScore"`
	SelfJettonScore float64 `protobuf:"fixed64,6,opt,name=SelfJettonScore" json:"SelfJettonScore"`
}

func (m *CMD_AeraInfo) Reset()         { *m = CMD_AeraInfo{} }
func (m *CMD_AeraInfo) String() string { return proto.CompactTextString(m) }
func (*CMD_AeraInfo) ProtoMessage()    {}
func (*CMD_AeraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{5}
}
func (m *CMD_AeraInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_AeraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_AeraInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_AeraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_AeraInfo.Merge(m, src)
}
func (m *CMD_AeraInfo) XXX_Size() int {
	return m.Size()
}
func (m *CMD_AeraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_AeraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_AeraInfo proto.InternalMessageInfo

func (m *CMD_AeraInfo) GetMutical() int32 {
	if m != nil {
		return m.Mutical
	}
	return 0
}

func (m *CMD_AeraInfo) GetLAllJettonScore() float64 {
	if m != nil {
		return m.LAllJettonScore
	}
	return 0
}

func (m *CMD_AeraInfo) GetSelfJettonScore() float64 {
	if m != nil {
		return m.SelfJettonScore
	}
	return 0
}

//結束游戲場景
type CMD_S_Scene_GameEnd struct {
	CbPlaceTime int32             `protobuf:"varint,1,req,name=cbPlaceTime" json:"cbPlaceTime"`
	CbTimeLeave int32             `protobuf:"varint,2,req,name=cbTimeLeave" json:"cbTimeLeave"`
	TimeType    string            `protobuf:"bytes,4,opt,name=TimeType" json:"TimeType"`
	MaxBet      float64           `protobuf:"fixed64,5,opt,name=maxBet" json:"maxBet"`
	CarType     []int32           `protobuf:"varint,6,rep,name=carType" json:"carType,omitempty"`
	AeraInfo    []*CMD_AeraInfo   `protobuf:"bytes,7,rep,name=aeraInfo" json:"aeraInfo,omitempty"`
	OnlineNum   int32             `protobuf:"varint,8,opt,name=OnlineNum" json:"OnlineNum"`
	Cardgroup   []int32           `protobuf:"varint,9,rep,name=cardgroup" json:"cardgroup,omitempty"`
	Players     []*PlayerListItem `protobuf:"bytes,10,rep,name=players" json:"players,omitempty"`
	Shuaizi     []int32           `protobuf:"varint,11,rep,name=shuaizi" json:"shuaizi,omitempty"`
	Self        *PlayerListItem   `protobuf:"bytes,12,opt,name=self" json:"self,omitempty"`
	Shunplace   []int32           `protobuf:"varint,13,rep,name=shunplace" json:"shunplace,omitempty"`
	Tianplace   []int32           `protobuf:"varint,14,rep,name=tianplace" json:"tianplace,omitempty"`
	Diplace     []int32           `protobuf:"varint,15,rep,name=diplace" json:"diplace,omitempty"`
	RoundId     string            `protobuf:"bytes,16,req,name=roundId" json:"roundId"`
}

func (m *CMD_S_Scene_GameEnd) Reset()         { *m = CMD_S_Scene_GameEnd{} }
func (m *CMD_S_Scene_GameEnd) String() string { return proto.CompactTextString(m) }
func (*CMD_S_Scene_GameEnd) ProtoMessage()    {}
func (*CMD_S_Scene_GameEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{6}
}
func (m *CMD_S_Scene_GameEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_Scene_GameEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_Scene_GameEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_Scene_GameEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_Scene_GameEnd.Merge(m, src)
}
func (m *CMD_S_Scene_GameEnd) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_Scene_GameEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_Scene_GameEnd.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_Scene_GameEnd proto.InternalMessageInfo

func (m *CMD_S_Scene_GameEnd) GetCbPlaceTime() int32 {
	if m != nil {
		return m.CbPlaceTime
	}
	return 0
}

func (m *CMD_S_Scene_GameEnd) GetCbTimeLeave() int32 {
	if m != nil {
		return m.CbTimeLeave
	}
	return 0
}

func (m *CMD_S_Scene_GameEnd) GetTimeType() string {
	if m != nil {
		return m.TimeType
	}
	return ""
}

func (m *CMD_S_Scene_GameEnd) GetMaxBet() float64 {
	if m != nil {
		return m.MaxBet
	}
	return 0
}

func (m *CMD_S_Scene_GameEnd) GetCarType() []int32 {
	if m != nil {
		return m.CarType
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetAeraInfo() []*CMD_AeraInfo {
	if m != nil {
		return m.AeraInfo
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetOnlineNum() int32 {
	if m != nil {
		return m.OnlineNum
	}
	return 0
}

func (m *CMD_S_Scene_GameEnd) GetCardgroup() []int32 {
	if m != nil {
		return m.Cardgroup
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetShuaizi() []int32 {
	if m != nil {
		return m.Shuaizi
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetSelf() *PlayerListItem {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetShunplace() []int32 {
	if m != nil {
		return m.Shunplace
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetTianplace() []int32 {
	if m != nil {
		return m.Tianplace
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetDiplace() []int32 {
	if m != nil {
		return m.Diplace
	}
	return nil
}

func (m *CMD_S_Scene_GameEnd) GetRoundId() string {
	if m != nil {
		return m.RoundId
	}
	return ""
}

// 玩家下注.
type CMD_C_PlaceJet struct {
	CbJettonArea int32   `protobuf:"varint,1,req,name=cbJettonArea" json:"cbJettonArea"`
	LJettonScore float64 `protobuf:"fixed64,2,req,name=lJettonScore" json:"lJettonScore"`
}

func (m *CMD_C_PlaceJet) Reset()         { *m = CMD_C_PlaceJet{} }
func (m *CMD_C_PlaceJet) String() string { return proto.CompactTextString(m) }
func (*CMD_C_PlaceJet) ProtoMessage()    {}
func (*CMD_C_PlaceJet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{7}
}
func (m *CMD_C_PlaceJet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_C_PlaceJet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_C_PlaceJet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_C_PlaceJet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_C_PlaceJet.Merge(m, src)
}
func (m *CMD_C_PlaceJet) XXX_Size() int {
	return m.Size()
}
func (m *CMD_C_PlaceJet) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_C_PlaceJet.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_C_PlaceJet proto.InternalMessageInfo

func (m *CMD_C_PlaceJet) GetCbJettonArea() int32 {
	if m != nil {
		return m.CbJettonArea
	}
	return 0
}

func (m *CMD_C_PlaceJet) GetLJettonScore() float64 {
	if m != nil {
		return m.LJettonScore
	}
	return 0
}

// 玩家.
type CMD_C_AskList struct {
	Index int32 `protobuf:"varint,1,req,name=index" json:"index"`
}

func (m *CMD_C_AskList) Reset()         { *m = CMD_C_AskList{} }
func (m *CMD_C_AskList) String() string { return proto.CompactTextString(m) }
func (*CMD_C_AskList) ProtoMessage()    {}
func (*CMD_C_AskList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{8}
}
func (m *CMD_C_AskList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_C_AskList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_C_AskList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_C_AskList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_C_AskList.Merge(m, src)
}
func (m *CMD_C_AskList) XXX_Size() int {
	return m.Size()
}
func (m *CMD_C_AskList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_C_AskList.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_C_AskList proto.InternalMessageInfo

func (m *CMD_C_AskList) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// 下注失败.
type CMD_S_PlaceJettonFail struct {
	DwUserID     int32   `protobuf:"varint,1,req,name=dwUserID" json:"dwUserID"`
	CbJettonArea int32   `protobuf:"varint,2,req,name=cbJettonArea" json:"cbJettonArea"`
	LPlaceScore  float64 `protobuf:"fixed64,3,req,name=lPlaceScore" json:"lPlaceScore"`
	CbAndroid    int32   `protobuf:"varint,4,req,name=cbAndroid" json:"cbAndroid"`
	ReturnCode   string  `protobuf:"bytes,5,opt,name=returnCode" json:"returnCode"`
}

func (m *CMD_S_PlaceJettonFail) Reset()         { *m = CMD_S_PlaceJettonFail{} }
func (m *CMD_S_PlaceJettonFail) String() string { return proto.CompactTextString(m) }
func (*CMD_S_PlaceJettonFail) ProtoMessage()    {}
func (*CMD_S_PlaceJettonFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{9}
}
func (m *CMD_S_PlaceJettonFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_PlaceJettonFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_PlaceJettonFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_PlaceJettonFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_PlaceJettonFail.Merge(m, src)
}
func (m *CMD_S_PlaceJettonFail) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_PlaceJettonFail) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_PlaceJettonFail.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_PlaceJettonFail proto.InternalMessageInfo

func (m *CMD_S_PlaceJettonFail) GetDwUserID() int32 {
	if m != nil {
		return m.DwUserID
	}
	return 0
}

func (m *CMD_S_PlaceJettonFail) GetCbJettonArea() int32 {
	if m != nil {
		return m.CbJettonArea
	}
	return 0
}

func (m *CMD_S_PlaceJettonFail) GetLPlaceScore() float64 {
	if m != nil {
		return m.LPlaceScore
	}
	return 0
}

func (m *CMD_S_PlaceJettonFail) GetCbAndroid() int32 {
	if m != nil {
		return m.CbAndroid
	}
	return 0
}

func (m *CMD_S_PlaceJettonFail) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

// 下注成功.
type CMD_S_PlaceJetSuccess struct {
	DwUserID        int32     `protobuf:"varint,1,req,name=dwUserID" json:"dwUserID"`
	CbJettonArea    int32     `protobuf:"varint,2,req,name=cbJettonArea" json:"cbJettonArea"`
	LJettonScore    float64   `protobuf:"fixed64,3,req,name=lJettonScore" json:"lJettonScore"`
	BIsAndroid      bool      `protobuf:"varint,4,req,name=bIsAndroid" json:"bIsAndroid"`
	LUserScore      float64   `protobuf:"fixed64,5,req,name=lUserScore" json:"lUserScore"`
	AllJettonScore  []float64 `protobuf:"fixed64,6,rep,name=AllJettonScore" json:"AllJettonScore,omitempty"`
	SelfJettonScore []float64 `protobuf:"fixed64,7,rep,name=SelfJettonScore" json:"SelfJettonScore,omitempty"`
}

func (m *CMD_S_PlaceJetSuccess) Reset()         { *m = CMD_S_PlaceJetSuccess{} }
func (m *CMD_S_PlaceJetSuccess) String() string { return proto.CompactTextString(m) }
func (*CMD_S_PlaceJetSuccess) ProtoMessage()    {}
func (*CMD_S_PlaceJetSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{10}
}
func (m *CMD_S_PlaceJetSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_PlaceJetSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_PlaceJetSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_PlaceJetSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_PlaceJetSuccess.Merge(m, src)
}
func (m *CMD_S_PlaceJetSuccess) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_PlaceJetSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_PlaceJetSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_PlaceJetSuccess proto.InternalMessageInfo

func (m *CMD_S_PlaceJetSuccess) GetDwUserID() int32 {
	if m != nil {
		return m.DwUserID
	}
	return 0
}

func (m *CMD_S_PlaceJetSuccess) GetCbJettonArea() int32 {
	if m != nil {
		return m.CbJettonArea
	}
	return 0
}

func (m *CMD_S_PlaceJetSuccess) GetLJettonScore() float64 {
	if m != nil {
		return m.LJettonScore
	}
	return 0
}

func (m *CMD_S_PlaceJetSuccess) GetBIsAndroid() bool {
	if m != nil {
		return m.BIsAndroid
	}
	return false
}

func (m *CMD_S_PlaceJetSuccess) GetLUserScore() float64 {
	if m != nil {
		return m.LUserScore
	}
	return 0
}

func (m *CMD_S_PlaceJetSuccess) GetAllJettonScore() []float64 {
	if m != nil {
		return m.AllJettonScore
	}
	return nil
}

func (m *CMD_S_PlaceJetSuccess) GetSelfJettonScore() []float64 {
	if m != nil {
		return m.SelfJettonScore
	}
	return nil
}

type Jetton_Player struct {
	DwSeatid      int32   `protobuf:"varint,1,req,name=dwSeatid" json:"dwSeatid"`
	DwTotalJetton []int32 `protobuf:"varint,2,rep,name=dwTotalJetton" json:"dwTotalJetton,omitempty"`
	LUserScore    float64 `protobuf:"fixed64,3,req,name=lUserScore" json:"lUserScore"`
}

func (m *Jetton_Player) Reset()         { *m = Jetton_Player{} }
func (m *Jetton_Player) String() string { return proto.CompactTextString(m) }
func (*Jetton_Player) ProtoMessage()    {}
func (*Jetton_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{11}
}
func (m *Jetton_Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Jetton_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Jetton_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Jetton_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Jetton_Player.Merge(m, src)
}
func (m *Jetton_Player) XXX_Size() int {
	return m.Size()
}
func (m *Jetton_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Jetton_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Jetton_Player proto.InternalMessageInfo

func (m *Jetton_Player) GetDwSeatid() int32 {
	if m != nil {
		return m.DwSeatid
	}
	return 0
}

func (m *Jetton_Player) GetDwTotalJetton() []int32 {
	if m != nil {
		return m.DwTotalJetton
	}
	return nil
}

func (m *Jetton_Player) GetLUserScore() float64 {
	if m != nil {
		return m.LUserScore
	}
	return 0
}

type CMD_S_Jetton_Broadcast struct {
	AllJettonScore []float64 `protobuf:"fixed64,1,rep,name=AllJettonScore" json:"AllJettonScore,omitempty"`
	TmpJettonScore []float64 `protobuf:"fixed64,2,rep,name=tmpJettonScore" json:"tmpJettonScore,omitempty"`
}

func (m *CMD_S_Jetton_Broadcast) Reset()         { *m = CMD_S_Jetton_Broadcast{} }
func (m *CMD_S_Jetton_Broadcast) String() string { return proto.CompactTextString(m) }
func (*CMD_S_Jetton_Broadcast) ProtoMessage()    {}
func (*CMD_S_Jetton_Broadcast) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{12}
}
func (m *CMD_S_Jetton_Broadcast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_Jetton_Broadcast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_Jetton_Broadcast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_Jetton_Broadcast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_Jetton_Broadcast.Merge(m, src)
}
func (m *CMD_S_Jetton_Broadcast) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_Jetton_Broadcast) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_Jetton_Broadcast.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_Jetton_Broadcast proto.InternalMessageInfo

func (m *CMD_S_Jetton_Broadcast) GetAllJettonScore() []float64 {
	if m != nil {
		return m.AllJettonScore
	}
	return nil
}

func (m *CMD_S_Jetton_Broadcast) GetTmpJettonScore() []float64 {
	if m != nil {
		return m.TmpJettonScore
	}
	return nil
}

// 下注失败.
type CMD_C_ReJetton struct {
	DwUserID int32 `protobuf:"varint,1,req,name=dwUserID" json:"dwUserID"`
}

func (m *CMD_C_ReJetton) Reset()         { *m = CMD_C_ReJetton{} }
func (m *CMD_C_ReJetton) String() string { return proto.CompactTextString(m) }
func (*CMD_C_ReJetton) ProtoMessage()    {}
func (*CMD_C_ReJetton) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{13}
}
func (m *CMD_C_ReJetton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_C_ReJetton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_C_ReJetton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_C_ReJetton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_C_ReJetton.Merge(m, src)
}
func (m *CMD_C_ReJetton) XXX_Size() int {
	return m.Size()
}
func (m *CMD_C_ReJetton) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_C_ReJetton.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_C_ReJetton proto.InternalMessageInfo

func (m *CMD_C_ReJetton) GetDwUserID() int32 {
	if m != nil {
		return m.DwUserID
	}
	return 0
}

//玩家列表
type CMD_S_UserWinList struct {
	Player []*PlayerInfo `protobuf:"bytes,1,rep,name=player" json:"player,omitempty"`
}

func (m *CMD_S_UserWinList) Reset()         { *m = CMD_S_UserWinList{} }
func (m *CMD_S_UserWinList) String() string { return proto.CompactTextString(m) }
func (*CMD_S_UserWinList) ProtoMessage()    {}
func (*CMD_S_UserWinList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{14}
}
func (m *CMD_S_UserWinList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_UserWinList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_UserWinList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_UserWinList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_UserWinList.Merge(m, src)
}
func (m *CMD_S_UserWinList) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_UserWinList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_UserWinList.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_UserWinList proto.InternalMessageInfo

func (m *CMD_S_UserWinList) GetPlayer() []*PlayerInfo {
	if m != nil {
		return m.Player
	}
	return nil
}

//获取玩家列表返回.
type PlayerInfo struct {
	DwUserID   int32  `protobuf:"varint,1,req,name=dwUserID" json:"dwUserID"`
	HeaderID   int32  `protobuf:"varint,2,req,name=headerID" json:"headerID"`
	NickName   string `protobuf:"bytes,3,req,name=nickName" json:"nickName"`
	SzLocation string `protobuf:"bytes,4,opt,name=szLocation" json:"szLocation"`
	WinScore   int32  `protobuf:"varint,5,opt,name=WinScore" json:"WinScore"`
	Wintime    string `protobuf:"bytes,6,opt,name=Wintime" json:"Wintime"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{15}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetDwUserID() int32 {
	if m != nil {
		return m.DwUserID
	}
	return 0
}

func (m *PlayerInfo) GetHeaderID() int32 {
	if m != nil {
		return m.HeaderID
	}
	return 0
}

func (m *PlayerInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *PlayerInfo) GetSzLocation() string {
	if m != nil {
		return m.SzLocation
	}
	return ""
}

func (m *PlayerInfo) GetWinScore() int32 {
	if m != nil {
		return m.WinScore
	}
	return 0
}

func (m *PlayerInfo) GetWintime() string {
	if m != nil {
		return m.Wintime
	}
	return ""
}

// 获取玩家列表.
type CMD_C_PlayerList struct {
	NLimitCount int32 `protobuf:"varint,1,req,name=nLimitCount" json:"nLimitCount"`
	NBeginIndex int32 `protobuf:"varint,2,opt,name=nBeginIndex" json:"nBeginIndex"`
}

func (m *CMD_C_PlayerList) Reset()         { *m = CMD_C_PlayerList{} }
func (m *CMD_C_PlayerList) String() string { return proto.CompactTextString(m) }
func (*CMD_C_PlayerList) ProtoMessage()    {}
func (*CMD_C_PlayerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{16}
}
func (m *CMD_C_PlayerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_C_PlayerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_C_PlayerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_C_PlayerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_C_PlayerList.Merge(m, src)
}
func (m *CMD_C_PlayerList) XXX_Size() int {
	return m.Size()
}
func (m *CMD_C_PlayerList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_C_PlayerList.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_C_PlayerList proto.InternalMessageInfo

func (m *CMD_C_PlayerList) GetNLimitCount() int32 {
	if m != nil {
		return m.NLimitCount
	}
	return 0
}

func (m *CMD_C_PlayerList) GetNBeginIndex() int32 {
	if m != nil {
		return m.NBeginIndex
	}
	return 0
}

// 获取玩家在线列表
type CMD_S_PlayerList struct {
	NEndIndex    int32             `protobuf:"varint,1,req,name=nEndIndex" json:"nEndIndex"`
	NResultCount int32             `protobuf:"varint,2,req,name=nResultCount" json:"nResultCount"`
	Players      []*PlayerListItem `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
}

func (m *CMD_S_PlayerList) Reset()         { *m = CMD_S_PlayerList{} }
func (m *CMD_S_PlayerList) String() string { return proto.CompactTextString(m) }
func (*CMD_S_PlayerList) ProtoMessage()    {}
func (*CMD_S_PlayerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{17}
}
func (m *CMD_S_PlayerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CMD_S_PlayerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CMD_S_PlayerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CMD_S_PlayerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMD_S_PlayerList.Merge(m, src)
}
func (m *CMD_S_PlayerList) XXX_Size() int {
	return m.Size()
}
func (m *CMD_S_PlayerList) XXX_DiscardUnknown() {
	xxx_messageInfo_CMD_S_PlayerList.DiscardUnknown(m)
}

var xxx_messageInfo_CMD_S_PlayerList proto.InternalMessageInfo

func (m *CMD_S_PlayerList) GetNEndIndex() int32 {
	if m != nil {
		return m.NEndIndex
	}
	return 0
}

func (m *CMD_S_PlayerList) GetNResultCount() int32 {
	if m != nil {
		return m.NResultCount
	}
	return 0
}

func (m *CMD_S_PlayerList) GetPlayers() []*PlayerListItem {
	if m != nil {
		return m.Players
	}
	return nil
}

//获取玩家列表返回.
type PlayerListItem struct {
	DwUserID         int32     `protobuf:"varint,1,req,name=dwUserID" json:"dwUserID"`
	HeaderID         int32     `protobuf:"varint,2,req,name=headerID" json:"headerID"`
	NickName         string    `protobuf:"bytes,3,req,name=nickName" json:"nickName"`
	LUserScore       float64   `protobuf:"fixed64,4,req,name=lUserScore" json:"lUserScore"`
	LTwentyWinScore  float64   `protobuf:"fixed64,5,opt,name=lTwentyWinScore" json:"lTwentyWinScore"`
	LTwentyWinCount  int32     `protobuf:"varint,6,opt,name=lTwentyWinCount" json:"lTwentyWinCount"`
	IsdivineMath     int32     `protobuf:"varint,7,opt,name=isdivineMath" json:"isdivineMath"`
	Index            int32     `protobuf:"varint,8,opt,name=Index" json:"Index"`
	IsBanker         int32     `protobuf:"varint,9,opt,name=isBanker" json:"isBanker"`
	IsApplyBanker    int32     `protobuf:"varint,10,opt,name=isApplyBanker" json:"isApplyBanker"`
	ApplyBankerMulti int32     `protobuf:"varint,11,opt,name=ApplyBankerMulti" json:"ApplyBankerMulti"`
	LJetton          int32     `protobuf:"varint,12,opt,name=lJetton" json:"lJetton"`
	SzLocation       string    `protobuf:"bytes,13,opt,name=szLocation" json:"szLocation"`
	Lwinscore        []float64 `protobuf:"fixed64,14,rep,name=lwinscore" json:"lwinscore,omitempty"`
	LAllWinScore     float64   `protobuf:"fixed64,15,opt,name=lAllWinScore" json:"lAllWinScore"`
}

func (m *PlayerListItem) Reset()         { *m = PlayerListItem{} }
func (m *PlayerListItem) String() string { return proto.CompactTextString(m) }
func (*PlayerListItem) ProtoMessage()    {}
func (*PlayerListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dc97d5bcab9c809, []int{18}
}
func (m *PlayerListItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerListItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerListItem.Merge(m, src)
}
func (m *PlayerListItem) XXX_Size() int {
	return m.Size()
}
func (m *PlayerListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerListItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerListItem proto.InternalMessageInfo

func (m *PlayerListItem) GetDwUserID() int32 {
	if m != nil {
		return m.DwUserID
	}
	return 0
}

func (m *PlayerListItem) GetHeaderID() int32 {
	if m != nil {
		return m.HeaderID
	}
	return 0
}

func (m *PlayerListItem) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *PlayerListItem) GetLUserScore() float64 {
	if m != nil {
		return m.LUserScore
	}
	return 0
}

func (m *PlayerListItem) GetLTwentyWinScore() float64 {
	if m != nil {
		return m.LTwentyWinScore
	}
	return 0
}

func (m *PlayerListItem) GetLTwentyWinCount() int32 {
	if m != nil {
		return m.LTwentyWinCount
	}
	return 0
}

func (m *PlayerListItem) GetIsdivineMath() int32 {
	if m != nil {
		return m.IsdivineMath
	}
	return 0
}

func (m *PlayerListItem) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PlayerListItem) GetIsBanker() int32 {
	if m != nil {
		return m.IsBanker
	}
	return 0
}

func (m *PlayerListItem) GetIsApplyBanker() int32 {
	if m != nil {
		return m.IsApplyBanker
	}
	return 0
}

func (m *PlayerListItem) GetApplyBankerMulti() int32 {
	if m != nil {
		return m.ApplyBankerMulti
	}
	return 0
}

func (m *PlayerListItem) GetLJetton() int32 {
	if m != nil {
		return m.LJetton
	}
	return 0
}

func (m *PlayerListItem) GetSzLocation() string {
	if m != nil {
		return m.SzLocation
	}
	return ""
}

func (m *PlayerListItem) GetLwinscore() []float64 {
	if m != nil {
		return m.Lwinscore
	}
	return nil
}

func (m *PlayerListItem) GetLAllWinScore() float64 {
	if m != nil {
		return m.LAllWinScore
	}
	return 0
}

func init() {
	proto.RegisterEnum("ErBaGang.SUBID", SUBID_name, SUBID_value)
	proto.RegisterType((*CMD_S_GameStart)(nil), "ErBaGang.CMD_S_GameStart")
	proto.RegisterType((*CMD_S_GameJetton)(nil), "ErBaGang.CMD_S_GameJetton")
	proto.RegisterType((*CMD_S_GameEnd)(nil), "ErBaGang.CMD_S_GameEnd")
	proto.RegisterType((*CMD_S_Scene_GameJetton)(nil), "ErBaGang.CMD_S_Scene_GameJetton")
	proto.RegisterType((*CMD_S_Scene_GameStart)(nil), "ErBaGang.CMD_S_Scene_GameStart")
	proto.RegisterType((*CMD_AeraInfo)(nil), "ErBaGang.CMD_AeraInfo")
	proto.RegisterType((*CMD_S_Scene_GameEnd)(nil), "ErBaGang.CMD_S_Scene_GameEnd")
	proto.RegisterType((*CMD_C_PlaceJet)(nil), "ErBaGang.CMD_C_PlaceJet")
	proto.RegisterType((*CMD_C_AskList)(nil), "ErBaGang.CMD_C_AskList")
	proto.RegisterType((*CMD_S_PlaceJettonFail)(nil), "ErBaGang.CMD_S_PlaceJettonFail")
	proto.RegisterType((*CMD_S_PlaceJetSuccess)(nil), "ErBaGang.CMD_S_PlaceJetSuccess")
	proto.RegisterType((*Jetton_Player)(nil), "ErBaGang.Jetton_Player")
	proto.RegisterType((*CMD_S_Jetton_Broadcast)(nil), "ErBaGang.CMD_S_Jetton_Broadcast")
	proto.RegisterType((*CMD_C_ReJetton)(nil), "ErBaGang.CMD_C_ReJetton")
	proto.RegisterType((*CMD_S_UserWinList)(nil), "ErBaGang.CMD_S_UserWinList")
	proto.RegisterType((*PlayerInfo)(nil), "ErBaGang.PlayerInfo")
	proto.RegisterType((*CMD_C_PlayerList)(nil), "ErBaGang.CMD_C_PlayerList")
	proto.RegisterType((*CMD_S_PlayerList)(nil), "ErBaGang.CMD_S_PlayerList")
	proto.RegisterType((*PlayerListItem)(nil), "ErBaGang.PlayerListItem")
}

func init() { proto.RegisterFile("ErBaGang.Message.proto", fileDescriptor_4dc97d5bcab9c809) }

var fileDescriptor_4dc97d5bcab9c809 = []byte{
	// 1535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xdf, 0x6a, 0x1b, 0xc7,
	0x17, 0xf6, 0xea, 0x9f, 0xa5, 0x23, 0x4b, 0x5e, 0x4f, 0x1c, 0xb3, 0x04, 0xe3, 0x9f, 0x58, 0x82,
	0x11, 0xf9, 0x05, 0x13, 0x4c, 0x5f, 0x60, 0x25, 0x2b, 0x41, 0xa9, 0xed, 0xb8, 0x5a, 0x19, 0x93,
	0x2b, 0x31, 0xde, 0x1d, 0x5b, 0x53, 0xaf, 0x66, 0xd5, 0xdd, 0x55, 0x1c, 0x07, 0xfa, 0x0a, 0xa5,
	0x17, 0x7d, 0x84, 0x96, 0x52, 0x7a, 0xdd, 0x77, 0xc8, 0x65, 0x6e, 0x0a, 0xa5, 0x17, 0xa1, 0x24,
	0x0f, 0xd0, 0x57, 0x28, 0xb3, 0xb3, 0x7f, 0x66, 0x25, 0xd9, 0x11, 0x21, 0x29, 0x29, 0xed, 0x9d,
	0xe6, 0xfb, 0xce, 0x8c, 0xce, 0xcc, 0xf9, 0xce, 0x99, 0x33, 0x0b, 0x1b, 0x1d, 0xaf, 0x85, 0x1f,
	0x61, 0x76, 0xbe, 0x73, 0x40, 0x7c, 0x1f, 0x9f, 0x93, 0x9d, 0xb1, 0xe7, 0x06, 0x2e, 0x2a, 0xc7,
	0xb8, 0xfe, 0x43, 0x1e, 0x56, 0xdb, 0x07, 0x7b, 0x03, 0x73, 0xf0, 0x08, 0x8f, 0x88, 0x19, 0x60,
	0x2f, 0x40, 0xdb, 0x50, 0xb5, 0x4e, 0x8f, 0x1c, 0x6c, 0x91, 0x3e, 0x1d, 0x11, 0x4d, 0x69, 0xe4,
	0x9a, 0xc5, 0x56, 0xe1, 0xe5, 0xeb, 0xff, 0x2d, 0xf5, 0x64, 0x42, 0xd8, 0xf1, 0x5f, 0xfb, 0x04,
	0x3f, 0x23, 0x5a, 0x2e, 0x6b, 0x97, 0x10, 0xe8, 0x2e, 0x80, 0x73, 0xec, 0x13, 0xcf, 0xb4, 0x5c,
	0x8f, 0x68, 0xf9, 0x46, 0xae, 0xa9, 0x44, 0x66, 0x12, 0x8e, 0x34, 0x58, 0x3e, 0x98, 0x04, 0xd4,
	0xc2, 0x8e, 0x56, 0x68, 0xe4, 0x9b, 0xc5, 0x5e, 0x3c, 0x44, 0x4d, 0x58, 0x75, 0x0c, 0xc7, 0x79,
	0x4c, 0x82, 0xc0, 0x65, 0x62, 0x91, 0x62, 0x23, 0xdf, 0x54, 0x7a, 0xd3, 0x30, 0xb7, 0x34, 0x89,
	0x73, 0x26, 0x5b, 0x96, 0x84, 0xe5, 0x14, 0x8c, 0x74, 0xa8, 0x3c, 0x61, 0x0e, 0x65, 0xe4, 0x70,
	0x32, 0xd2, 0x96, 0x1b, 0x4a, 0xe2, 0x79, 0x0a, 0xa3, 0x4d, 0xa8, 0x58, 0xd8, 0xb3, 0xcf, 0x3d,
	0x77, 0x32, 0xd6, 0xca, 0xa1, 0x4f, 0x29, 0x80, 0x76, 0x61, 0x79, 0xec, 0xe0, 0x2b, 0xe2, 0xf9,
	0x5a, 0xa5, 0x91, 0x6f, 0x56, 0x77, 0xb5, 0x9d, 0xe4, 0xb4, 0x8f, 0x42, 0x62, 0x9f, 0xfa, 0x41,
	0x37, 0x20, 0xa3, 0x5e, 0x6c, 0xc8, 0xf7, 0xe8, 0x0f, 0x27, 0x98, 0xbe, 0xa0, 0x1a, 0x88, 0x3d,
	0x46, 0x43, 0xb4, 0x05, 0xcb, 0x9e, 0x3b, 0x61, 0x76, 0xd7, 0xd6, 0xaa, 0x8d, 0x5c, 0xb3, 0x12,
	0x79, 0x13, 0x83, 0xfa, 0xf7, 0x79, 0x50, 0xd3, 0x38, 0x89, 0x9d, 0x7c, 0x72, 0x81, 0xda, 0x86,
	0xfa, 0xdc, 0x38, 0xd5, 0xff, 0x35, 0x61, 0xfa, 0xa5, 0x04, 0xb5, 0x34, 0x4c, 0x1d, 0x66, 0x7f,
	0xf0, 0x18, 0xdd, 0x83, 0x5a, 0x18, 0x8b, 0x03, 0xfc, 0x7c, 0x36, 0x4c, 0x59, 0x6a, 0x5e, 0xe2,
	0x14, 0x16, 0x4e, 0x9c, 0xe2, 0xfc, 0x88, 0x34, 0x61, 0xe5, 0xc0, 0xf5, 0x83, 0x13, 0x9a, 0x04,
	0x4e, 0x49, 0xfe, 0x3e, 0xc3, 0x70, 0x35, 0xb5, 0x88, 0x1f, 0x4c, 0x7c, 0xe2, 0x75, 0xf7, 0x32,
	0xc1, 0x93, 0x70, 0xf4, 0x00, 0xd4, 0x78, 0x74, 0x48, 0x2f, 0xc8, 0x21, 0x1e, 0x11, 0xad, 0xdc,
	0x50, 0x92, 0xa3, 0x9d, 0x61, 0xd1, 0x1d, 0x28, 0x9f, 0x50, 0xd6, 0x65, 0x36, 0x79, 0x1e, 0x86,
	0xb4, 0xd8, 0x4b, 0xc6, 0x3c, 0x72, 0x16, 0xf6, 0x82, 0xab, 0x31, 0x89, 0x23, 0x17, 0x0d, 0xb9,
	0xdf, 0x7c, 0x95, 0x4b, 0xca, 0xfc, 0xd0, 0xef, 0xaa, 0xec, 0xb7, 0xcc, 0x64, 0x35, 0xb7, 0xb2,
	0x80, 0xe6, 0x6a, 0x37, 0x68, 0xae, 0xbe, 0xa8, 0xe6, 0xee, 0x43, 0xc1, 0x27, 0xce, 0x99, 0xb6,
	0xda, 0x50, 0x6e, 0x9c, 0x10, 0x5a, 0xa1, 0xcf, 0xa0, 0x7c, 0x1a, 0x9d, 0x8b, 0xa6, 0xbe, 0x63,
	0x46, 0x62, 0x89, 0x74, 0x58, 0xb1, 0xb1, 0xe3, 0x24, 0x67, 0xb0, 0x16, 0x86, 0x38, 0x83, 0xf1,
	0x9d, 0xf9, 0xc3, 0x09, 0x1b, 0x73, 0x61, 0x6a, 0x48, 0xec, 0x2c, 0x01, 0x38, 0x1b, 0x50, 0x1c,
	0xb1, 0xb7, 0x04, 0x9b, 0x00, 0xfc, 0xf4, 0x6d, 0x2a, 0xb8, 0x75, 0x71, 0xfa, 0xd1, 0x50, 0xce,
	0x9b, 0xdb, 0xf3, 0xf2, 0xe6, 0x75, 0x01, 0x36, 0x44, 0xde, 0x98, 0x16, 0x61, 0xe4, 0x63, 0x16,
	0xb9, 0x06, 0x94, 0xf9, 0xa0, 0xcf, 0x35, 0x92, 0x97, 0x84, 0x96, 0xa0, 0x68, 0x13, 0x4a, 0x23,
	0xfc, 0xbc, 0x45, 0x02, 0xad, 0x20, 0x89, 0x24, 0xc2, 0x22, 0x89, 0x85, 0xd3, 0x8b, 0x89, 0xc4,
	0xc2, 0x79, 0xbb, 0x50, 0xc6, 0xc4, 0xc3, 0x5d, 0x76, 0xe6, 0x86, 0xf5, 0xac, 0xba, 0xbb, 0x91,
	0x06, 0x85, 0xef, 0xce, 0x88, 0xd8, 0x5e, 0x62, 0xf7, 0xc9, 0x15, 0xb8, 0x58, 0x86, 0x2b, 0x0b,
	0xc9, 0x30, 0x23, 0x96, 0xda, 0x8d, 0x62, 0xa9, 0xdf, 0x20, 0x96, 0xd5, 0xac, 0x58, 0x76, 0x61,
	0xdd, 0x1f, 0x12, 0xe6, 0x4f, 0x30, 0x7b, 0x41, 0x85, 0x0a, 0x1e, 0x3a, 0xf8, 0x5c, 0x53, 0x43,
	0xb3, 0xb9, 0x9c, 0x2c, 0xb0, 0xb5, 0x79, 0x02, 0xfb, 0xa9, 0x00, 0xb7, 0xa7, 0x05, 0xf6, 0x71,
	0xba, 0x9d, 0xff, 0xf4, 0xf5, 0xa9, 0xeb, 0x4b, 0xd2, 0x8a, 0x3a, 0x4f, 0x2b, 0xdf, 0x28, 0xb0,
	0x22, 0x1f, 0x27, 0x9f, 0x30, 0x4a, 0x3a, 0x9e, 0xf4, 0x08, 0x63, 0x10, 0xed, 0xcc, 0x6b, 0x50,
	0xd3, 0xc8, 0xce, 0xdc, 0xb6, 0x3b, 0xf3, 0xfa, 0x1f, 0xc9, 0x7e, 0x8a, 0xd4, 0x7f, 0x2c, 0xc0,
	0xad, 0x69, 0xf1, 0x7e, 0x8c, 0xde, 0x42, 0x96, 0x6e, 0xe1, 0x1d, 0xd2, 0x2d, 0xde, 0x2c, 0xdd,
	0xd2, 0xf5, 0xd2, 0x5d, 0x7e, 0x1f, 0xe9, 0x96, 0x17, 0x90, 0x6e, 0xe5, 0x06, 0xe9, 0xc2, 0x7b,
	0x48, 0xb7, 0xfa, 0xcf, 0x93, 0xae, 0x0d, 0x75, 0x7e, 0x9a, 0xed, 0x41, 0x18, 0xfc, 0xc7, 0x24,
	0xe0, 0x7d, 0x8f, 0x75, 0x2a, 0xc4, 0x64, 0x78, 0x04, 0x67, 0x44, 0x92, 0x61, 0xb8, 0x65, 0x46,
	0xc2, 0x39, 0xa9, 0xb1, 0xcc, 0x30, 0xfa, 0xff, 0x45, 0x93, 0xdb, 0x1e, 0x18, 0xfe, 0x05, 0xdf,
	0x36, 0xba, 0x03, 0x45, 0x1a, 0xf6, 0x63, 0xf2, 0xea, 0x02, 0xd2, 0x7f, 0x55, 0xe2, 0xca, 0x1b,
	0xfb, 0xc4, 0x6b, 0x36, 0xa6, 0x0e, 0x97, 0x9b, 0x7d, 0x79, 0x2c, 0xda, 0x43, 0x79, 0x62, 0x82,
	0xce, 0x38, 0x9f, 0xbb, 0xd6, 0xf9, 0x6d, 0xa8, 0x3a, 0xe1, 0xfa, 0xb3, 0x4d, 0xb1, 0x4c, 0x70,
	0x51, 0x59, 0xa7, 0x06, 0xb3, 0x3d, 0x97, 0xda, 0x5a, 0x41, 0x5a, 0x2e, 0x85, 0x79, 0xe3, 0xea,
	0x91, 0x60, 0xe2, 0xb1, 0xb6, 0x6b, 0x8b, 0x4c, 0x8e, 0xcf, 0x59, 0xc2, 0xf5, 0x9f, 0x73, 0xd3,
	0xfb, 0x32, 0x27, 0x96, 0x45, 0x7c, 0xff, 0x83, 0xee, 0x6b, 0x3a, 0x28, 0xf9, 0xeb, 0x82, 0xc2,
	0xbd, 0x3e, 0xed, 0xfa, 0xf2, 0xd6, 0xca, 0xb1, 0xd7, 0x29, 0x3e, 0xf5, 0xc4, 0x2b, 0x5e, 0xf3,
	0xc4, 0x9b, 0x7d, 0xc8, 0x95, 0x16, 0x7d, 0xc8, 0x2d, 0xcf, 0x7d, 0x36, 0xe8, 0x5f, 0x43, 0x4d,
	0x0c, 0x07, 0x22, 0x5b, 0xc4, 0x21, 0x99, 0x04, 0x07, 0xd4, 0x9e, 0x3e, 0x24, 0x81, 0xa2, 0xbb,
	0x50, 0xb3, 0x2f, 0xfb, 0x6e, 0x80, 0xa3, 0xbf, 0xd4, 0x72, 0x61, 0x2e, 0x64, 0xc1, 0xc5, 0xde,
	0xac, 0xfa, 0x30, 0x6e, 0x2f, 0x23, 0x27, 0x5a, 0x9e, 0x8b, 0x6d, 0x0b, 0xfb, 0xc1, 0x9c, 0xad,
	0x2a, 0x73, 0xb7, 0xba, 0x0d, 0xf5, 0x60, 0x34, 0xce, 0xe6, 0x47, 0x68, 0x97, 0x45, 0xf5, 0xdd,
	0x38, 0x03, 0x7b, 0x71, 0x03, 0xfb, 0x4e, 0x39, 0xe8, 0x06, 0xac, 0x09, 0xef, 0xf8, 0xf8, 0x84,
	0xb2, 0x30, 0xa7, 0xee, 0x43, 0x49, 0xd4, 0xa4, 0xd0, 0xa1, 0xea, 0xee, 0xfa, 0x74, 0xc1, 0x09,
	0xcb, 0x65, 0x64, 0xa3, 0xff, 0xae, 0x00, 0xa4, 0xf0, 0x02, 0x12, 0x6c, 0x40, 0x79, 0x48, 0xb0,
	0x1d, 0x5a, 0xc8, 0xf2, 0x4b, 0x50, 0x6e, 0xc1, 0xa8, 0x75, 0x11, 0xbe, 0xc8, 0xf2, 0x52, 0xb1,
	0x49, 0x50, 0x7e, 0xf6, 0xfe, 0x8b, 0x7d, 0xd7, 0xc2, 0x01, 0x75, 0x59, 0xe6, 0xc6, 0x90, 0x70,
	0xbe, 0x4e, 0xf2, 0x5a, 0x2c, 0x4a, 0x65, 0x3c, 0x41, 0x79, 0x55, 0x3b, 0xa1, 0x2c, 0xe0, 0x77,
	0x58, 0x49, 0x5a, 0x24, 0x06, 0xf5, 0x53, 0xf1, 0xed, 0xa3, 0x3d, 0x48, 0x2b, 0x2d, 0x4f, 0x78,
	0xb6, 0x4f, 0x47, 0x34, 0x68, 0xbb, 0x13, 0x16, 0x64, 0xef, 0x3e, 0x89, 0x08, 0xed, 0x5a, 0xe4,
	0x3c, 0x7e, 0x30, 0xe6, 0x24, 0x07, 0x64, 0x42, 0xff, 0x4e, 0x89, 0x3f, 0xb0, 0x48, 0x7f, 0xa2,
	0x43, 0x85, 0x75, 0x98, 0xdd, 0x9d, 0xa9, 0x6d, 0x29, 0xcc, 0x33, 0x94, 0xf5, 0x88, 0x3f, 0x71,
	0x22, 0x4f, 0x32, 0xb9, 0x2c, 0x33, 0xf2, 0x75, 0x94, 0x5f, 0xf0, 0x3a, 0xd2, 0x5f, 0x15, 0xa0,
	0x9e, 0xe5, 0xfe, 0xbe, 0xd8, 0x4a, 0x79, 0x55, 0xb8, 0xa6, 0x50, 0xf0, 0xce, 0xa7, 0x7f, 0x49,
	0x58, 0x70, 0x95, 0x09, 0x71, 0xda, 0xf9, 0x64, 0xc9, 0xac, 0xbd, 0x38, 0xaf, 0x92, 0x14, 0x91,
	0x69, 0x92, 0x1f, 0x2e, 0xf5, 0x6d, 0xfa, 0x8c, 0x32, 0x72, 0x80, 0x83, 0x61, 0xa6, 0x83, 0xcd,
	0x30, 0xfc, 0x0a, 0x12, 0x61, 0x92, 0x3b, 0x05, 0x01, 0xf1, 0xdd, 0x52, 0xbf, 0x85, 0xd9, 0x05,
	0xf1, 0xb4, 0x8a, 0xac, 0xc0, 0x18, 0x45, 0xf7, 0xa0, 0x46, 0x7d, 0x63, 0x3c, 0x76, 0xae, 0x22,
	0x33, 0x90, 0xcc, 0xb2, 0x14, 0x7a, 0x00, 0xaa, 0x34, 0x3c, 0x98, 0x38, 0x01, 0x0d, 0xbf, 0x26,
	0xc4, 0xe6, 0x33, 0x2c, 0xd7, 0x77, 0x5c, 0xc3, 0xe4, 0xef, 0x09, 0xcb, 0x52, 0x0d, 0x93, 0xf2,
	0xa8, 0x76, 0x4d, 0x1e, 0x6d, 0x42, 0x25, 0x7d, 0xba, 0xd7, 0xc3, 0xe2, 0x93, 0x02, 0xe1, 0x45,
	0x61, 0x38, 0x4e, 0x12, 0x86, 0x55, 0xf9, 0xfb, 0x86, 0xcc, 0xdc, 0xfb, 0x33, 0x07, 0x45, 0xf3,
	0xb8, 0xd5, 0xdd, 0x43, 0xb7, 0x60, 0xd5, 0x3c, 0x6e, 0xc9, 0xdf, 0x7e, 0x55, 0x1b, 0xad, 0x41,
	0x2d, 0x05, 0x3b, 0xcc, 0x56, 0x09, 0xba, 0x0d, 0x6b, 0x02, 0x32, 0xdb, 0x9d, 0xc3, 0xce, 0xc0,
	0xec, 0x1b, 0xbd, 0xbe, 0x7a, 0x96, 0x4e, 0x17, 0x70, 0xe7, 0x70, 0x4f, 0x3d, 0x47, 0xeb, 0xa0,
	0x0a, 0xf0, 0x68, 0xdf, 0x78, 0xda, 0xe9, 0xed, 0x77, 0xcd, 0xbe, 0x3a, 0x44, 0x1a, 0xac, 0x0b,
	0xf4, 0x71, 0xa7, 0xdf, 0x7f, 0x72, 0x38, 0x30, 0x8f, 0xdb, 0xed, 0x8e, 0x69, 0xaa, 0x34, 0x5d,
	0x3b, 0x62, 0x1e, 0x1a, 0xdd, 0x7d, 0xf5, 0xcb, 0x74, 0x99, 0xf4, 0x4b, 0x80, 0x3a, 0x46, 0x1b,
	0x80, 0xe4, 0x7f, 0x8c, 0xf0, 0xaf, 0xe2, 0x45, 0xda, 0x83, 0x63, 0xb3, 0xd3, 0x8b, 0x56, 0x52,
	0x2f, 0x62, 0xf3, 0x08, 0x36, 0xcc, 0xcf, 0x43, 0x6f, 0x1c, 0xb4, 0x09, 0x9a, 0x84, 0xf7, 0x3a,
	0x47, 0x1d, 0xa3, 0x1f, 0xcf, 0x1a, 0xa1, 0x3b, 0xb0, 0x21, 0xd8, 0x2f, 0x8e, 0x3b, 0xbd, 0xa7,
	0xf2, 0x3e, 0x58, 0xba, 0x8f, 0x94, 0x0b, 0x19, 0x37, 0x9e, 0x95, 0xec, 0xa3, 0xd5, 0x7b, 0x62,
	0xec, 0xb5, 0x0d, 0xb3, 0xaf, 0x7a, 0x2d, 0xed, 0xe5, 0x9b, 0x2d, 0xe5, 0xd5, 0x9b, 0x2d, 0xe5,
	0x8f, 0x37, 0x5b, 0xca, 0xb7, 0x6f, 0xb7, 0x96, 0x5e, 0xbd, 0xdd, 0x5a, 0xfa, 0xed, 0xed, 0xd6,
	0xd2, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72, 0xa3, 0xed, 0x7b, 0xa1, 0x17, 0x00, 0x00,
}

func (m *CMD_S_GameStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_GameStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbPlaceTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbTimeLeave))
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LUserScore))))
	i += 8
	if len(m.Mutical) > 0 {
		for _, num := range m.Mutical {
			dAtA[i] = 0x20
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.LAllJettonScore) > 0 {
		for _, num := range m.LAllJettonScore {
			dAtA[i] = 0x29
			i++
			f1 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
			i += 8
		}
	}
	if len(m.SelfJettonScore) > 0 {
		for _, num := range m.SelfJettonScore {
			dAtA[i] = 0x31
			i++
			f2 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f2))
			i += 8
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, num := range m.Cardgroup {
			dAtA[i] = 0x40
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, num := range m.Shuaizi {
			dAtA[i] = 0x50
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.RoundId)))
	i += copy(dAtA[i:], m.RoundId)
	return i, nil
}

func (m *CMD_S_GameJetton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_GameJetton) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbPlaceTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbTimeLeave))
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LUserScore))))
	i += 8
	if len(m.Mutical) > 0 {
		for _, num := range m.Mutical {
			dAtA[i] = 0x20
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.AllJettonScore) > 0 {
		for _, num := range m.AllJettonScore {
			dAtA[i] = 0x29
			i++
			f3 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f3))
			i += 8
		}
	}
	if len(m.SelfJettonScore) > 0 {
		for _, num := range m.SelfJettonScore {
			dAtA[i] = 0x31
			i++
			f4 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f4))
			i += 8
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, num := range m.Cardgroup {
			dAtA[i] = 0x40
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, num := range m.Shuaizi {
			dAtA[i] = 0x50
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.RoundId)))
	i += copy(dAtA[i:], m.RoundId)
	return i, nil
}

func (m *CMD_S_GameEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_GameEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbPlaceTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbTimeLeave))
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LUserMaxScore))))
	i += 8
	if len(m.LAllJettonScore) > 0 {
		for _, num := range m.LAllJettonScore {
			dAtA[i] = 0x21
			i++
			f5 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
			i += 8
		}
	}
	if len(m.SelfJettonScore) > 0 {
		for _, num := range m.SelfJettonScore {
			dAtA[i] = 0x29
			i++
			f6 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f6))
			i += 8
		}
	}
	dAtA[i] = 0x31
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MostWinScore))))
	i += 8
	dAtA[i] = 0x38
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.BestuserID))
	dAtA[i] = 0x42
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.BestuserNikeName)))
	i += copy(dAtA[i:], m.BestuserNikeName)
	if len(m.WinIndex) > 0 {
		for _, num := range m.WinIndex {
			dAtA[i] = 0x48
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Cartype) > 0 {
		for _, num := range m.Cartype {
			dAtA[i] = 0x50
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x59
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Userwinscore))))
	i += 8
	dAtA[i] = 0x60
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, num := range m.Cardgroup {
			dAtA[i] = 0x68
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x72
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Self != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Self.Size()))
		n7, err7 := m.Self.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.Bestuser != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Bestuser.Size()))
		n8, err8 := m.Bestuser.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	if len(m.Dallwinscore) > 0 {
		for _, num := range m.Dallwinscore {
			dAtA[i] = 0x89
			i++
			dAtA[i] = 0x1
			i++
			f9 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f9))
			i += 8
		}
	}
	if len(m.Shunplace) > 0 {
		for _, num := range m.Shunplace {
			dAtA[i] = 0x90
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, num := range m.Tianplace {
			dAtA[i] = 0x98
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Diplace) > 0 {
		for _, num := range m.Diplace {
			dAtA[i] = 0xa0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.RoundId)))
	i += copy(dAtA[i:], m.RoundId)
	return i, nil
}

func (m *CMD_S_Scene_GameJetton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_Scene_GameJetton) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbPlaceTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbTimeLeave))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.TimeType)))
	i += copy(dAtA[i:], m.TimeType)
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxBet))))
	i += 8
	if len(m.CarType) > 0 {
		for _, num := range m.CarType {
			dAtA[i] = 0x28
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.AeraInfo) > 0 {
		for _, msg := range m.AeraInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, num := range m.Cardgroup {
			dAtA[i] = 0x40
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, num := range m.Shuaizi {
			dAtA[i] = 0x50
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if m.Self != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Self.Size()))
		n10, err10 := m.Self.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	if len(m.Shunplace) > 0 {
		for _, num := range m.Shunplace {
			dAtA[i] = 0x68
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, num := range m.Tianplace {
			dAtA[i] = 0x70
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Diplace) > 0 {
		for _, num := range m.Diplace {
			dAtA[i] = 0x78
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.ShensuanziJettonFlag) > 0 {
		for _, num := range m.ShensuanziJettonFlag {
			dAtA[i] = 0x80
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.RoundId)))
	i += copy(dAtA[i:], m.RoundId)
	return i, nil
}

func (m *CMD_S_Scene_GameStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_Scene_GameStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbPlaceTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbTimeLeave))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.TimeType)))
	i += copy(dAtA[i:], m.TimeType)
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxBet))))
	i += 8
	if len(m.CarType) > 0 {
		for _, num := range m.CarType {
			dAtA[i] = 0x28
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.AeraInfo) > 0 {
		for _, msg := range m.AeraInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, num := range m.Cardgroup {
			dAtA[i] = 0x40
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, num := range m.Shuaizi {
			dAtA[i] = 0x50
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if m.Self != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Self.Size()))
		n11, err11 := m.Self.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if len(m.Shunplace) > 0 {
		for _, num := range m.Shunplace {
			dAtA[i] = 0x68
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, num := range m.Tianplace {
			dAtA[i] = 0x70
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Diplace) > 0 {
		for _, num := range m.Diplace {
			dAtA[i] = 0x78
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.RoundId)))
	i += copy(dAtA[i:], m.RoundId)
	return i, nil
}

func (m *CMD_AeraInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_AeraInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x20
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Mutical))
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LAllJettonScore))))
	i += 8
	dAtA[i] = 0x31
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SelfJettonScore))))
	i += 8
	return i, nil
}

func (m *CMD_S_Scene_GameEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_Scene_GameEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbPlaceTime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbTimeLeave))
	dAtA[i] = 0x22
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.TimeType)))
	i += copy(dAtA[i:], m.TimeType)
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxBet))))
	i += 8
	if len(m.CarType) > 0 {
		for _, num := range m.CarType {
			dAtA[i] = 0x30
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.AeraInfo) > 0 {
		for _, msg := range m.AeraInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x40
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, num := range m.Cardgroup {
			dAtA[i] = 0x48
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x52
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, num := range m.Shuaizi {
			dAtA[i] = 0x58
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if m.Self != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Self.Size()))
		n12, err12 := m.Self.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	if len(m.Shunplace) > 0 {
		for _, num := range m.Shunplace {
			dAtA[i] = 0x68
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, num := range m.Tianplace {
			dAtA[i] = 0x70
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	if len(m.Diplace) > 0 {
		for _, num := range m.Diplace {
			dAtA[i] = 0x78
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.RoundId)))
	i += copy(dAtA[i:], m.RoundId)
	return i, nil
}

func (m *CMD_C_PlaceJet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_C_PlaceJet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbJettonArea))
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LJettonScore))))
	i += 8
	return i, nil
}

func (m *CMD_C_AskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_C_AskList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Index))
	return i, nil
}

func (m *CMD_S_PlaceJettonFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_PlaceJettonFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.DwUserID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbJettonArea))
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LPlaceScore))))
	i += 8
	dAtA[i] = 0x20
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbAndroid))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.ReturnCode)))
	i += copy(dAtA[i:], m.ReturnCode)
	return i, nil
}

func (m *CMD_S_PlaceJetSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_PlaceJetSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.DwUserID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.CbJettonArea))
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LJettonScore))))
	i += 8
	dAtA[i] = 0x20
	i++
	if m.BIsAndroid {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LUserScore))))
	i += 8
	if len(m.AllJettonScore) > 0 {
		for _, num := range m.AllJettonScore {
			dAtA[i] = 0x31
			i++
			f13 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f13))
			i += 8
		}
	}
	if len(m.SelfJettonScore) > 0 {
		for _, num := range m.SelfJettonScore {
			dAtA[i] = 0x39
			i++
			f14 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f14))
			i += 8
		}
	}
	return i, nil
}

func (m *Jetton_Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Jetton_Player) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.DwSeatid))
	if len(m.DwTotalJetton) > 0 {
		for _, num := range m.DwTotalJetton {
			dAtA[i] = 0x10
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LUserScore))))
	i += 8
	return i, nil
}

func (m *CMD_S_Jetton_Broadcast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_Jetton_Broadcast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllJettonScore) > 0 {
		for _, num := range m.AllJettonScore {
			dAtA[i] = 0x9
			i++
			f15 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f15))
			i += 8
		}
	}
	if len(m.TmpJettonScore) > 0 {
		for _, num := range m.TmpJettonScore {
			dAtA[i] = 0x11
			i++
			f16 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f16))
			i += 8
		}
	}
	return i, nil
}

func (m *CMD_C_ReJetton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_C_ReJetton) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.DwUserID))
	return i, nil
}

func (m *CMD_S_UserWinList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_UserWinList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Player) > 0 {
		for _, msg := range m.Player {
			dAtA[i] = 0xa
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.DwUserID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.HeaderID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	dAtA[i] = 0x22
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.SzLocation)))
	i += copy(dAtA[i:], m.SzLocation)
	dAtA[i] = 0x28
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.WinScore))
	dAtA[i] = 0x32
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.Wintime)))
	i += copy(dAtA[i:], m.Wintime)
	return i, nil
}

func (m *CMD_C_PlayerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_C_PlayerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.NLimitCount))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.NBeginIndex))
	return i, nil
}

func (m *CMD_S_PlayerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMD_S_PlayerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.NEndIndex))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.NResultCount))
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintErBaGang_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerListItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerListItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.DwUserID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.HeaderID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LUserScore))))
	i += 8
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LTwentyWinScore))))
	i += 8
	dAtA[i] = 0x30
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.LTwentyWinCount))
	dAtA[i] = 0x38
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.IsdivineMath))
	dAtA[i] = 0x40
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x48
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.IsBanker))
	dAtA[i] = 0x50
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.IsApplyBanker))
	dAtA[i] = 0x58
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.ApplyBankerMulti))
	dAtA[i] = 0x60
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(m.LJetton))
	dAtA[i] = 0x6a
	i++
	i = encodeVarintErBaGang_Message(dAtA, i, uint64(len(m.SzLocation)))
	i += copy(dAtA[i:], m.SzLocation)
	if len(m.Lwinscore) > 0 {
		for _, num := range m.Lwinscore {
			dAtA[i] = 0x71
			i++
			f17 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f17))
			i += 8
		}
	}
	dAtA[i] = 0x79
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LAllWinScore))))
	i += 8
	return i, nil
}

func encodeVarintErBaGang_Message(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CMD_S_GameStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbPlaceTime))
	n += 1 + sovErBaGang_Message(uint64(m.CbTimeLeave))
	n += 9
	if len(m.Mutical) > 0 {
		for _, e := range m.Mutical {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.LAllJettonScore) > 0 {
		n += 9 * len(m.LAllJettonScore)
	}
	if len(m.SelfJettonScore) > 0 {
		n += 9 * len(m.SelfJettonScore)
	}
	n += 1 + sovErBaGang_Message(uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, e := range m.Cardgroup {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, e := range m.Shuaizi {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	l = len(m.RoundId)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_S_GameJetton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbPlaceTime))
	n += 1 + sovErBaGang_Message(uint64(m.CbTimeLeave))
	n += 9
	if len(m.Mutical) > 0 {
		for _, e := range m.Mutical {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.AllJettonScore) > 0 {
		n += 9 * len(m.AllJettonScore)
	}
	if len(m.SelfJettonScore) > 0 {
		n += 9 * len(m.SelfJettonScore)
	}
	n += 1 + sovErBaGang_Message(uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, e := range m.Cardgroup {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, e := range m.Shuaizi {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	l = len(m.RoundId)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_S_GameEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbPlaceTime))
	n += 1 + sovErBaGang_Message(uint64(m.CbTimeLeave))
	n += 9
	if len(m.LAllJettonScore) > 0 {
		n += 9 * len(m.LAllJettonScore)
	}
	if len(m.SelfJettonScore) > 0 {
		n += 9 * len(m.SelfJettonScore)
	}
	n += 9
	n += 1 + sovErBaGang_Message(uint64(m.BestuserID))
	l = len(m.BestuserNikeName)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	if len(m.WinIndex) > 0 {
		for _, e := range m.WinIndex {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Cartype) > 0 {
		for _, e := range m.Cartype {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	n += 9
	n += 1 + sovErBaGang_Message(uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, e := range m.Cardgroup {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovErBaGang_Message(uint64(l))
	}
	if m.Bestuser != nil {
		l = m.Bestuser.Size()
		n += 2 + l + sovErBaGang_Message(uint64(l))
	}
	if len(m.Dallwinscore) > 0 {
		n += 10 * len(m.Dallwinscore)
	}
	if len(m.Shunplace) > 0 {
		for _, e := range m.Shunplace {
			n += 2 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, e := range m.Tianplace {
			n += 2 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Diplace) > 0 {
		for _, e := range m.Diplace {
			n += 2 + sovErBaGang_Message(uint64(e))
		}
	}
	l = len(m.RoundId)
	n += 2 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_S_Scene_GameJetton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbPlaceTime))
	n += 1 + sovErBaGang_Message(uint64(m.CbTimeLeave))
	l = len(m.TimeType)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	n += 9
	if len(m.CarType) > 0 {
		for _, e := range m.CarType {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.AeraInfo) > 0 {
		for _, e := range m.AeraInfo {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	n += 1 + sovErBaGang_Message(uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, e := range m.Cardgroup {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, e := range m.Shuaizi {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovErBaGang_Message(uint64(l))
	}
	if len(m.Shunplace) > 0 {
		for _, e := range m.Shunplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, e := range m.Tianplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Diplace) > 0 {
		for _, e := range m.Diplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.ShensuanziJettonFlag) > 0 {
		for _, e := range m.ShensuanziJettonFlag {
			n += 2 + sovErBaGang_Message(uint64(e))
		}
	}
	l = len(m.RoundId)
	n += 2 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_S_Scene_GameStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbPlaceTime))
	n += 1 + sovErBaGang_Message(uint64(m.CbTimeLeave))
	l = len(m.TimeType)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	n += 9
	if len(m.CarType) > 0 {
		for _, e := range m.CarType {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.AeraInfo) > 0 {
		for _, e := range m.AeraInfo {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	n += 1 + sovErBaGang_Message(uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, e := range m.Cardgroup {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, e := range m.Shuaizi {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovErBaGang_Message(uint64(l))
	}
	if len(m.Shunplace) > 0 {
		for _, e := range m.Shunplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, e := range m.Tianplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Diplace) > 0 {
		for _, e := range m.Diplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	l = len(m.RoundId)
	n += 2 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_AeraInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.Mutical))
	n += 9
	n += 9
	return n
}

func (m *CMD_S_Scene_GameEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbPlaceTime))
	n += 1 + sovErBaGang_Message(uint64(m.CbTimeLeave))
	l = len(m.TimeType)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	n += 9
	if len(m.CarType) > 0 {
		for _, e := range m.CarType {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.AeraInfo) > 0 {
		for _, e := range m.AeraInfo {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	n += 1 + sovErBaGang_Message(uint64(m.OnlineNum))
	if len(m.Cardgroup) > 0 {
		for _, e := range m.Cardgroup {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	if len(m.Shuaizi) > 0 {
		for _, e := range m.Shuaizi {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovErBaGang_Message(uint64(l))
	}
	if len(m.Shunplace) > 0 {
		for _, e := range m.Shunplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Tianplace) > 0 {
		for _, e := range m.Tianplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	if len(m.Diplace) > 0 {
		for _, e := range m.Diplace {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	l = len(m.RoundId)
	n += 2 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_C_PlaceJet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.CbJettonArea))
	n += 9
	return n
}

func (m *CMD_C_AskList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.Index))
	return n
}

func (m *CMD_S_PlaceJettonFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.DwUserID))
	n += 1 + sovErBaGang_Message(uint64(m.CbJettonArea))
	n += 9
	n += 1 + sovErBaGang_Message(uint64(m.CbAndroid))
	l = len(m.ReturnCode)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_S_PlaceJetSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.DwUserID))
	n += 1 + sovErBaGang_Message(uint64(m.CbJettonArea))
	n += 9
	n += 2
	n += 9
	if len(m.AllJettonScore) > 0 {
		n += 9 * len(m.AllJettonScore)
	}
	if len(m.SelfJettonScore) > 0 {
		n += 9 * len(m.SelfJettonScore)
	}
	return n
}

func (m *Jetton_Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.DwSeatid))
	if len(m.DwTotalJetton) > 0 {
		for _, e := range m.DwTotalJetton {
			n += 1 + sovErBaGang_Message(uint64(e))
		}
	}
	n += 9
	return n
}

func (m *CMD_S_Jetton_Broadcast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllJettonScore) > 0 {
		n += 9 * len(m.AllJettonScore)
	}
	if len(m.TmpJettonScore) > 0 {
		n += 9 * len(m.TmpJettonScore)
	}
	return n
}

func (m *CMD_C_ReJetton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.DwUserID))
	return n
}

func (m *CMD_S_UserWinList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Player) > 0 {
		for _, e := range m.Player {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.DwUserID))
	n += 1 + sovErBaGang_Message(uint64(m.HeaderID))
	l = len(m.NickName)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	l = len(m.SzLocation)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	n += 1 + sovErBaGang_Message(uint64(m.WinScore))
	l = len(m.Wintime)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	return n
}

func (m *CMD_C_PlayerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.NLimitCount))
	n += 1 + sovErBaGang_Message(uint64(m.NBeginIndex))
	return n
}

func (m *CMD_S_PlayerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.NEndIndex))
	n += 1 + sovErBaGang_Message(uint64(m.NResultCount))
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovErBaGang_Message(uint64(l))
		}
	}
	return n
}

func (m *PlayerListItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovErBaGang_Message(uint64(m.DwUserID))
	n += 1 + sovErBaGang_Message(uint64(m.HeaderID))
	l = len(m.NickName)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	n += 9
	n += 9
	n += 1 + sovErBaGang_Message(uint64(m.LTwentyWinCount))
	n += 1 + sovErBaGang_Message(uint64(m.IsdivineMath))
	n += 1 + sovErBaGang_Message(uint64(m.Index))
	n += 1 + sovErBaGang_Message(uint64(m.IsBanker))
	n += 1 + sovErBaGang_Message(uint64(m.IsApplyBanker))
	n += 1 + sovErBaGang_Message(uint64(m.ApplyBankerMulti))
	n += 1 + sovErBaGang_Message(uint64(m.LJetton))
	l = len(m.SzLocation)
	n += 1 + l + sovErBaGang_Message(uint64(l))
	if len(m.Lwinscore) > 0 {
		n += 9 * len(m.Lwinscore)
	}
	n += 9
	return n
}

func sovErBaGang_Message(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErBaGang_Message(x uint64) (n int) {
	return sovErBaGang_Message(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CMD_S_GameStart) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_GameStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_GameStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbPlaceTime", wireType)
			}
			m.CbPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbPlaceTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbTimeLeave", wireType)
			}
			m.CbTimeLeave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbTimeLeave |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LUserScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LUserScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mutical = append(m.Mutical, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mutical) == 0 {
					m.Mutical = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mutical = append(m.Mutical, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutical", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.LAllJettonScore = append(m.LAllJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.LAllJettonScore) == 0 {
					m.LAllJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.LAllJettonScore = append(m.LAllJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LAllJettonScore", wireType)
			}
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SelfJettonScore = append(m.SelfJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SelfJettonScore) == 0 {
					m.SelfJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SelfJettonScore = append(m.SelfJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfJettonScore", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cardgroup = append(m.Cardgroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cardgroup) == 0 {
					m.Cardgroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cardgroup = append(m.Cardgroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardgroup", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shuaizi = append(m.Shuaizi, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shuaizi) == 0 {
					m.Shuaizi = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shuaizi = append(m.Shuaizi, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuaizi", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbPlaceTime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbTimeLeave")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lUserScore")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roundId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_GameJetton) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_GameJetton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_GameJetton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbPlaceTime", wireType)
			}
			m.CbPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbPlaceTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbTimeLeave", wireType)
			}
			m.CbTimeLeave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbTimeLeave |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LUserScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LUserScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mutical = append(m.Mutical, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mutical) == 0 {
					m.Mutical = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mutical = append(m.Mutical, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutical", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.AllJettonScore = append(m.AllJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.AllJettonScore) == 0 {
					m.AllJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.AllJettonScore = append(m.AllJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllJettonScore", wireType)
			}
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SelfJettonScore = append(m.SelfJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SelfJettonScore) == 0 {
					m.SelfJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SelfJettonScore = append(m.SelfJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfJettonScore", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cardgroup = append(m.Cardgroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cardgroup) == 0 {
					m.Cardgroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cardgroup = append(m.Cardgroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardgroup", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shuaizi = append(m.Shuaizi, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shuaizi) == 0 {
					m.Shuaizi = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shuaizi = append(m.Shuaizi, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuaizi", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbPlaceTime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbTimeLeave")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lUserScore")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roundId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_GameEnd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_GameEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_GameEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbPlaceTime", wireType)
			}
			m.CbPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbPlaceTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbTimeLeave", wireType)
			}
			m.CbTimeLeave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbTimeLeave |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LUserMaxScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LUserMaxScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.LAllJettonScore = append(m.LAllJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.LAllJettonScore) == 0 {
					m.LAllJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.LAllJettonScore = append(m.LAllJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LAllJettonScore", wireType)
			}
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SelfJettonScore = append(m.SelfJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SelfJettonScore) == 0 {
					m.SelfJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SelfJettonScore = append(m.SelfJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfJettonScore", wireType)
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MostWinScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MostWinScore = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestuserID", wireType)
			}
			m.BestuserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BestuserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestuserNikeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BestuserNikeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WinIndex = append(m.WinIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WinIndex) == 0 {
					m.WinIndex = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WinIndex = append(m.WinIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WinIndex", wireType)
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cartype = append(m.Cartype, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cartype) == 0 {
					m.Cartype = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cartype = append(m.Cartype, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cartype", wireType)
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userwinscore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Userwinscore = float64(math.Float64frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cardgroup = append(m.Cardgroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cardgroup) == 0 {
					m.Cardgroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cardgroup = append(m.Cardgroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardgroup", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &PlayerListItem{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bestuser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bestuser == nil {
				m.Bestuser = &PlayerListItem{}
			}
			if err := m.Bestuser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Dallwinscore = append(m.Dallwinscore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Dallwinscore) == 0 {
					m.Dallwinscore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Dallwinscore = append(m.Dallwinscore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dallwinscore", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shunplace = append(m.Shunplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shunplace) == 0 {
					m.Shunplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shunplace = append(m.Shunplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunplace", wireType)
			}
		case 19:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tianplace = append(m.Tianplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tianplace) == 0 {
					m.Tianplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tianplace = append(m.Tianplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tianplace", wireType)
			}
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Diplace = append(m.Diplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Diplace) == 0 {
					m.Diplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Diplace = append(m.Diplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Diplace", wireType)
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbPlaceTime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbTimeLeave")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lUserMaxScore")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roundId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_Scene_GameJetton) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_Scene_GameJetton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_Scene_GameJetton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbPlaceTime", wireType)
			}
			m.CbPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbPlaceTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbTimeLeave", wireType)
			}
			m.CbTimeLeave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbTimeLeave |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxBet = float64(math.Float64frombits(v))
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CarType = append(m.CarType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CarType) == 0 {
					m.CarType = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CarType = append(m.CarType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CarType", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AeraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AeraInfo = append(m.AeraInfo, &CMD_AeraInfo{})
			if err := m.AeraInfo[len(m.AeraInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cardgroup = append(m.Cardgroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cardgroup) == 0 {
					m.Cardgroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cardgroup = append(m.Cardgroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardgroup", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shuaizi = append(m.Shuaizi, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shuaizi) == 0 {
					m.Shuaizi = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shuaizi = append(m.Shuaizi, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuaizi", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &PlayerListItem{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shunplace = append(m.Shunplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shunplace) == 0 {
					m.Shunplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shunplace = append(m.Shunplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunplace", wireType)
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tianplace = append(m.Tianplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tianplace) == 0 {
					m.Tianplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tianplace = append(m.Tianplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tianplace", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Diplace = append(m.Diplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Diplace) == 0 {
					m.Diplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Diplace = append(m.Diplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Diplace", wireType)
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShensuanziJettonFlag = append(m.ShensuanziJettonFlag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ShensuanziJettonFlag) == 0 {
					m.ShensuanziJettonFlag = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShensuanziJettonFlag = append(m.ShensuanziJettonFlag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShensuanziJettonFlag", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbPlaceTime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbTimeLeave")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roundId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_Scene_GameStart) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_Scene_GameStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_Scene_GameStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbPlaceTime", wireType)
			}
			m.CbPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbPlaceTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbTimeLeave", wireType)
			}
			m.CbTimeLeave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbTimeLeave |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxBet = float64(math.Float64frombits(v))
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CarType = append(m.CarType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CarType) == 0 {
					m.CarType = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CarType = append(m.CarType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CarType", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AeraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AeraInfo = append(m.AeraInfo, &CMD_AeraInfo{})
			if err := m.AeraInfo[len(m.AeraInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cardgroup = append(m.Cardgroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cardgroup) == 0 {
					m.Cardgroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cardgroup = append(m.Cardgroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardgroup", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shuaizi = append(m.Shuaizi, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shuaizi) == 0 {
					m.Shuaizi = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shuaizi = append(m.Shuaizi, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuaizi", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &PlayerListItem{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shunplace = append(m.Shunplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shunplace) == 0 {
					m.Shunplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shunplace = append(m.Shunplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunplace", wireType)
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tianplace = append(m.Tianplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tianplace) == 0 {
					m.Tianplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tianplace = append(m.Tianplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tianplace", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Diplace = append(m.Diplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Diplace) == 0 {
					m.Diplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Diplace = append(m.Diplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Diplace", wireType)
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbPlaceTime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbTimeLeave")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roundId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_AeraInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_AeraInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_AeraInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutical", wireType)
			}
			m.Mutical = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mutical |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LAllJettonScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LAllJettonScore = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfJettonScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SelfJettonScore = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_Scene_GameEnd) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_Scene_GameEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_Scene_GameEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbPlaceTime", wireType)
			}
			m.CbPlaceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbPlaceTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbTimeLeave", wireType)
			}
			m.CbTimeLeave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbTimeLeave |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxBet = float64(math.Float64frombits(v))
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CarType = append(m.CarType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CarType) == 0 {
					m.CarType = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CarType = append(m.CarType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CarType", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AeraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AeraInfo = append(m.AeraInfo, &CMD_AeraInfo{})
			if err := m.AeraInfo[len(m.AeraInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineNum", wireType)
			}
			m.OnlineNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cardgroup = append(m.Cardgroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cardgroup) == 0 {
					m.Cardgroup = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cardgroup = append(m.Cardgroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardgroup", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shuaizi = append(m.Shuaizi, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shuaizi) == 0 {
					m.Shuaizi = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shuaizi = append(m.Shuaizi, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shuaizi", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &PlayerListItem{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shunplace = append(m.Shunplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shunplace) == 0 {
					m.Shunplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shunplace = append(m.Shunplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shunplace", wireType)
			}
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tianplace = append(m.Tianplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tianplace) == 0 {
					m.Tianplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tianplace = append(m.Tianplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tianplace", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Diplace = append(m.Diplace, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Diplace) == 0 {
					m.Diplace = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Diplace = append(m.Diplace, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Diplace", wireType)
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbPlaceTime")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbTimeLeave")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("roundId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_C_PlaceJet) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_C_PlaceJet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_C_PlaceJet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbJettonArea", wireType)
			}
			m.CbJettonArea = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbJettonArea |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LJettonScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LJettonScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbJettonArea")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lJettonScore")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_C_AskList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_C_AskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_C_AskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("index")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_PlaceJettonFail) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_PlaceJettonFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_PlaceJettonFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwUserID", wireType)
			}
			m.DwUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DwUserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbJettonArea", wireType)
			}
			m.CbJettonArea = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbJettonArea |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LPlaceScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LPlaceScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbAndroid", wireType)
			}
			m.CbAndroid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbAndroid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dwUserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbJettonArea")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lPlaceScore")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbAndroid")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_PlaceJetSuccess) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_PlaceJetSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_PlaceJetSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwUserID", wireType)
			}
			m.DwUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DwUserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbJettonArea", wireType)
			}
			m.CbJettonArea = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbJettonArea |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LJettonScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LJettonScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BIsAndroid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BIsAndroid = bool(v != 0)
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LUserScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LUserScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.AllJettonScore = append(m.AllJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.AllJettonScore) == 0 {
					m.AllJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.AllJettonScore = append(m.AllJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllJettonScore", wireType)
			}
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.SelfJettonScore = append(m.SelfJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.SelfJettonScore) == 0 {
					m.SelfJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.SelfJettonScore = append(m.SelfJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfJettonScore", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dwUserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("cbJettonArea")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lJettonScore")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("bIsAndroid")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lUserScore")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Jetton_Player) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Jetton_Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Jetton_Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwSeatid", wireType)
			}
			m.DwSeatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DwSeatid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DwTotalJetton = append(m.DwTotalJetton, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DwTotalJetton) == 0 {
					m.DwTotalJetton = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErBaGang_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DwTotalJetton = append(m.DwTotalJetton, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DwTotalJetton", wireType)
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LUserScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LUserScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dwSeatid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lUserScore")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_Jetton_Broadcast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_Jetton_Broadcast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_Jetton_Broadcast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.AllJettonScore = append(m.AllJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.AllJettonScore) == 0 {
					m.AllJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.AllJettonScore = append(m.AllJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllJettonScore", wireType)
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.TmpJettonScore = append(m.TmpJettonScore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.TmpJettonScore) == 0 {
					m.TmpJettonScore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.TmpJettonScore = append(m.TmpJettonScore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TmpJettonScore", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_C_ReJetton) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_C_ReJetton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_C_ReJetton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwUserID", wireType)
			}
			m.DwUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DwUserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dwUserID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_UserWinList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_UserWinList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_UserWinList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = append(m.Player, &PlayerInfo{})
			if err := m.Player[len(m.Player)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwUserID", wireType)
			}
			m.DwUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DwUserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderID", wireType)
			}
			m.HeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SzLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SzLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinScore", wireType)
			}
			m.WinScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wintime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wintime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dwUserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("headerID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nickName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_C_PlayerList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_C_PlayerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_C_PlayerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NLimitCount", wireType)
			}
			m.NLimitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NLimitCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NBeginIndex", wireType)
			}
			m.NBeginIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NBeginIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nLimitCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMD_S_PlayerList) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMD_S_PlayerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMD_S_PlayerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NEndIndex", wireType)
			}
			m.NEndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NEndIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NResultCount", wireType)
			}
			m.NResultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NResultCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &PlayerListItem{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nEndIndex")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nResultCount")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerListItem) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerListItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerListItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DwUserID", wireType)
			}
			m.DwUserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DwUserID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderID", wireType)
			}
			m.HeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LUserScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LUserScore = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LTwentyWinScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LTwentyWinScore = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LTwentyWinCount", wireType)
			}
			m.LTwentyWinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LTwentyWinCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsdivineMath", wireType)
			}
			m.IsdivineMath = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsdivineMath |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanker", wireType)
			}
			m.IsBanker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBanker |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApplyBanker", wireType)
			}
			m.IsApplyBanker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsApplyBanker |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyBankerMulti", wireType)
			}
			m.ApplyBankerMulti = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyBankerMulti |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LJetton", wireType)
			}
			m.LJetton = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LJetton |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SzLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SzLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Lwinscore = append(m.Lwinscore, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErBaGang_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Lwinscore) == 0 {
					m.Lwinscore = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Lwinscore = append(m.Lwinscore, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Lwinscore", wireType)
			}
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LAllWinScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LAllWinScore = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipErBaGang_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErBaGang_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dwUserID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("headerID")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nickName")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lUserScore")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErBaGang_Message(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErBaGang_Message
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErBaGang_Message
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErBaGang_Message
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthErBaGang_Message
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErBaGang_Message
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErBaGang_Message(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthErBaGang_Message
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErBaGang_Message = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErBaGang_Message   = fmt.Errorf("proto: integer overflow")
)
