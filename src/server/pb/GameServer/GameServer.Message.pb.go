// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: GameServer.Message.proto

package GameServer

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	"server/pb/Game_Common"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 游戏服消息.
type SUBID int32

const (
	SUBID_SUBID_BEGIN                        SUBID = 0
	SUBID_SUB_C2S_ENTER_ROOM_REQ             SUBID = 3
	SUBID_SUB_S2C_ENTER_ROOM_RES             SUBID = 4
	SUBID_SUB_S2C_USER_ENTER_NOTIFY          SUBID = 5
	SUBID_SUB_S2C_USER_SCORE_NOTIFY          SUBID = 6
	SUBID_SUB_S2C_USER_STATUS_NOTIFY         SUBID = 7
	SUBID_SUB_C2S_USER_READY_REQ             SUBID = 8
	SUBID_SUB_S2C_USER_READY_RES             SUBID = 29
	SUBID_SUB_C2S_USER_LEFT_REQ              SUBID = 9
	SUBID_SUB_S2C_USER_LEFT_RES              SUBID = 10
	SUBID_SUB_C2S_CHANGE_TABLE_REQ           SUBID = 12
	SUBID_SUB_S2C_CHANGE_TABLE_RES           SUBID = 13
	SUBID_SUB_C2S_USER_RECHARGE_OK_REQ       SUBID = 14
	SUBID_SUB_S2C_USER_RECHARGE_OK_RES       SUBID = 15
	SUBID_SUB_C2S_USER_EXCHANGE_FAIL_REQ     SUBID = 16
	SUBID_SUB_S2C_USER_EXCHANGE_FAIL_RES     SUBID = 17
	SUBID_SUB_C2S_CHANGE_TABLE_SIT_CHAIR_REQ SUBID = 18
	SUBID_SUB_S2C_CHANGE_TABLE_SIT_CHAIR_RES SUBID = 19
	SUBID_SUB_S2C_PLAY_IN_OTHERROOM          SUBID = 20
	SUBID_SUB_GF_SYSTEM_MESSAGE              SUBID = 21
)

var SUBID_name = map[int32]string{
	0:  "SUBID_BEGIN",
	3:  "SUB_C2S_ENTER_ROOM_REQ",
	4:  "SUB_S2C_ENTER_ROOM_RES",
	5:  "SUB_S2C_USER_ENTER_NOTIFY",
	6:  "SUB_S2C_USER_SCORE_NOTIFY",
	7:  "SUB_S2C_USER_STATUS_NOTIFY",
	8:  "SUB_C2S_USER_READY_REQ",
	29: "SUB_S2C_USER_READY_RES",
	9:  "SUB_C2S_USER_LEFT_REQ",
	10: "SUB_S2C_USER_LEFT_RES",
	12: "SUB_C2S_CHANGE_TABLE_REQ",
	13: "SUB_S2C_CHANGE_TABLE_RES",
	14: "SUB_C2S_USER_RECHARGE_OK_REQ",
	15: "SUB_S2C_USER_RECHARGE_OK_RES",
	16: "SUB_C2S_USER_EXCHANGE_FAIL_REQ",
	17: "SUB_S2C_USER_EXCHANGE_FAIL_RES",
	18: "SUB_C2S_CHANGE_TABLE_SIT_CHAIR_REQ",
	19: "SUB_S2C_CHANGE_TABLE_SIT_CHAIR_RES",
	20: "SUB_S2C_PLAY_IN_OTHERROOM",
	21: "SUB_GF_SYSTEM_MESSAGE",
}

var SUBID_value = map[string]int32{
	"SUBID_BEGIN":                        0,
	"SUB_C2S_ENTER_ROOM_REQ":             3,
	"SUB_S2C_ENTER_ROOM_RES":             4,
	"SUB_S2C_USER_ENTER_NOTIFY":          5,
	"SUB_S2C_USER_SCORE_NOTIFY":          6,
	"SUB_S2C_USER_STATUS_NOTIFY":         7,
	"SUB_C2S_USER_READY_REQ":             8,
	"SUB_S2C_USER_READY_RES":             29,
	"SUB_C2S_USER_LEFT_REQ":              9,
	"SUB_S2C_USER_LEFT_RES":              10,
	"SUB_C2S_CHANGE_TABLE_REQ":           12,
	"SUB_S2C_CHANGE_TABLE_RES":           13,
	"SUB_C2S_USER_RECHARGE_OK_REQ":       14,
	"SUB_S2C_USER_RECHARGE_OK_RES":       15,
	"SUB_C2S_USER_EXCHANGE_FAIL_REQ":     16,
	"SUB_S2C_USER_EXCHANGE_FAIL_RES":     17,
	"SUB_C2S_CHANGE_TABLE_SIT_CHAIR_REQ": 18,
	"SUB_S2C_CHANGE_TABLE_SIT_CHAIR_RES": 19,
	"SUB_S2C_PLAY_IN_OTHERROOM":          20,
	"SUB_GF_SYSTEM_MESSAGE":              21,
}

func (x SUBID) String() string {
	return proto.EnumName(SUBID_name, int32(x))
}

func (SUBID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{0}
}

// 玩家状态.
type USER_STATUS int32

const (
	USER_STATUS_sGetOut          USER_STATUS = 0
	USER_STATUS_sFree            USER_STATUS = 1
	USER_STATUS_sSit             USER_STATUS = 2
	USER_STATUS_sReady           USER_STATUS = 3
	USER_STATUS_sPlaying         USER_STATUS = 4
	USER_STATUS_sOffLine         USER_STATUS = 5
	USER_STATUS_sLookOn          USER_STATUS = 6
	USER_STATUS_sGetOutAtPlaying USER_STATUS = 7
)

var USER_STATUS_name = map[int32]string{
	0: "sGetOut",
	1: "sFree",
	2: "sSit",
	3: "sReady",
	4: "sPlaying",
	5: "sOffLine",
	6: "sLookOn",
	7: "sGetOutAtPlaying",
}

var USER_STATUS_value = map[string]int32{
	"sGetOut":          0,
	"sFree":            1,
	"sSit":             2,
	"sReady":           3,
	"sPlaying":         4,
	"sOffLine":         5,
	"sLookOn":          6,
	"sGetOutAtPlaying": 7,
}

func (x USER_STATUS) String() string {
	return proto.EnumName(USER_STATUS_name, int32(x))
}

func (USER_STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{1}
}

// 游戏结束原因.
type GameEndTag int32

const (
	GameEndTag_GER_NORMAL      GameEndTag = 0
	GameEndTag_GER_UER_LEFT    GameEndTag = 1
	GameEndTag_GER_DISMISS     GameEndTag = 2
	GameEndTag_GER_FLOW_GUREAU GameEndTag = 3
)

var GameEndTag_name = map[int32]string{
	0: "GER_NORMAL",
	1: "GER_UER_LEFT",
	2: "GER_DISMISS",
	3: "GER_FLOW_GUREAU",
}

var GameEndTag_value = map[string]int32{
	"GER_NORMAL":      0,
	"GER_UER_LEFT":    1,
	"GER_DISMISS":     2,
	"GER_FLOW_GUREAU": 3,
}

func (x GameEndTag) String() string {
	return proto.EnumName(GameEndTag_name, int32(x))
}

func (GameEndTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{2}
}

// 游戏服通道消息.
type MSG_CSC_Passageway struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PassData []byte              `protobuf:"bytes,2,opt,name=passData,proto3" json:"passData,omitempty"`
}

func (m *MSG_CSC_Passageway) Reset()         { *m = MSG_CSC_Passageway{} }
func (m *MSG_CSC_Passageway) String() string { return proto.CompactTextString(m) }
func (*MSG_CSC_Passageway) ProtoMessage()    {}
func (*MSG_CSC_Passageway) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{0}
}
func (m *MSG_CSC_Passageway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_CSC_Passageway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_CSC_Passageway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_CSC_Passageway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_CSC_Passageway.Merge(m, src)
}
func (m *MSG_CSC_Passageway) XXX_Size() int {
	return m.Size()
}
func (m *MSG_CSC_Passageway) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_CSC_Passageway.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_CSC_Passageway proto.InternalMessageInfo

func (m *MSG_CSC_Passageway) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_CSC_Passageway) GetPassData() []byte {
	if m != nil {
		return m.PassData
	}
	return nil
}

// 系统消息.
type MSG_S2C_SystemMessage struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MsgType    int32               `protobuf:"varint,2,opt,name=msgType,proto3" json:"msgType,omitempty"`
	MsgContent string              `protobuf:"bytes,3,opt,name=msgContent,proto3" json:"msgContent,omitempty"`
}

func (m *MSG_S2C_SystemMessage) Reset()         { *m = MSG_S2C_SystemMessage{} }
func (m *MSG_S2C_SystemMessage) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_SystemMessage) ProtoMessage()    {}
func (*MSG_S2C_SystemMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{1}
}
func (m *MSG_S2C_SystemMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_SystemMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_SystemMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_SystemMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_SystemMessage.Merge(m, src)
}
func (m *MSG_S2C_SystemMessage) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_SystemMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_SystemMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_SystemMessage proto.InternalMessageInfo

func (m *MSG_S2C_SystemMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_SystemMessage) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *MSG_S2C_SystemMessage) GetMsgContent() string {
	if m != nil {
		return m.MsgContent
	}
	return ""
}

// 玩家进入游戏.
type MSG_C2S_UserEnterMessage struct {
	Header          *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId          int32               `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoomId          int32               `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	DynamicPassword []byte              `protobuf:"bytes,4,opt,name=dynamicPassword,proto3" json:"dynamicPassword,omitempty"`
}

func (m *MSG_C2S_UserEnterMessage) Reset()         { *m = MSG_C2S_UserEnterMessage{} }
func (m *MSG_C2S_UserEnterMessage) String() string { return proto.CompactTextString(m) }
func (*MSG_C2S_UserEnterMessage) ProtoMessage()    {}
func (*MSG_C2S_UserEnterMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{2}
}
func (m *MSG_C2S_UserEnterMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_C2S_UserEnterMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_C2S_UserEnterMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_C2S_UserEnterMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_C2S_UserEnterMessage.Merge(m, src)
}
func (m *MSG_C2S_UserEnterMessage) XXX_Size() int {
	return m.Size()
}
func (m *MSG_C2S_UserEnterMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_C2S_UserEnterMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_C2S_UserEnterMessage proto.InternalMessageInfo

func (m *MSG_C2S_UserEnterMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_C2S_UserEnterMessage) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_C2S_UserEnterMessage) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *MSG_C2S_UserEnterMessage) GetDynamicPassword() []byte {
	if m != nil {
		return m.DynamicPassword
	}
	return nil
}

// 进入房间成功.
type MSG_S2C_UserEnterMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *MSG_S2C_UserEnterMessageResponse) Reset()         { *m = MSG_S2C_UserEnterMessageResponse{} }
func (m *MSG_S2C_UserEnterMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_UserEnterMessageResponse) ProtoMessage()    {}
func (*MSG_S2C_UserEnterMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{3}
}
func (m *MSG_S2C_UserEnterMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_UserEnterMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_UserEnterMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_UserEnterMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_UserEnterMessageResponse.Merge(m, src)
}
func (m *MSG_S2C_UserEnterMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_UserEnterMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_UserEnterMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_UserEnterMessageResponse proto.InternalMessageInfo

func (m *MSG_S2C_UserEnterMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_UserEnterMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MSG_S2C_UserEnterMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// 进入房间成功返回数据 通知所有同一桌人
type MSG_S2C_UserBaseInfo struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId     int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Account    string              `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	NickName   string              `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
	HeadIndex  int32               `protobuf:"varint,5,opt,name=headIndex,proto3" json:"headIndex,omitempty"`
	TableId    int32               `protobuf:"varint,6,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ChairId    int32               `protobuf:"varint,7,opt,name=chairId,proto3" json:"chairId,omitempty"`
	UserStatus int32               `protobuf:"varint,8,opt,name=userStatus,proto3" json:"userStatus,omitempty"`
	Location   string              `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Score      int64               `protobuf:"varint,10,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *MSG_S2C_UserBaseInfo) Reset()         { *m = MSG_S2C_UserBaseInfo{} }
func (m *MSG_S2C_UserBaseInfo) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_UserBaseInfo) ProtoMessage()    {}
func (*MSG_S2C_UserBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{4}
}
func (m *MSG_S2C_UserBaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_UserBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_UserBaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_UserBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_UserBaseInfo.Merge(m, src)
}
func (m *MSG_S2C_UserBaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_UserBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_UserBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_UserBaseInfo proto.InternalMessageInfo

func (m *MSG_S2C_UserBaseInfo) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_UserBaseInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_S2C_UserBaseInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MSG_S2C_UserBaseInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *MSG_S2C_UserBaseInfo) GetHeadIndex() int32 {
	if m != nil {
		return m.HeadIndex
	}
	return 0
}

func (m *MSG_S2C_UserBaseInfo) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *MSG_S2C_UserBaseInfo) GetChairId() int32 {
	if m != nil {
		return m.ChairId
	}
	return 0
}

func (m *MSG_S2C_UserBaseInfo) GetUserStatus() int32 {
	if m != nil {
		return m.UserStatus
	}
	return 0
}

func (m *MSG_S2C_UserBaseInfo) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MSG_S2C_UserBaseInfo) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 服务器下发玩家状态.
type MSG_S2C_GameUserStatus struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId   uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TableId  int32               `protobuf:"varint,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ChairId  int32               `protobuf:"varint,4,opt,name=chairId,proto3" json:"chairId,omitempty"`
	UsStatus int32               `protobuf:"varint,5,opt,name=usStatus,proto3" json:"usStatus,omitempty"`
}

func (m *MSG_S2C_GameUserStatus) Reset()         { *m = MSG_S2C_GameUserStatus{} }
func (m *MSG_S2C_GameUserStatus) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_GameUserStatus) ProtoMessage()    {}
func (*MSG_S2C_GameUserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{5}
}
func (m *MSG_S2C_GameUserStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_GameUserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_GameUserStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_GameUserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_GameUserStatus.Merge(m, src)
}
func (m *MSG_S2C_GameUserStatus) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_GameUserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_GameUserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_GameUserStatus proto.InternalMessageInfo

func (m *MSG_S2C_GameUserStatus) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_GameUserStatus) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_S2C_GameUserStatus) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *MSG_S2C_GameUserStatus) GetChairId() int32 {
	if m != nil {
		return m.ChairId
	}
	return 0
}

func (m *MSG_S2C_GameUserStatus) GetUsStatus() int32 {
	if m != nil {
		return m.UsStatus
	}
	return 0
}

// 玩家正在其他房间
type MSG_S2C_PlayInOtherRoom struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId int32               `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoomId int32               `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (m *MSG_S2C_PlayInOtherRoom) Reset()         { *m = MSG_S2C_PlayInOtherRoom{} }
func (m *MSG_S2C_PlayInOtherRoom) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_PlayInOtherRoom) ProtoMessage()    {}
func (*MSG_S2C_PlayInOtherRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{6}
}
func (m *MSG_S2C_PlayInOtherRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_PlayInOtherRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_PlayInOtherRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_PlayInOtherRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_PlayInOtherRoom.Merge(m, src)
}
func (m *MSG_S2C_PlayInOtherRoom) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_PlayInOtherRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_PlayInOtherRoom.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_PlayInOtherRoom proto.InternalMessageInfo

func (m *MSG_S2C_PlayInOtherRoom) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_PlayInOtherRoom) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_S2C_PlayInOtherRoom) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 玩家就绪.
type MSG_C2S_UserReadyMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *MSG_C2S_UserReadyMessage) Reset()         { *m = MSG_C2S_UserReadyMessage{} }
func (m *MSG_C2S_UserReadyMessage) String() string { return proto.CompactTextString(m) }
func (*MSG_C2S_UserReadyMessage) ProtoMessage()    {}
func (*MSG_C2S_UserReadyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{7}
}
func (m *MSG_C2S_UserReadyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_C2S_UserReadyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_C2S_UserReadyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_C2S_UserReadyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_C2S_UserReadyMessage.Merge(m, src)
}
func (m *MSG_C2S_UserReadyMessage) XXX_Size() int {
	return m.Size()
}
func (m *MSG_C2S_UserReadyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_C2S_UserReadyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_C2S_UserReadyMessage proto.InternalMessageInfo

func (m *MSG_C2S_UserReadyMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type MSG_S2C_UserReadyMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *MSG_S2C_UserReadyMessageResponse) Reset()         { *m = MSG_S2C_UserReadyMessageResponse{} }
func (m *MSG_S2C_UserReadyMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_UserReadyMessageResponse) ProtoMessage()    {}
func (*MSG_S2C_UserReadyMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{8}
}
func (m *MSG_S2C_UserReadyMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_UserReadyMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_UserReadyMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_UserReadyMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_UserReadyMessageResponse.Merge(m, src)
}
func (m *MSG_S2C_UserReadyMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_UserReadyMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_UserReadyMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_UserReadyMessageResponse proto.InternalMessageInfo

func (m *MSG_S2C_UserReadyMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_UserReadyMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MSG_S2C_UserReadyMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// 玩家离开.
type MSG_C2S_UserLeftMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId int32               `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoomId int32               `protobuf:"varint,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Type   int32               `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *MSG_C2S_UserLeftMessage) Reset()         { *m = MSG_C2S_UserLeftMessage{} }
func (m *MSG_C2S_UserLeftMessage) String() string { return proto.CompactTextString(m) }
func (*MSG_C2S_UserLeftMessage) ProtoMessage()    {}
func (*MSG_C2S_UserLeftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{9}
}
func (m *MSG_C2S_UserLeftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_C2S_UserLeftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_C2S_UserLeftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_C2S_UserLeftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_C2S_UserLeftMessage.Merge(m, src)
}
func (m *MSG_C2S_UserLeftMessage) XXX_Size() int {
	return m.Size()
}
func (m *MSG_C2S_UserLeftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_C2S_UserLeftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_C2S_UserLeftMessage proto.InternalMessageInfo

func (m *MSG_C2S_UserLeftMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_C2S_UserLeftMessage) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessage) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessage) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type MSG_C2S_UserLeftMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId   uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId   int32               `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoomId   int32               `protobuf:"varint,4,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Type     int32               `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	RetCode  int32               `protobuf:"varint,6,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,7,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *MSG_C2S_UserLeftMessageResponse) Reset()         { *m = MSG_C2S_UserLeftMessageResponse{} }
func (m *MSG_C2S_UserLeftMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MSG_C2S_UserLeftMessageResponse) ProtoMessage()    {}
func (*MSG_C2S_UserLeftMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{10}
}
func (m *MSG_C2S_UserLeftMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_C2S_UserLeftMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_C2S_UserLeftMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_C2S_UserLeftMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_C2S_UserLeftMessageResponse.Merge(m, src)
}
func (m *MSG_C2S_UserLeftMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MSG_C2S_UserLeftMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_C2S_UserLeftMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_C2S_UserLeftMessageResponse proto.InternalMessageInfo

func (m *MSG_C2S_UserLeftMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_C2S_UserLeftMessageResponse) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessageResponse) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessageResponse) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessageResponse) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MSG_C2S_UserLeftMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// 玩家换桌.
type MSG_C2S_ChangeTable struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId  uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId  int32               `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	TableId int32               `protobuf:"varint,4,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (m *MSG_C2S_ChangeTable) Reset()         { *m = MSG_C2S_ChangeTable{} }
func (m *MSG_C2S_ChangeTable) String() string { return proto.CompactTextString(m) }
func (*MSG_C2S_ChangeTable) ProtoMessage()    {}
func (*MSG_C2S_ChangeTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{11}
}
func (m *MSG_C2S_ChangeTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_C2S_ChangeTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_C2S_ChangeTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_C2S_ChangeTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_C2S_ChangeTable.Merge(m, src)
}
func (m *MSG_C2S_ChangeTable) XXX_Size() int {
	return m.Size()
}
func (m *MSG_C2S_ChangeTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_C2S_ChangeTable.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_C2S_ChangeTable proto.InternalMessageInfo

func (m *MSG_C2S_ChangeTable) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_C2S_ChangeTable) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_C2S_ChangeTable) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_C2S_ChangeTable) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type MSG_S2C_ChangeTable struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId  int32               `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RetCode int32               `protobuf:"varint,3,opt,name=retCode,proto3" json:"retCode,omitempty"`
	TableId int32               `protobuf:"varint,4,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (m *MSG_S2C_ChangeTable) Reset()         { *m = MSG_S2C_ChangeTable{} }
func (m *MSG_S2C_ChangeTable) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_ChangeTable) ProtoMessage()    {}
func (*MSG_S2C_ChangeTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{12}
}
func (m *MSG_S2C_ChangeTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_ChangeTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_ChangeTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_ChangeTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_ChangeTable.Merge(m, src)
}
func (m *MSG_S2C_ChangeTable) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_ChangeTable) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_ChangeTable.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_ChangeTable proto.InternalMessageInfo

func (m *MSG_S2C_ChangeTable) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_ChangeTable) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_S2C_ChangeTable) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MSG_S2C_ChangeTable) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

// 玩家换桌.
type MSG_C2S_ChangeTable0 struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId  uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId  int32               `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	TableId int32               `protobuf:"varint,4,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (m *MSG_C2S_ChangeTable0) Reset()         { *m = MSG_C2S_ChangeTable0{} }
func (m *MSG_C2S_ChangeTable0) String() string { return proto.CompactTextString(m) }
func (*MSG_C2S_ChangeTable0) ProtoMessage()    {}
func (*MSG_C2S_ChangeTable0) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{13}
}
func (m *MSG_C2S_ChangeTable0) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_C2S_ChangeTable0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_C2S_ChangeTable0.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_C2S_ChangeTable0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_C2S_ChangeTable0.Merge(m, src)
}
func (m *MSG_C2S_ChangeTable0) XXX_Size() int {
	return m.Size()
}
func (m *MSG_C2S_ChangeTable0) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_C2S_ChangeTable0.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_C2S_ChangeTable0 proto.InternalMessageInfo

func (m *MSG_C2S_ChangeTable0) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_C2S_ChangeTable0) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_C2S_ChangeTable0) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_C2S_ChangeTable0) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type MSG_S2C_ChangeTable0 struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId  int32               `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RetCode int32               `protobuf:"varint,3,opt,name=retCode,proto3" json:"retCode,omitempty"`
	TableId int32               `protobuf:"varint,4,opt,name=tableId,proto3" json:"tableId,omitempty"`
}

func (m *MSG_S2C_ChangeTable0) Reset()         { *m = MSG_S2C_ChangeTable0{} }
func (m *MSG_S2C_ChangeTable0) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_ChangeTable0) ProtoMessage()    {}
func (*MSG_S2C_ChangeTable0) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{14}
}
func (m *MSG_S2C_ChangeTable0) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_ChangeTable0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_ChangeTable0.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_ChangeTable0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_ChangeTable0.Merge(m, src)
}
func (m *MSG_S2C_ChangeTable0) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_ChangeTable0) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_ChangeTable0.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_ChangeTable0 proto.InternalMessageInfo

func (m *MSG_S2C_ChangeTable0) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_ChangeTable0) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MSG_S2C_ChangeTable0) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *MSG_S2C_ChangeTable0) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

// 进入房间成功后通知玩家积分.
type MSG_S2C_UserScoreInfo struct {
	Header    *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId    int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TableId   int32               `protobuf:"varint,3,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ChairId   int32               `protobuf:"varint,4,opt,name=chairId,proto3" json:"chairId,omitempty"`
	UserScore float64             `protobuf:"fixed64,5,opt,name=userScore,proto3" json:"userScore,omitempty"`
}

func (m *MSG_S2C_UserScoreInfo) Reset()         { *m = MSG_S2C_UserScoreInfo{} }
func (m *MSG_S2C_UserScoreInfo) String() string { return proto.CompactTextString(m) }
func (*MSG_S2C_UserScoreInfo) ProtoMessage()    {}
func (*MSG_S2C_UserScoreInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{15}
}
func (m *MSG_S2C_UserScoreInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSG_S2C_UserScoreInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSG_S2C_UserScoreInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MSG_S2C_UserScoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSG_S2C_UserScoreInfo.Merge(m, src)
}
func (m *MSG_S2C_UserScoreInfo) XXX_Size() int {
	return m.Size()
}
func (m *MSG_S2C_UserScoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MSG_S2C_UserScoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MSG_S2C_UserScoreInfo proto.InternalMessageInfo

func (m *MSG_S2C_UserScoreInfo) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MSG_S2C_UserScoreInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MSG_S2C_UserScoreInfo) GetTableId() int32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *MSG_S2C_UserScoreInfo) GetChairId() int32 {
	if m != nil {
		return m.ChairId
	}
	return 0
}

func (m *MSG_S2C_UserScoreInfo) GetUserScore() float64 {
	if m != nil {
		return m.UserScore
	}
	return 0
}

type GameServerUserRechargeOKMessage struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId  int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Id      int32               `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	OrderId string              `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	RealPay float64             `protobuf:"fixed64,5,opt,name=realPay,proto3" json:"realPay,omitempty"`
	Status  int32               `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GameServerUserRechargeOKMessage) Reset()         { *m = GameServerUserRechargeOKMessage{} }
func (m *GameServerUserRechargeOKMessage) String() string { return proto.CompactTextString(m) }
func (*GameServerUserRechargeOKMessage) ProtoMessage()    {}
func (*GameServerUserRechargeOKMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{16}
}
func (m *GameServerUserRechargeOKMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServerUserRechargeOKMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServerUserRechargeOKMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServerUserRechargeOKMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServerUserRechargeOKMessage.Merge(m, src)
}
func (m *GameServerUserRechargeOKMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameServerUserRechargeOKMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServerUserRechargeOKMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameServerUserRechargeOKMessage proto.InternalMessageInfo

func (m *GameServerUserRechargeOKMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GameServerUserRechargeOKMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GameServerUserRechargeOKMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameServerUserRechargeOKMessage) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *GameServerUserRechargeOKMessage) GetRealPay() float64 {
	if m != nil {
		return m.RealPay
	}
	return 0
}

func (m *GameServerUserRechargeOKMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GameServerUserRechargeOKMessageResponse struct {
	Header       *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode      int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg     string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	AddScore     float64             `protobuf:"fixed64,4,opt,name=addScore,proto3" json:"addScore,omitempty"`
	Score        float64             `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`
	Vip          int32               `protobuf:"varint,6,opt,name=vip,proto3" json:"vip,omitempty"`
	ChargeAmount int32               `protobuf:"varint,7,opt,name=chargeAmount,proto3" json:"chargeAmount,omitempty"`
}

func (m *GameServerUserRechargeOKMessageResponse) Reset() {
	*m = GameServerUserRechargeOKMessageResponse{}
}
func (m *GameServerUserRechargeOKMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GameServerUserRechargeOKMessageResponse) ProtoMessage()    {}
func (*GameServerUserRechargeOKMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{17}
}
func (m *GameServerUserRechargeOKMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServerUserRechargeOKMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServerUserRechargeOKMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServerUserRechargeOKMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServerUserRechargeOKMessageResponse.Merge(m, src)
}
func (m *GameServerUserRechargeOKMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameServerUserRechargeOKMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServerUserRechargeOKMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameServerUserRechargeOKMessageResponse proto.InternalMessageInfo

func (m *GameServerUserRechargeOKMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GameServerUserRechargeOKMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GameServerUserRechargeOKMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GameServerUserRechargeOKMessageResponse) GetAddScore() float64 {
	if m != nil {
		return m.AddScore
	}
	return 0
}

func (m *GameServerUserRechargeOKMessageResponse) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameServerUserRechargeOKMessageResponse) GetVip() int32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *GameServerUserRechargeOKMessageResponse) GetChargeAmount() int32 {
	if m != nil {
		return m.ChargeAmount
	}
	return 0
}

type GameServerUserExchangeFailMessage struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId  int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Id      int32               `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	OrderId string              `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	RealPay float64             `protobuf:"fixed64,5,opt,name=realPay,proto3" json:"realPay,omitempty"`
	Status  int32               `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GameServerUserExchangeFailMessage) Reset()         { *m = GameServerUserExchangeFailMessage{} }
func (m *GameServerUserExchangeFailMessage) String() string { return proto.CompactTextString(m) }
func (*GameServerUserExchangeFailMessage) ProtoMessage()    {}
func (*GameServerUserExchangeFailMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{18}
}
func (m *GameServerUserExchangeFailMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServerUserExchangeFailMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServerUserExchangeFailMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServerUserExchangeFailMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServerUserExchangeFailMessage.Merge(m, src)
}
func (m *GameServerUserExchangeFailMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameServerUserExchangeFailMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServerUserExchangeFailMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameServerUserExchangeFailMessage proto.InternalMessageInfo

func (m *GameServerUserExchangeFailMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GameServerUserExchangeFailMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GameServerUserExchangeFailMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameServerUserExchangeFailMessage) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *GameServerUserExchangeFailMessage) GetRealPay() float64 {
	if m != nil {
		return m.RealPay
	}
	return 0
}

func (m *GameServerUserExchangeFailMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GameServerUserExchangeFailMessageResponse struct {
	Header         *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode        int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg       string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	AddScore       float64             `protobuf:"fixed64,4,opt,name=addScore,proto3" json:"addScore,omitempty"`
	Score          float64             `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`
	ExchangeAmount int32               `protobuf:"varint,6,opt,name=exchangeAmount,proto3" json:"exchangeAmount,omitempty"`
}

func (m *GameServerUserExchangeFailMessageResponse) Reset() {
	*m = GameServerUserExchangeFailMessageResponse{}
}
func (m *GameServerUserExchangeFailMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GameServerUserExchangeFailMessageResponse) ProtoMessage()    {}
func (*GameServerUserExchangeFailMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3129d1ccb776781, []int{19}
}
func (m *GameServerUserExchangeFailMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameServerUserExchangeFailMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameServerUserExchangeFailMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameServerUserExchangeFailMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameServerUserExchangeFailMessageResponse.Merge(m, src)
}
func (m *GameServerUserExchangeFailMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GameServerUserExchangeFailMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GameServerUserExchangeFailMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GameServerUserExchangeFailMessageResponse proto.InternalMessageInfo

func (m *GameServerUserExchangeFailMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GameServerUserExchangeFailMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GameServerUserExchangeFailMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GameServerUserExchangeFailMessageResponse) GetAddScore() float64 {
	if m != nil {
		return m.AddScore
	}
	return 0
}

func (m *GameServerUserExchangeFailMessageResponse) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameServerUserExchangeFailMessageResponse) GetExchangeAmount() int32 {
	if m != nil {
		return m.ExchangeAmount
	}
	return 0
}

func init() {
	proto.RegisterEnum("GameServer.SUBID", SUBID_name, SUBID_value)
	proto.RegisterEnum("GameServer.USER_STATUS", USER_STATUS_name, USER_STATUS_value)
	proto.RegisterEnum("GameServer.GameEndTag", GameEndTag_name, GameEndTag_value)
	proto.RegisterType((*MSG_CSC_Passageway)(nil), "GameServer.MSG_CSC_Passageway")
	proto.RegisterType((*MSG_S2C_SystemMessage)(nil), "GameServer.MSG_S2C_SystemMessage")
	proto.RegisterType((*MSG_C2S_UserEnterMessage)(nil), "GameServer.MSG_C2S_UserEnterMessage")
	proto.RegisterType((*MSG_S2C_UserEnterMessageResponse)(nil), "GameServer.MSG_S2C_UserEnterMessageResponse")
	proto.RegisterType((*MSG_S2C_UserBaseInfo)(nil), "GameServer.MSG_S2C_UserBaseInfo")
	proto.RegisterType((*MSG_S2C_GameUserStatus)(nil), "GameServer.MSG_S2C_GameUserStatus")
	proto.RegisterType((*MSG_S2C_PlayInOtherRoom)(nil), "GameServer.MSG_S2C_PlayInOtherRoom")
	proto.RegisterType((*MSG_C2S_UserReadyMessage)(nil), "GameServer.MSG_C2S_UserReadyMessage")
	proto.RegisterType((*MSG_S2C_UserReadyMessageResponse)(nil), "GameServer.MSG_S2C_UserReadyMessageResponse")
	proto.RegisterType((*MSG_C2S_UserLeftMessage)(nil), "GameServer.MSG_C2S_UserLeftMessage")
	proto.RegisterType((*MSG_C2S_UserLeftMessageResponse)(nil), "GameServer.MSG_C2S_UserLeftMessageResponse")
	proto.RegisterType((*MSG_C2S_ChangeTable)(nil), "GameServer.MSG_C2S_ChangeTable")
	proto.RegisterType((*MSG_S2C_ChangeTable)(nil), "GameServer.MSG_S2C_ChangeTable")
	proto.RegisterType((*MSG_C2S_ChangeTable0)(nil), "GameServer.MSG_C2S_ChangeTable0")
	proto.RegisterType((*MSG_S2C_ChangeTable0)(nil), "GameServer.MSG_S2C_ChangeTable0")
	proto.RegisterType((*MSG_S2C_UserScoreInfo)(nil), "GameServer.MSG_S2C_UserScoreInfo")
	proto.RegisterType((*GameServerUserRechargeOKMessage)(nil), "GameServer.GameServerUserRechargeOKMessage")
	proto.RegisterType((*GameServerUserRechargeOKMessageResponse)(nil), "GameServer.GameServerUserRechargeOKMessageResponse")
	proto.RegisterType((*GameServerUserExchangeFailMessage)(nil), "GameServer.GameServerUserExchangeFailMessage")
	proto.RegisterType((*GameServerUserExchangeFailMessageResponse)(nil), "GameServer.GameServerUserExchangeFailMessageResponse")
}

func init() { proto.RegisterFile("GameServer.Message.proto", fileDescriptor_f3129d1ccb776781) }

var fileDescriptor_f3129d1ccb776781 = []byte{
	// 1238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0xf6, 0x5a, 0x1f, 0xb6, 0xc6, 0x8e, 0xbd, 0x59, 0x3b, 0x79, 0x19, 0xc3, 0x51, 0xfc, 0xf2,
	0x90, 0xba, 0x29, 0x60, 0x14, 0xe9, 0x2f, 0x90, 0x65, 0x4a, 0x26, 0x22, 0x59, 0x2e, 0x97, 0x42,
	0xeb, 0x43, 0x41, 0x6c, 0xc4, 0xb5, 0x2c, 0xc4, 0x24, 0x0d, 0x92, 0x4a, 0xa2, 0x1e, 0x7a, 0xeb,
	0xad, 0x5f, 0x7f, 0xa1, 0xbd, 0xb7, 0xb7, 0xfe, 0x81, 0xa2, 0x87, 0x1e, 0x73, 0xec, 0x31, 0x48,
	0x2e, 0x3d, 0xf5, 0xd4, 0x1f, 0x50, 0xec, 0x92, 0x2b, 0x92, 0x4a, 0x8c, 0xc0, 0xce, 0x47, 0xdb,
	0x1b, 0x9f, 0x99, 0xdd, 0xe1, 0x33, 0xcf, 0xec, 0x0c, 0x17, 0x04, 0xad, 0xcd, 0x3c, 0x4e, 0x79,
	0xf8, 0x90, 0x87, 0x3b, 0x5d, 0x1e, 0x45, 0x6c, 0xc8, 0x77, 0xce, 0xc2, 0x20, 0x0e, 0x08, 0x64,
	0x9e, 0x8d, 0xab, 0xe2, 0x79, 0xa7, 0x19, 0x78, 0x5e, 0xe0, 0x27, 0x6e, 0xfd, 0x33, 0x20, 0x5d,
	0xda, 0x76, 0x9a, 0xb4, 0xe9, 0x1c, 0x32, 0xb9, 0xef, 0x11, 0x9b, 0x90, 0x0f, 0xa0, 0x7a, 0xc2,
	0x99, 0xcb, 0x43, 0x0d, 0x6d, 0xa1, 0xed, 0xa5, 0xbb, 0x6b, 0x3b, 0xf9, 0x9d, 0xfb, 0xd2, 0x65,
	0xa5, 0x4b, 0xc8, 0x06, 0x2c, 0x9e, 0xb1, 0x28, 0xda, 0x63, 0x31, 0xd3, 0xe6, 0xb7, 0xd0, 0xf6,
	0xb2, 0x35, 0xc5, 0xfa, 0x17, 0x70, 0x4d, 0x84, 0xa7, 0x77, 0x9b, 0x0e, 0x9d, 0x44, 0x31, 0xf7,
	0x52, 0x72, 0x17, 0x7b, 0x83, 0x06, 0x0b, 0x5e, 0x34, 0xb4, 0x27, 0x67, 0x5c, 0xbe, 0xa0, 0x62,
	0x29, 0x48, 0xea, 0x00, 0x5e, 0x34, 0x6c, 0x06, 0x7e, 0xcc, 0xfd, 0x58, 0x2b, 0x6d, 0xa1, 0xed,
	0x9a, 0x95, 0xb3, 0xe8, 0xdf, 0x23, 0xd0, 0x64, 0x7e, 0x77, 0xa9, 0xd3, 0x8f, 0x78, 0x68, 0xf8,
	0x31, 0x0f, 0x2f, 0xc5, 0xe1, 0x3a, 0x54, 0x87, 0xcc, 0xe3, 0xa6, 0x9b, 0x52, 0x48, 0x91, 0xb0,
	0x87, 0x41, 0xe0, 0x99, 0xae, 0x7c, 0x7b, 0xc5, 0x4a, 0x11, 0xd9, 0x86, 0x55, 0x77, 0xe2, 0x33,
	0x6f, 0x34, 0x10, 0xba, 0x3e, 0x0a, 0x42, 0x57, 0x2b, 0x4b, 0x71, 0x66, 0xcd, 0xfa, 0x97, 0x08,
	0xb6, 0x94, 0x48, 0xb3, 0x1c, 0x2d, 0x1e, 0x9d, 0x05, 0x7e, 0x74, 0x71, 0xbd, 0x42, 0x1e, 0x37,
	0x03, 0x77, 0xaa, 0x57, 0x0a, 0x45, 0xad, 0x78, 0x18, 0x06, 0x61, 0x37, 0x1a, 0xa6, 0x6a, 0x4d,
	0xb1, 0xfe, 0xf3, 0x3c, 0xac, 0xe7, 0x79, 0xec, 0xb2, 0x88, 0x9b, 0xfe, 0x71, 0x70, 0x61, 0x9d,
	0xc6, 0x11, 0x0f, 0x33, 0x9d, 0x12, 0x24, 0x38, 0xb1, 0xc1, 0x20, 0x18, 0x4f, 0xcb, 0xa4, 0xa0,
	0xe0, 0xe4, 0x8f, 0x06, 0x0f, 0x0e, 0x98, 0xc7, 0xa5, 0x44, 0x35, 0x6b, 0x8a, 0xc9, 0x26, 0xd4,
	0x44, 0x5c, 0xd3, 0x77, 0xf9, 0x63, 0xad, 0x22, 0x03, 0x66, 0x06, 0x11, 0x33, 0x66, 0xf7, 0x4f,
	0x45, 0x51, 0xaa, 0x49, 0x9e, 0x29, 0x14, 0x9e, 0xc1, 0x09, 0x1b, 0x09, 0x1a, 0x0b, 0x89, 0x27,
	0x85, 0xe2, 0xc4, 0x08, 0x46, 0x34, 0x66, 0xf1, 0x38, 0xd2, 0x16, 0xa5, 0x33, 0x67, 0x11, 0x6c,
	0x4e, 0x83, 0x01, 0x8b, 0x47, 0x81, 0xaf, 0xd5, 0x12, 0x36, 0x0a, 0x93, 0x75, 0xa8, 0x44, 0x83,
	0x20, 0xe4, 0x1a, 0x6c, 0xa1, 0xed, 0x92, 0x95, 0x00, 0xfd, 0x47, 0x04, 0xd7, 0x95, 0x6e, 0x42,
	0x98, 0x7e, 0x16, 0xec, 0x35, 0x94, 0xbb, 0x92, 0x57, 0x4e, 0x65, 0x59, 0x3a, 0x37, 0xcb, 0x72,
	0x31, 0xcb, 0x0d, 0x58, 0x1c, 0x47, 0x69, 0x8e, 0x89, 0x6c, 0x53, 0xac, 0x3f, 0x84, 0xff, 0x29,
	0xba, 0x87, 0xa7, 0x6c, 0x62, 0xfa, 0xbd, 0xf8, 0x84, 0x87, 0x56, 0x10, 0x78, 0x6f, 0xb5, 0x23,
	0xf4, 0x76, 0xb1, 0x15, 0x2d, 0xce, 0xdc, 0xc9, 0x65, 0x5a, 0xf1, 0x85, 0x86, 0xc9, 0x47, 0x7a,
	0x97, 0x0d, 0xf3, 0x03, 0x4a, 0x94, 0x54, 0x19, 0x75, 0xf8, 0x71, 0x7c, 0xd9, 0xd9, 0xf2, 0xd2,
	0xca, 0x67, 0x0a, 0x97, 0xce, 0x51, 0xb8, 0x5c, 0x98, 0x39, 0x04, 0xca, 0xb1, 0x18, 0x92, 0x49,
	0xc5, 0xe5, 0xb3, 0xfe, 0x14, 0xc1, 0xad, 0x73, 0x48, 0x5e, 0x4e, 0xab, 0xb7, 0x48, 0x36, 0x5f,
	0x87, 0xea, 0xf9, 0x75, 0x58, 0x98, 0xa9, 0xc3, 0x57, 0x08, 0xd6, 0x54, 0x8a, 0xcd, 0x13, 0xe6,
	0x0f, 0xb9, 0x2d, 0x1a, 0xe4, 0xed, 0xa6, 0x95, 0xeb, 0xca, 0x72, 0xa1, 0x2b, 0xf5, 0x6f, 0x52,
	0x3a, 0xe2, 0x78, 0xbe, 0x0e, 0x9d, 0x97, 0x36, 0x57, 0x4e, 0xa1, 0x52, 0x51, 0xa1, 0xf3, 0x09,
	0x7d, 0x8d, 0x92, 0xc1, 0x3e, 0xa3, 0xcf, 0x87, 0xff, 0x94, 0x40, 0xdf, 0xa2, 0xec, 0x43, 0xf3,
	0x5a, 0x7c, 0xde, 0x98, 0x42, 0x3f, 0xa1, 0xec, 0x9e, 0x22, 0xc7, 0xb7, 0x18, 0xec, 0x6f, 0xf4,
	0xdb, 0x77, 0xe1, 0x09, 0xbe, 0x09, 0xb5, 0xb1, 0x62, 0x22, 0x7b, 0x04, 0x59, 0x99, 0x41, 0xff,
	0x05, 0xc1, 0xad, 0xec, 0x62, 0x97, 0x0c, 0xc1, 0xc1, 0x09, 0x0b, 0x87, 0xbc, 0x77, 0xef, 0x0d,
	0x8c, 0xa0, 0x8c, 0xfa, 0x0a, 0xcc, 0x8f, 0x14, 0xeb, 0xf9, 0x91, 0x24, 0x1c, 0x84, 0x2e, 0x57,
	0x84, 0x6b, 0x96, 0x82, 0x89, 0xee, 0xec, 0xf4, 0x90, 0x4d, 0x52, 0xba, 0x0a, 0x8a, 0xd8, 0x51,
	0xf2, 0x29, 0x4a, 0x9a, 0x3a, 0x45, 0xfa, 0x5f, 0x08, 0xde, 0x7b, 0x45, 0x12, 0xef, 0x70, 0x9c,
	0x0b, 0x1f, 0x73, 0xdd, 0x44, 0xf0, 0xb2, 0xcc, 0x60, 0x8a, 0xb3, 0x2f, 0x7f, 0x92, 0x5a, 0x02,
	0x08, 0x86, 0xd2, 0xc3, 0xd1, 0x59, 0x9a, 0x95, 0x78, 0x24, 0x3a, 0x2c, 0x27, 0x19, 0x34, 0x3c,
	0x79, 0xd5, 0x49, 0x2e, 0x1f, 0x05, 0x9b, 0xfe, 0x2b, 0x82, 0xff, 0x17, 0xd3, 0x36, 0x1e, 0x0f,
	0x64, 0x1b, 0xb4, 0xd8, 0xe8, 0xf4, 0x3f, 0x53, 0xbd, 0x3f, 0x10, 0xbc, 0xff, 0xca, 0x34, 0xfe,
	0xdd, 0xf5, 0xbb, 0x0d, 0x2b, 0x3c, 0xe5, 0x9c, 0xd6, 0x2b, 0x49, 0x71, 0xc6, 0x7a, 0xe7, 0xcf,
	0x32, 0x54, 0x68, 0x7f, 0xd7, 0xdc, 0x23, 0xab, 0xb0, 0x24, 0x1f, 0x9c, 0x5d, 0xa3, 0x6d, 0x1e,
	0xe0, 0x39, 0xb2, 0x01, 0xd7, 0x69, 0x7f, 0x57, 0x8e, 0x56, 0xe3, 0xc0, 0x36, 0x2c, 0xc7, 0xea,
	0xf5, 0xba, 0x8e, 0x65, 0x7c, 0x8c, 0x4b, 0xca, 0x27, 0x86, 0x4a, 0xc1, 0x47, 0x71, 0x99, 0xdc,
	0x84, 0x1b, 0xca, 0xd7, 0xa7, 0x86, 0x95, 0x2e, 0x38, 0xe8, 0xd9, 0x66, 0xeb, 0x08, 0x57, 0x5e,
	0x70, 0xd3, 0x66, 0xcf, 0x32, 0x94, 0xbb, 0x4a, 0xea, 0xb0, 0x51, 0x74, 0xdb, 0x0d, 0xbb, 0x4f,
	0x95, 0x7f, 0x21, 0xcf, 0x4a, 0xfa, 0x2d, 0xa3, 0xb1, 0x77, 0x24, 0x59, 0x2d, 0xe6, 0x59, 0x15,
	0x7c, 0x14, 0xdf, 0x24, 0x37, 0xe0, 0x5a, 0x61, 0x5f, 0xc7, 0x68, 0xd9, 0x72, 0x5b, 0x4d, 0xb9,
	0xa6, 0xdb, 0x52, 0x17, 0xc5, 0x40, 0x36, 0x41, 0x53, 0xbb, 0x9a, 0xfb, 0x8d, 0x83, 0xb6, 0xe1,
	0xd8, 0x8d, 0xdd, 0x8e, 0x21, 0x37, 0x2e, 0x2b, 0xaf, 0x1c, 0xf6, 0x45, 0x2f, 0xc5, 0x57, 0xc8,
	0x16, 0x6c, 0xce, 0x30, 0x6d, 0xee, 0x37, 0xac, 0xb6, 0xe1, 0xf4, 0xee, 0xc9, 0xfd, 0x2b, 0x6a,
	0x45, 0x8e, 0x6f, 0x7e, 0x05, 0xc5, 0xab, 0x44, 0x87, 0x7a, 0x21, 0x86, 0xf1, 0x69, 0xfa, 0xa2,
	0x56, 0xc3, 0xec, 0xc8, 0x28, 0x58, 0xad, 0xc9, 0xf4, 0x9e, 0x59, 0x43, 0xf1, 0x55, 0x72, 0x1b,
	0xf4, 0x97, 0xe6, 0x41, 0x4d, 0x5b, 0x18, 0x4c, 0x4b, 0xc6, 0x22, 0x6a, 0xdd, 0x0b, 0x19, 0xe5,
	0xd7, 0x51, 0xbc, 0x96, 0x2f, 0xe2, 0x61, 0xa7, 0x71, 0xe4, 0x98, 0x07, 0x4e, 0xcf, 0xde, 0x37,
	0x2c, 0x71, 0x0c, 0xf0, 0xba, 0x52, 0xb4, 0xdd, 0x72, 0xe8, 0x11, 0xb5, 0x8d, 0xae, 0xd3, 0x35,
	0x28, 0x6d, 0xb4, 0x0d, 0x7c, 0xed, 0xce, 0xe7, 0xb0, 0x94, 0xab, 0x2b, 0x59, 0x82, 0x85, 0xa8,
	0xcd, 0xe3, 0xde, 0x38, 0xc6, 0x73, 0xa4, 0x06, 0x95, 0xa8, 0x15, 0x72, 0x8e, 0x11, 0x59, 0x84,
	0x72, 0x44, 0x47, 0x31, 0x9e, 0x27, 0x00, 0xd5, 0x48, 0x5e, 0x83, 0x71, 0x89, 0x2c, 0xc3, 0x62,
	0x24, 0x2e, 0xf6, 0x23, 0x7f, 0x88, 0xcb, 0x12, 0xf5, 0x8e, 0x8f, 0x3b, 0x23, 0x9f, 0xe3, 0x8a,
	0x8c, 0xd4, 0x09, 0x82, 0x07, 0x3d, 0x1f, 0x57, 0xc9, 0x3a, 0xe0, 0x34, 0x6c, 0x23, 0x56, 0x1b,
	0x16, 0xee, 0xd8, 0x20, 0x7f, 0x19, 0x18, 0xbe, 0x6b, 0xb3, 0x21, 0x59, 0x01, 0x68, 0xcb, 0x83,
	0x69, 0x75, 0x1b, 0x1d, 0x3c, 0x47, 0x30, 0x2c, 0x0b, 0xdc, 0x4f, 0x4f, 0x00, 0x46, 0xa2, 0x25,
	0x84, 0x65, 0xcf, 0xa4, 0x5d, 0x93, 0x52, 0x3c, 0x4f, 0xd6, 0x60, 0x55, 0x18, 0x5a, 0x9d, 0xde,
	0x27, 0x4e, 0xbb, 0x6f, 0x19, 0x8d, 0x3e, 0x2e, 0xed, 0x6a, 0xbf, 0x3d, 0xab, 0xa3, 0x27, 0xcf,
	0xea, 0xe8, 0xe9, 0xb3, 0x3a, 0xfa, 0xee, 0x79, 0x7d, 0xee, 0xc9, 0xf3, 0xfa, 0xdc, 0xef, 0xcf,
	0xeb, 0x73, 0xf7, 0xab, 0xf2, 0x47, 0xc4, 0x47, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xbf,
	0x31, 0x12, 0xc3, 0x10, 0x00, 0x00,
}

func (m *MSG_CSC_Passageway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_CSC_Passageway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n1, err1 := m.Header.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.PassData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.PassData)))
		i += copy(dAtA[i:], m.PassData)
	}
	return i, nil
}

func (m *MSG_S2C_SystemMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_SystemMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n2, err2 := m.Header.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.MsgType))
	}
	if len(m.MsgContent) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.MsgContent)))
		i += copy(dAtA[i:], m.MsgContent)
	}
	return i, nil
}

func (m *MSG_C2S_UserEnterMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_C2S_UserEnterMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n3, err3 := m.Header.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RoomId))
	}
	if len(m.DynamicPassword) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.DynamicPassword)))
		i += copy(dAtA[i:], m.DynamicPassword)
	}
	return i, nil
}

func (m *MSG_S2C_UserEnterMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_UserEnterMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n4, err4 := m.Header.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *MSG_S2C_UserBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_UserBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n5, err5 := m.Header.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.HeadIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.HeadIndex))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	if m.ChairId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.ChairId))
	}
	if m.UserStatus != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserStatus))
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if m.Score != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *MSG_S2C_GameUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_GameUserStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n6, err6 := m.Header.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	if m.ChairId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.ChairId))
	}
	if m.UsStatus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UsStatus))
	}
	return i, nil
}

func (m *MSG_S2C_PlayInOtherRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_PlayInOtherRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n7, err7 := m.Header.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *MSG_C2S_UserReadyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_C2S_UserReadyMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n8, err8 := m.Header.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}

func (m *MSG_S2C_UserReadyMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_UserReadyMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n9, err9 := m.Header.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *MSG_C2S_UserLeftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_C2S_UserLeftMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n10, err10 := m.Header.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RoomId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *MSG_C2S_UserLeftMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_C2S_UserLeftMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n11, err11 := m.Header.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RoomId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Type))
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *MSG_C2S_ChangeTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_C2S_ChangeTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n12, err12 := m.Header.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	return i, nil
}

func (m *MSG_S2C_ChangeTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_ChangeTable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n13, err13 := m.Header.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	return i, nil
}

func (m *MSG_C2S_ChangeTable0) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_C2S_ChangeTable0) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n14, err14 := m.Header.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	return i, nil
}

func (m *MSG_S2C_ChangeTable0) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_ChangeTable0) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n15, err15 := m.Header.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	return i, nil
}

func (m *MSG_S2C_UserScoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSG_S2C_UserScoreInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n16, err16 := m.Header.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.TableId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.TableId))
	}
	if m.ChairId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.ChairId))
	}
	if m.UserScore != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UserScore))))
		i += 8
	}
	return i, nil
}

func (m *GameServerUserRechargeOKMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServerUserRechargeOKMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n17, err17 := m.Header.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Id))
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.RealPay != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RealPay))))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *GameServerUserRechargeOKMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServerUserRechargeOKMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n18, err18 := m.Header.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.AddScore != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AddScore))))
		i += 8
	}
	if m.Score != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.Vip != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Vip))
	}
	if m.ChargeAmount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.ChargeAmount))
	}
	return i, nil
}

func (m *GameServerUserExchangeFailMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServerUserExchangeFailMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n19, err19 := m.Header.MarshalTo(dAtA[i:])
		if err19 != nil {
			return 0, err19
		}
		i += n19
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Id))
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.RealPay != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RealPay))))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *GameServerUserExchangeFailMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServerUserExchangeFailMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.Header.Size()))
		n20, err20 := m.Header.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.AddScore != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AddScore))))
		i += 8
	}
	if m.Score != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.ExchangeAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameServer_Message(dAtA, i, uint64(m.ExchangeAmount))
	}
	return i, nil
}

func encodeVarintGameServer_Message(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MSG_CSC_Passageway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	l = len(m.PassData)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_S2C_SystemMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovGameServer_Message(uint64(m.MsgType))
	}
	l = len(m.MsgContent)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_C2S_UserEnterMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.RoomId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RoomId))
	}
	l = len(m.DynamicPassword)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_S2C_UserEnterMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_S2C_UserBaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.HeadIndex != 0 {
		n += 1 + sovGameServer_Message(uint64(m.HeadIndex))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	if m.ChairId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.ChairId))
	}
	if m.UserStatus != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserStatus))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Score))
	}
	return n
}

func (m *MSG_S2C_GameUserStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	if m.ChairId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.ChairId))
	}
	if m.UsStatus != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UsStatus))
	}
	return n
}

func (m *MSG_S2C_PlayInOtherRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.RoomId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RoomId))
	}
	return n
}

func (m *MSG_C2S_UserReadyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_S2C_UserReadyMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_C2S_UserLeftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.RoomId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RoomId))
	}
	if m.Type != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Type))
	}
	return n
}

func (m *MSG_C2S_UserLeftMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.RoomId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RoomId))
	}
	if m.Type != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Type))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	return n
}

func (m *MSG_C2S_ChangeTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	return n
}

func (m *MSG_S2C_ChangeTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	return n
}

func (m *MSG_C2S_ChangeTable0) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	return n
}

func (m *MSG_S2C_ChangeTable0) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.GameId))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	return n
}

func (m *MSG_S2C_UserScoreInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.TableId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.TableId))
	}
	if m.ChairId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.ChairId))
	}
	if m.UserScore != 0 {
		n += 9
	}
	return n
}

func (m *GameServerUserRechargeOKMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Id))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.RealPay != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Status))
	}
	return n
}

func (m *GameServerUserRechargeOKMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.AddScore != 0 {
		n += 9
	}
	if m.Score != 0 {
		n += 9
	}
	if m.Vip != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Vip))
	}
	if m.ChargeAmount != 0 {
		n += 1 + sovGameServer_Message(uint64(m.ChargeAmount))
	}
	return n
}

func (m *GameServerUserExchangeFailMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGameServer_Message(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Id))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.RealPay != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovGameServer_Message(uint64(m.Status))
	}
	return n
}

func (m *GameServerUserExchangeFailMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovGameServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovGameServer_Message(uint64(l))
	}
	if m.AddScore != 0 {
		n += 9
	}
	if m.Score != 0 {
		n += 9
	}
	if m.ExchangeAmount != 0 {
		n += 1 + sovGameServer_Message(uint64(m.ExchangeAmount))
	}
	return n
}

func sovGameServer_Message(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameServer_Message(x uint64) (n int) {
	return sovGameServer_Message(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MSG_CSC_Passageway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_CSC_Passageway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_CSC_Passageway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassData = append(m.PassData[:0], dAtA[iNdEx:postIndex]...)
			if m.PassData == nil {
				m.PassData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_SystemMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_SystemMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_SystemMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_C2S_UserEnterMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_C2S_UserEnterMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_C2S_UserEnterMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicPassword", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicPassword = append(m.DynamicPassword[:0], dAtA[iNdEx:postIndex]...)
			if m.DynamicPassword == nil {
				m.DynamicPassword = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_UserEnterMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_UserEnterMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_UserEnterMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_UserBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_UserBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_UserBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadIndex", wireType)
			}
			m.HeadIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChairId", wireType)
			}
			m.ChairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChairId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatus", wireType)
			}
			m.UserStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_GameUserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_GameUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_GameUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChairId", wireType)
			}
			m.ChairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChairId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsStatus", wireType)
			}
			m.UsStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_PlayInOtherRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_PlayInOtherRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_PlayInOtherRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_C2S_UserReadyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_C2S_UserReadyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_C2S_UserReadyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_UserReadyMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_UserReadyMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_UserReadyMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_C2S_UserLeftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_C2S_UserLeftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_C2S_UserLeftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_C2S_UserLeftMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_C2S_UserLeftMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_C2S_UserLeftMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_C2S_ChangeTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_C2S_ChangeTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_C2S_ChangeTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_ChangeTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_ChangeTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_ChangeTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_C2S_ChangeTable0) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_C2S_ChangeTable0: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_C2S_ChangeTable0: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_ChangeTable0) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_ChangeTable0: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_ChangeTable0: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSG_S2C_UserScoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSG_S2C_UserScoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSG_S2C_UserScoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChairId", wireType)
			}
			m.ChairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChairId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UserScore = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameServerUserRechargeOKMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServerUserRechargeOKMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServerUserRechargeOKMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPay", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RealPay = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameServerUserRechargeOKMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServerUserRechargeOKMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServerUserRechargeOKMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AddScore = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeAmount", wireType)
			}
			m.ChargeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargeAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameServerUserExchangeFailMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServerUserExchangeFailMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServerUserExchangeFailMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPay", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RealPay = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameServerUserExchangeFailMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServerUserExchangeFailMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServerUserExchangeFailMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AddScore = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeAmount", wireType)
			}
			m.ExchangeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameServer_Message(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameServer_Message
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameServer_Message
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGameServer_Message
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGameServer_Message
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameServer_Message
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameServer_Message(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGameServer_Message
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameServer_Message = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameServer_Message   = fmt.Errorf("proto: integer overflow")
)
