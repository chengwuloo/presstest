// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: HallServer.Message.proto

package HallServer

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	"server/pb/Game_Common"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoginMessageResponse_LoginRetCode int32

const (
	LoginMessageResponse_LOGIN_OK                 LoginMessageResponse_LoginRetCode = 0
	LoginMessageResponse_LOGIN_ACCOUNTS_NOT_EXIST LoginMessageResponse_LoginRetCode = 1
	LoginMessageResponse_LOGIN_SEAL_ACCOUNTS      LoginMessageResponse_LoginRetCode = 2
	LoginMessageResponse_LOGIN_NETBREAK           LoginMessageResponse_LoginRetCode = 3
	LoginMessageResponse_REGISTER_UNKNOWN         LoginMessageResponse_LoginRetCode = 20
)

var LoginMessageResponse_LoginRetCode_name = map[int32]string{
	0:  "LOGIN_OK",
	1:  "LOGIN_ACCOUNTS_NOT_EXIST",
	2:  "LOGIN_SEAL_ACCOUNTS",
	3:  "LOGIN_NETBREAK",
	20: "REGISTER_UNKNOWN",
}

var LoginMessageResponse_LoginRetCode_value = map[string]int32{
	"LOGIN_OK":                 0,
	"LOGIN_ACCOUNTS_NOT_EXIST": 1,
	"LOGIN_SEAL_ACCOUNTS":      2,
	"LOGIN_NETBREAK":           3,
	"REGISTER_UNKNOWN":         20,
}

func (x LoginMessageResponse_LoginRetCode) String() string {
	return proto.EnumName(LoginMessageResponse_LoginRetCode_name, int32(x))
}

func (LoginMessageResponse_LoginRetCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{1, 0}
}

type LoginMessage struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Session string              `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *LoginMessage) Reset()         { *m = LoginMessage{} }
func (m *LoginMessage) String() string { return proto.CompactTextString(m) }
func (*LoginMessage) ProtoMessage()    {}
func (*LoginMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{0}
}
func (m *LoginMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginMessage.Merge(m, src)
}
func (m *LoginMessage) XXX_Size() int {
	return m.Size()
}
func (m *LoginMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LoginMessage proto.InternalMessageInfo

func (m *LoginMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LoginMessage) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

type LoginMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   int64               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Account  string              `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	AgentId  uint32              `protobuf:"varint,6,opt,name=agentId,proto3" json:"agentId,omitempty"`
	NickName string              `protobuf:"bytes,7,opt,name=nickName,proto3" json:"nickName,omitempty"`
	HeadId   uint32              `protobuf:"varint,8,opt,name=headId,proto3" json:"headId,omitempty"`
	Score    int64               `protobuf:"varint,9,opt,name=score,proto3" json:"score,omitempty"`
	GamePass []byte              `protobuf:"bytes,10,opt,name=gamePass,proto3" json:"gamePass,omitempty"`
}

func (m *LoginMessageResponse) Reset()         { *m = LoginMessageResponse{} }
func (m *LoginMessageResponse) String() string { return proto.CompactTextString(m) }
func (*LoginMessageResponse) ProtoMessage()    {}
func (*LoginMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{1}
}
func (m *LoginMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginMessageResponse.Merge(m, src)
}
func (m *LoginMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginMessageResponse proto.InternalMessageInfo

func (m *LoginMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LoginMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *LoginMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *LoginMessageResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LoginMessageResponse) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginMessageResponse) GetAgentId() uint32 {
	if m != nil {
		return m.AgentId
	}
	return 0
}

func (m *LoginMessageResponse) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *LoginMessageResponse) GetHeadId() uint32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

func (m *LoginMessageResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *LoginMessageResponse) GetGamePass() []byte {
	if m != nil {
		return m.GamePass
	}
	return nil
}

type GameRoomMessage struct {
	RoomId         uint32  `protobuf:"varint,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	RoomName       string  `protobuf:"bytes,2,opt,name=roomName,proto3" json:"roomName,omitempty"`
	TableCount     uint32  `protobuf:"varint,3,opt,name=tableCount,proto3" json:"tableCount,omitempty"`
	FloorScore     int64   `protobuf:"varint,4,opt,name=floorScore,proto3" json:"floorScore,omitempty"`
	CeilScore      int64   `protobuf:"varint,5,opt,name=ceilScore,proto3" json:"ceilScore,omitempty"`
	EnterMinScore  int64   `protobuf:"varint,6,opt,name=enterMinScore,proto3" json:"enterMinScore,omitempty"`
	EnterMaxScore  int64   `protobuf:"varint,7,opt,name=enterMaxScore,proto3" json:"enterMaxScore,omitempty"`
	MinPlayerNum   uint32  `protobuf:"varint,8,opt,name=minPlayerNum,proto3" json:"minPlayerNum,omitempty"`
	MaxPlayerNum   uint32  `protobuf:"varint,9,opt,name=maxPlayerNum,proto3" json:"maxPlayerNum,omitempty"`
	MaxJettonScore int64   `protobuf:"varint,10,opt,name=maxJettonScore,proto3" json:"maxJettonScore,omitempty"`
	Status         int32   `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Jettons        []int64 `protobuf:"varint,12,rep,packed,name=jettons,proto3" json:"jettons,omitempty"`
}

func (m *GameRoomMessage) Reset()         { *m = GameRoomMessage{} }
func (m *GameRoomMessage) String() string { return proto.CompactTextString(m) }
func (*GameRoomMessage) ProtoMessage()    {}
func (*GameRoomMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{2}
}
func (m *GameRoomMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRoomMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRoomMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRoomMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRoomMessage.Merge(m, src)
}
func (m *GameRoomMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameRoomMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRoomMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameRoomMessage proto.InternalMessageInfo

func (m *GameRoomMessage) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GameRoomMessage) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *GameRoomMessage) GetTableCount() uint32 {
	if m != nil {
		return m.TableCount
	}
	return 0
}

func (m *GameRoomMessage) GetFloorScore() int64 {
	if m != nil {
		return m.FloorScore
	}
	return 0
}

func (m *GameRoomMessage) GetCeilScore() int64 {
	if m != nil {
		return m.CeilScore
	}
	return 0
}

func (m *GameRoomMessage) GetEnterMinScore() int64 {
	if m != nil {
		return m.EnterMinScore
	}
	return 0
}

func (m *GameRoomMessage) GetEnterMaxScore() int64 {
	if m != nil {
		return m.EnterMaxScore
	}
	return 0
}

func (m *GameRoomMessage) GetMinPlayerNum() uint32 {
	if m != nil {
		return m.MinPlayerNum
	}
	return 0
}

func (m *GameRoomMessage) GetMaxPlayerNum() uint32 {
	if m != nil {
		return m.MaxPlayerNum
	}
	return 0
}

func (m *GameRoomMessage) GetMaxJettonScore() int64 {
	if m != nil {
		return m.MaxJettonScore
	}
	return 0
}

func (m *GameRoomMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GameRoomMessage) GetJettons() []int64 {
	if m != nil {
		return m.Jettons
	}
	return nil
}

type GameMessage struct {
	GameId      uint32             `protobuf:"varint,1,opt,name=gameId,proto3" json:"gameId,omitempty"`
	GameName    string             `protobuf:"bytes,2,opt,name=gameName,proto3" json:"gameName,omitempty"`
	GameSortId  uint32             `protobuf:"varint,3,opt,name=gameSortId,proto3" json:"gameSortId,omitempty"`
	GameType    uint32             `protobuf:"varint,4,opt,name=gameType,proto3" json:"gameType,omitempty"`
	GameIsHot   uint32             `protobuf:"varint,5,opt,name=gameIsHot,proto3" json:"gameIsHot,omitempty"`
	GameStatus  int32              `protobuf:"varint,6,opt,name=gameStatus,proto3" json:"gameStatus,omitempty"`
	GameRoomMsg []*GameRoomMessage `protobuf:"bytes,7,rep,name=gameRoomMsg,proto3" json:"gameRoomMsg,omitempty"`
}

func (m *GameMessage) Reset()         { *m = GameMessage{} }
func (m *GameMessage) String() string { return proto.CompactTextString(m) }
func (*GameMessage) ProtoMessage()    {}
func (*GameMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{3}
}
func (m *GameMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage.Merge(m, src)
}
func (m *GameMessage) XXX_Size() int {
	return m.Size()
}
func (m *GameMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage proto.InternalMessageInfo

func (m *GameMessage) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameMessage) GetGameName() string {
	if m != nil {
		return m.GameName
	}
	return ""
}

func (m *GameMessage) GetGameSortId() uint32 {
	if m != nil {
		return m.GameSortId
	}
	return 0
}

func (m *GameMessage) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *GameMessage) GetGameIsHot() uint32 {
	if m != nil {
		return m.GameIsHot
	}
	return 0
}

func (m *GameMessage) GetGameStatus() int32 {
	if m != nil {
		return m.GameStatus
	}
	return 0
}

func (m *GameMessage) GetGameRoomMsg() []*GameRoomMessage {
	if m != nil {
		return m.GameRoomMsg
	}
	return nil
}

type GetGameMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *GetGameMessage) Reset()         { *m = GetGameMessage{} }
func (m *GetGameMessage) String() string { return proto.CompactTextString(m) }
func (*GetGameMessage) ProtoMessage()    {}
func (*GetGameMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{4}
}
func (m *GetGameMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGameMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGameMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGameMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGameMessage.Merge(m, src)
}
func (m *GetGameMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetGameMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGameMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetGameMessage proto.InternalMessageInfo

func (m *GetGameMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetGameMessageResponse struct {
	Header      *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode     int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg    string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	GameMessage []*GameMessage      `protobuf:"bytes,4,rep,name=gameMessage,proto3" json:"gameMessage,omitempty"`
}

func (m *GetGameMessageResponse) Reset()         { *m = GetGameMessageResponse{} }
func (m *GetGameMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetGameMessageResponse) ProtoMessage()    {}
func (*GetGameMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{5}
}
func (m *GetGameMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGameMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGameMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGameMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGameMessageResponse.Merge(m, src)
}
func (m *GetGameMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGameMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGameMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGameMessageResponse proto.InternalMessageInfo

func (m *GetGameMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetGameMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetGameMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetGameMessageResponse) GetGameMessage() []*GameMessage {
	if m != nil {
		return m.GameMessage
	}
	return nil
}

type GetPlayingGameInfoMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *GetPlayingGameInfoMessage) Reset()         { *m = GetPlayingGameInfoMessage{} }
func (m *GetPlayingGameInfoMessage) String() string { return proto.CompactTextString(m) }
func (*GetPlayingGameInfoMessage) ProtoMessage()    {}
func (*GetPlayingGameInfoMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{6}
}
func (m *GetPlayingGameInfoMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayingGameInfoMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayingGameInfoMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayingGameInfoMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayingGameInfoMessage.Merge(m, src)
}
func (m *GetPlayingGameInfoMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayingGameInfoMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayingGameInfoMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayingGameInfoMessage proto.InternalMessageInfo

func (m *GetPlayingGameInfoMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetPlayingGameInfoMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId   uint32              `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoomId   uint32              `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	RetCode  int32               `protobuf:"varint,4,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,5,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *GetPlayingGameInfoMessageResponse) Reset()         { *m = GetPlayingGameInfoMessageResponse{} }
func (m *GetPlayingGameInfoMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayingGameInfoMessageResponse) ProtoMessage()    {}
func (*GetPlayingGameInfoMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{7}
}
func (m *GetPlayingGameInfoMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayingGameInfoMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayingGameInfoMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayingGameInfoMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayingGameInfoMessageResponse.Merge(m, src)
}
func (m *GetPlayingGameInfoMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayingGameInfoMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayingGameInfoMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayingGameInfoMessageResponse proto.InternalMessageInfo

func (m *GetPlayingGameInfoMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetPlayingGameInfoMessageResponse) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GetPlayingGameInfoMessageResponse) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GetPlayingGameInfoMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetPlayingGameInfoMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type GetGameServerMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId uint32              `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	RoomId uint32              `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (m *GetGameServerMessage) Reset()         { *m = GetGameServerMessage{} }
func (m *GetGameServerMessage) String() string { return proto.CompactTextString(m) }
func (*GetGameServerMessage) ProtoMessage()    {}
func (*GetGameServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{8}
}
func (m *GetGameServerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGameServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGameServerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGameServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGameServerMessage.Merge(m, src)
}
func (m *GetGameServerMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetGameServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGameServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetGameServerMessage proto.InternalMessageInfo

func (m *GetGameServerMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetGameServerMessage) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GetGameServerMessage) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type GetGameServerMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (m *GetGameServerMessageResponse) Reset()         { *m = GetGameServerMessageResponse{} }
func (m *GetGameServerMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetGameServerMessageResponse) ProtoMessage()    {}
func (*GetGameServerMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{9}
}
func (m *GetGameServerMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGameServerMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGameServerMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGameServerMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGameServerMessageResponse.Merge(m, src)
}
func (m *GetGameServerMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGameServerMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGameServerMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGameServerMessageResponse proto.InternalMessageInfo

func (m *GetGameServerMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetGameServerMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetGameServerMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type SetHeadIdMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int64               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	HeadId int32               `protobuf:"varint,3,opt,name=headId,proto3" json:"headId,omitempty"`
}

func (m *SetHeadIdMessage) Reset()         { *m = SetHeadIdMessage{} }
func (m *SetHeadIdMessage) String() string { return proto.CompactTextString(m) }
func (*SetHeadIdMessage) ProtoMessage()    {}
func (*SetHeadIdMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{10}
}
func (m *SetHeadIdMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetHeadIdMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetHeadIdMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetHeadIdMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHeadIdMessage.Merge(m, src)
}
func (m *SetHeadIdMessage) XXX_Size() int {
	return m.Size()
}
func (m *SetHeadIdMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHeadIdMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SetHeadIdMessage proto.InternalMessageInfo

func (m *SetHeadIdMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SetHeadIdMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetHeadIdMessage) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

type SetHeadIdMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   int64               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	HeadId   int32               `protobuf:"varint,5,opt,name=headId,proto3" json:"headId,omitempty"`
}

func (m *SetHeadIdMessageResponse) Reset()         { *m = SetHeadIdMessageResponse{} }
func (m *SetHeadIdMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SetHeadIdMessageResponse) ProtoMessage()    {}
func (*SetHeadIdMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{11}
}
func (m *SetHeadIdMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetHeadIdMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetHeadIdMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetHeadIdMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHeadIdMessageResponse.Merge(m, src)
}
func (m *SetHeadIdMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetHeadIdMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHeadIdMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetHeadIdMessageResponse proto.InternalMessageInfo

func (m *SetHeadIdMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SetHeadIdMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *SetHeadIdMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *SetHeadIdMessageResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetHeadIdMessageResponse) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

type SetNickNameMessage struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId     int64               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	NickNameId int32               `protobuf:"varint,3,opt,name=nickNameId,proto3" json:"nickNameId,omitempty"`
	NickName   string              `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
}

func (m *SetNickNameMessage) Reset()         { *m = SetNickNameMessage{} }
func (m *SetNickNameMessage) String() string { return proto.CompactTextString(m) }
func (*SetNickNameMessage) ProtoMessage()    {}
func (*SetNickNameMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{12}
}
func (m *SetNickNameMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNickNameMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNickNameMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNickNameMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNickNameMessage.Merge(m, src)
}
func (m *SetNickNameMessage) XXX_Size() int {
	return m.Size()
}
func (m *SetNickNameMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNickNameMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SetNickNameMessage proto.InternalMessageInfo

func (m *SetNickNameMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SetNickNameMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetNickNameMessage) GetNickNameId() int32 {
	if m != nil {
		return m.NickNameId
	}
	return 0
}

func (m *SetNickNameMessage) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

type SetNickNameMessageResponse struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode    int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg   string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId     int64               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	NickNameId int32               `protobuf:"varint,5,opt,name=nickNameId,proto3" json:"nickNameId,omitempty"`
	NickName   string              `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
}

func (m *SetNickNameMessageResponse) Reset()         { *m = SetNickNameMessageResponse{} }
func (m *SetNickNameMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SetNickNameMessageResponse) ProtoMessage()    {}
func (*SetNickNameMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{13}
}
func (m *SetNickNameMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNickNameMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNickNameMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNickNameMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNickNameMessageResponse.Merge(m, src)
}
func (m *SetNickNameMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetNickNameMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNickNameMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetNickNameMessageResponse proto.InternalMessageInfo

func (m *SetNickNameMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SetNickNameMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *SetNickNameMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *SetNickNameMessageResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SetNickNameMessageResponse) GetNickNameId() int32 {
	if m != nil {
		return m.NickNameId
	}
	return 0
}

func (m *SetNickNameMessageResponse) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

type GetUserScoreMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int64               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUserScoreMessage) Reset()         { *m = GetUserScoreMessage{} }
func (m *GetUserScoreMessage) String() string { return proto.CompactTextString(m) }
func (*GetUserScoreMessage) ProtoMessage()    {}
func (*GetUserScoreMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{14}
}
func (m *GetUserScoreMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserScoreMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserScoreMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserScoreMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserScoreMessage.Merge(m, src)
}
func (m *GetUserScoreMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetUserScoreMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserScoreMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserScoreMessage proto.InternalMessageInfo

func (m *GetUserScoreMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetUserScoreMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserScoreMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   int64               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Score    int64               `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetUserScoreMessageResponse) Reset()         { *m = GetUserScoreMessageResponse{} }
func (m *GetUserScoreMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserScoreMessageResponse) ProtoMessage()    {}
func (*GetUserScoreMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{15}
}
func (m *GetUserScoreMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserScoreMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserScoreMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserScoreMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserScoreMessageResponse.Merge(m, src)
}
func (m *GetUserScoreMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserScoreMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserScoreMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserScoreMessageResponse proto.InternalMessageInfo

func (m *GetUserScoreMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetUserScoreMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetUserScoreMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetUserScoreMessageResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUserScoreMessageResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type GetPlayRecordMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GameId int32               `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
}

func (m *GetPlayRecordMessage) Reset()         { *m = GetPlayRecordMessage{} }
func (m *GetPlayRecordMessage) String() string { return proto.CompactTextString(m) }
func (*GetPlayRecordMessage) ProtoMessage()    {}
func (*GetPlayRecordMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{16}
}
func (m *GetPlayRecordMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayRecordMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayRecordMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayRecordMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayRecordMessage.Merge(m, src)
}
func (m *GetPlayRecordMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayRecordMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayRecordMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayRecordMessage proto.InternalMessageInfo

func (m *GetPlayRecordMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetPlayRecordMessage) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

type GameRecordInfo struct {
	GameRoundNo  string `protobuf:"bytes,1,opt,name=gameRoundNo,proto3" json:"gameRoundNo,omitempty"`
	RoomId       int32  `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	WinLoseScore int32  `protobuf:"varint,3,opt,name=winLoseScore,proto3" json:"winLoseScore,omitempty"`
	GameEndTime  int64  `protobuf:"varint,4,opt,name=gameEndTime,proto3" json:"gameEndTime,omitempty"`
}

func (m *GameRecordInfo) Reset()         { *m = GameRecordInfo{} }
func (m *GameRecordInfo) String() string { return proto.CompactTextString(m) }
func (*GameRecordInfo) ProtoMessage()    {}
func (*GameRecordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{17}
}
func (m *GameRecordInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRecordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRecordInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRecordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRecordInfo.Merge(m, src)
}
func (m *GameRecordInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameRecordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRecordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameRecordInfo proto.InternalMessageInfo

func (m *GameRecordInfo) GetGameRoundNo() string {
	if m != nil {
		return m.GameRoundNo
	}
	return ""
}

func (m *GameRecordInfo) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GameRecordInfo) GetWinLoseScore() int32 {
	if m != nil {
		return m.WinLoseScore
	}
	return 0
}

func (m *GameRecordInfo) GetGameEndTime() int64 {
	if m != nil {
		return m.GameEndTime
	}
	return 0
}

type GetPlayRecordMessageResponse struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode    int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg   string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	GameId     int32               `protobuf:"varint,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
	DetailInfo []*GameRecordInfo   `protobuf:"bytes,5,rep,name=detailInfo,proto3" json:"detailInfo,omitempty"`
}

func (m *GetPlayRecordMessageResponse) Reset()         { *m = GetPlayRecordMessageResponse{} }
func (m *GetPlayRecordMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayRecordMessageResponse) ProtoMessage()    {}
func (*GetPlayRecordMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{18}
}
func (m *GetPlayRecordMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPlayRecordMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPlayRecordMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPlayRecordMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayRecordMessageResponse.Merge(m, src)
}
func (m *GetPlayRecordMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPlayRecordMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayRecordMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayRecordMessageResponse proto.InternalMessageInfo

func (m *GetPlayRecordMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetPlayRecordMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetPlayRecordMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetPlayRecordMessageResponse) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GetPlayRecordMessageResponse) GetDetailInfo() []*GameRecordInfo {
	if m != nil {
		return m.DetailInfo
	}
	return nil
}

//游戏回放子记录
type GamePlaybackRecordItem struct {
	WMainCmdID int32  `protobuf:"varint,1,opt,name=wMainCmdID,proto3" json:"wMainCmdID,omitempty"`
	WSubCmdID  int32  `protobuf:"varint,2,opt,name=wSubCmdID,proto3" json:"wSubCmdID,omitempty"`
	MsgData    []byte `protobuf:"bytes,3,opt,name=MsgData,proto3" json:"MsgData,omitempty"`
	UserId     int32  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	ChairId    int32  `protobuf:"varint,5,opt,name=chairId,proto3" json:"chairId,omitempty"`
}

func (m *GamePlaybackRecordItem) Reset()         { *m = GamePlaybackRecordItem{} }
func (m *GamePlaybackRecordItem) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackRecordItem) ProtoMessage()    {}
func (*GamePlaybackRecordItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{19}
}
func (m *GamePlaybackRecordItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackRecordItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackRecordItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackRecordItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackRecordItem.Merge(m, src)
}
func (m *GamePlaybackRecordItem) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackRecordItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackRecordItem.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackRecordItem proto.InternalMessageInfo

func (m *GamePlaybackRecordItem) GetWMainCmdID() int32 {
	if m != nil {
		return m.WMainCmdID
	}
	return 0
}

func (m *GamePlaybackRecordItem) GetWSubCmdID() int32 {
	if m != nil {
		return m.WSubCmdID
	}
	return 0
}

func (m *GamePlaybackRecordItem) GetMsgData() []byte {
	if m != nil {
		return m.MsgData
	}
	return nil
}

func (m *GamePlaybackRecordItem) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GamePlaybackRecordItem) GetChairId() int32 {
	if m != nil {
		return m.ChairId
	}
	return 0
}

//游戏回放记录
type GamePlaybackRecord struct {
	Recitem []*GamePlaybackRecordItem `protobuf:"bytes,1,rep,name=recitem,proto3" json:"recitem,omitempty"`
}

func (m *GamePlaybackRecord) Reset()         { *m = GamePlaybackRecord{} }
func (m *GamePlaybackRecord) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackRecord) ProtoMessage()    {}
func (*GamePlaybackRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{20}
}
func (m *GamePlaybackRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackRecord.Merge(m, src)
}
func (m *GamePlaybackRecord) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackRecord proto.InternalMessageInfo

func (m *GamePlaybackRecord) GetRecitem() []*GamePlaybackRecordItem {
	if m != nil {
		return m.Recitem
	}
	return nil
}

type HallGetGameServerIPMessage struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId     int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId     int32               `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	KindId     int32               `protobuf:"varint,4,opt,name=kindId,proto3" json:"kindId,omitempty"`
	RoomKindId int32               `protobuf:"varint,5,opt,name=roomKindId,proto3" json:"roomKindId,omitempty"`
	BReconnect int32               `protobuf:"varint,6,opt,name=bReconnect,proto3" json:"bReconnect,omitempty"`
	Ip         string              `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	ConfigId   int32               `protobuf:"varint,8,opt,name=configId,proto3" json:"configId,omitempty"`
}

func (m *HallGetGameServerIPMessage) Reset()         { *m = HallGetGameServerIPMessage{} }
func (m *HallGetGameServerIPMessage) String() string { return proto.CompactTextString(m) }
func (*HallGetGameServerIPMessage) ProtoMessage()    {}
func (*HallGetGameServerIPMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{21}
}
func (m *HallGetGameServerIPMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallGetGameServerIPMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallGetGameServerIPMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallGetGameServerIPMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallGetGameServerIPMessage.Merge(m, src)
}
func (m *HallGetGameServerIPMessage) XXX_Size() int {
	return m.Size()
}
func (m *HallGetGameServerIPMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HallGetGameServerIPMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HallGetGameServerIPMessage proto.InternalMessageInfo

func (m *HallGetGameServerIPMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallGetGameServerIPMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *HallGetGameServerIPMessage) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *HallGetGameServerIPMessage) GetKindId() int32 {
	if m != nil {
		return m.KindId
	}
	return 0
}

func (m *HallGetGameServerIPMessage) GetRoomKindId() int32 {
	if m != nil {
		return m.RoomKindId
	}
	return 0
}

func (m *HallGetGameServerIPMessage) GetBReconnect() int32 {
	if m != nil {
		return m.BReconnect
	}
	return 0
}

func (m *HallGetGameServerIPMessage) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HallGetGameServerIPMessage) GetConfigId() int32 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

type HallGetGameServerIPMessageResponse struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode    int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg   string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId     int32               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId     int32               `protobuf:"varint,5,opt,name=gameId,proto3" json:"gameId,omitempty"`
	KindId     int32               `protobuf:"varint,6,opt,name=kindId,proto3" json:"kindId,omitempty"`
	RoomKindId int32               `protobuf:"varint,7,opt,name=roomKindId,proto3" json:"roomKindId,omitempty"`
	Ip         []string            `protobuf:"bytes,8,rep,name=ip,proto3" json:"ip,omitempty"`
	ConfigId   int32               `protobuf:"varint,9,opt,name=configId,proto3" json:"configId,omitempty"`
}

func (m *HallGetGameServerIPMessageResponse) Reset()         { *m = HallGetGameServerIPMessageResponse{} }
func (m *HallGetGameServerIPMessageResponse) String() string { return proto.CompactTextString(m) }
func (*HallGetGameServerIPMessageResponse) ProtoMessage()    {}
func (*HallGetGameServerIPMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{22}
}
func (m *HallGetGameServerIPMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallGetGameServerIPMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallGetGameServerIPMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallGetGameServerIPMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallGetGameServerIPMessageResponse.Merge(m, src)
}
func (m *HallGetGameServerIPMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *HallGetGameServerIPMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HallGetGameServerIPMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HallGetGameServerIPMessageResponse proto.InternalMessageInfo

func (m *HallGetGameServerIPMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallGetGameServerIPMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *HallGetGameServerIPMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *HallGetGameServerIPMessageResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *HallGetGameServerIPMessageResponse) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *HallGetGameServerIPMessageResponse) GetKindId() int32 {
	if m != nil {
		return m.KindId
	}
	return 0
}

func (m *HallGetGameServerIPMessageResponse) GetRoomKindId() int32 {
	if m != nil {
		return m.RoomKindId
	}
	return 0
}

func (m *HallGetGameServerIPMessageResponse) GetIp() []string {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *HallGetGameServerIPMessageResponse) GetConfigId() int32 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

type HallNotifyGetChatMessageFromServer struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *HallNotifyGetChatMessageFromServer) Reset()         { *m = HallNotifyGetChatMessageFromServer{} }
func (m *HallNotifyGetChatMessageFromServer) String() string { return proto.CompactTextString(m) }
func (*HallNotifyGetChatMessageFromServer) ProtoMessage()    {}
func (*HallNotifyGetChatMessageFromServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{23}
}
func (m *HallNotifyGetChatMessageFromServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallNotifyGetChatMessageFromServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallNotifyGetChatMessageFromServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallNotifyGetChatMessageFromServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallNotifyGetChatMessageFromServer.Merge(m, src)
}
func (m *HallNotifyGetChatMessageFromServer) XXX_Size() int {
	return m.Size()
}
func (m *HallNotifyGetChatMessageFromServer) XXX_DiscardUnknown() {
	xxx_messageInfo_HallNotifyGetChatMessageFromServer.DiscardUnknown(m)
}

var xxx_messageInfo_HallNotifyGetChatMessageFromServer proto.InternalMessageInfo

func (m *HallNotifyGetChatMessageFromServer) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallNotifyGetChatMessageFromServer) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HallNotifyNewMailMessageFromServerMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *HallNotifyNewMailMessageFromServerMessage) Reset() {
	*m = HallNotifyNewMailMessageFromServerMessage{}
}
func (m *HallNotifyNewMailMessageFromServerMessage) String() string { return proto.CompactTextString(m) }
func (*HallNotifyNewMailMessageFromServerMessage) ProtoMessage()    {}
func (*HallNotifyNewMailMessageFromServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{24}
}
func (m *HallNotifyNewMailMessageFromServerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallNotifyNewMailMessageFromServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallNotifyNewMailMessageFromServerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallNotifyNewMailMessageFromServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallNotifyNewMailMessageFromServerMessage.Merge(m, src)
}
func (m *HallNotifyNewMailMessageFromServerMessage) XXX_Size() int {
	return m.Size()
}
func (m *HallNotifyNewMailMessageFromServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HallNotifyNewMailMessageFromServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HallNotifyNewMailMessageFromServerMessage proto.InternalMessageInfo

func (m *HallNotifyNewMailMessageFromServerMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallNotifyNewMailMessageFromServerMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type HallNotifyNoticeMessageFromServerMessage struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HallNotifyNoticeMessageFromServerMessage) Reset() {
	*m = HallNotifyNoticeMessageFromServerMessage{}
}
func (m *HallNotifyNoticeMessageFromServerMessage) String() string { return proto.CompactTextString(m) }
func (*HallNotifyNoticeMessageFromServerMessage) ProtoMessage()    {}
func (*HallNotifyNoticeMessageFromServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{25}
}
func (m *HallNotifyNoticeMessageFromServerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallNotifyNoticeMessageFromServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallNotifyNoticeMessageFromServerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallNotifyNoticeMessageFromServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallNotifyNoticeMessageFromServerMessage.Merge(m, src)
}
func (m *HallNotifyNoticeMessageFromServerMessage) XXX_Size() int {
	return m.Size()
}
func (m *HallNotifyNoticeMessageFromServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HallNotifyNoticeMessageFromServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HallNotifyNoticeMessageFromServerMessage proto.InternalMessageInfo

func (m *HallNotifyNoticeMessageFromServerMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallNotifyNoticeMessageFromServerMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ExchangeScoreToRMBMessage struct {
	Header        *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId        int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ExchangeScore float64             `protobuf:"fixed64,3,opt,name=exchangeScore,proto3" json:"exchangeScore,omitempty"`
	Type          int32               `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *ExchangeScoreToRMBMessage) Reset()         { *m = ExchangeScoreToRMBMessage{} }
func (m *ExchangeScoreToRMBMessage) String() string { return proto.CompactTextString(m) }
func (*ExchangeScoreToRMBMessage) ProtoMessage()    {}
func (*ExchangeScoreToRMBMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{26}
}
func (m *ExchangeScoreToRMBMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeScoreToRMBMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeScoreToRMBMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeScoreToRMBMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeScoreToRMBMessage.Merge(m, src)
}
func (m *ExchangeScoreToRMBMessage) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeScoreToRMBMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeScoreToRMBMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeScoreToRMBMessage proto.InternalMessageInfo

func (m *ExchangeScoreToRMBMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ExchangeScoreToRMBMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ExchangeScoreToRMBMessage) GetExchangeScore() float64 {
	if m != nil {
		return m.ExchangeScore
	}
	return 0
}

func (m *ExchangeScoreToRMBMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ExchangeScoreToRMBMessageResponse struct {
	Header        *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode       int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg      string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId        int32               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Result        int32               `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	Type          int32               `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	ExchangeScore float64             `protobuf:"fixed64,7,opt,name=exchangeScore,proto3" json:"exchangeScore,omitempty"`
	Score         float64             `protobuf:"fixed64,8,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *ExchangeScoreToRMBMessageResponse) Reset()         { *m = ExchangeScoreToRMBMessageResponse{} }
func (m *ExchangeScoreToRMBMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ExchangeScoreToRMBMessageResponse) ProtoMessage()    {}
func (*ExchangeScoreToRMBMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{27}
}
func (m *ExchangeScoreToRMBMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeScoreToRMBMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeScoreToRMBMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeScoreToRMBMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeScoreToRMBMessageResponse.Merge(m, src)
}
func (m *ExchangeScoreToRMBMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeScoreToRMBMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeScoreToRMBMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeScoreToRMBMessageResponse proto.InternalMessageInfo

func (m *ExchangeScoreToRMBMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ExchangeScoreToRMBMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *ExchangeScoreToRMBMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *ExchangeScoreToRMBMessageResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ExchangeScoreToRMBMessageResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *ExchangeScoreToRMBMessageResponse) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ExchangeScoreToRMBMessageResponse) GetExchangeScore() float64 {
	if m != nil {
		return m.ExchangeScore
	}
	return 0
}

func (m *ExchangeScoreToRMBMessageResponse) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type GetExchangeRMBRecordMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Id     int32               `protobuf:"varint,3,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GetExchangeRMBRecordMessage) Reset()         { *m = GetExchangeRMBRecordMessage{} }
func (m *GetExchangeRMBRecordMessage) String() string { return proto.CompactTextString(m) }
func (*GetExchangeRMBRecordMessage) ProtoMessage()    {}
func (*GetExchangeRMBRecordMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{28}
}
func (m *GetExchangeRMBRecordMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExchangeRMBRecordMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExchangeRMBRecordMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExchangeRMBRecordMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExchangeRMBRecordMessage.Merge(m, src)
}
func (m *GetExchangeRMBRecordMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetExchangeRMBRecordMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExchangeRMBRecordMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetExchangeRMBRecordMessage proto.InternalMessageInfo

func (m *GetExchangeRMBRecordMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetExchangeRMBRecordMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetExchangeRMBRecordMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ExchangeRMBRecordMessage struct {
	Id            int32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OrderId       string  `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Account       string  `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Name          string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type          int32   `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	ExchangeScore float64 `protobuf:"fixed64,6,opt,name=exchangeScore,proto3" json:"exchangeScore,omitempty"`
	Status        int32   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Time          string  `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	Reason        string  `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ExchangeRMBRecordMessage) Reset()         { *m = ExchangeRMBRecordMessage{} }
func (m *ExchangeRMBRecordMessage) String() string { return proto.CompactTextString(m) }
func (*ExchangeRMBRecordMessage) ProtoMessage()    {}
func (*ExchangeRMBRecordMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{29}
}
func (m *ExchangeRMBRecordMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRMBRecordMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRMBRecordMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRMBRecordMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRMBRecordMessage.Merge(m, src)
}
func (m *ExchangeRMBRecordMessage) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRMBRecordMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRMBRecordMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRMBRecordMessage proto.InternalMessageInfo

func (m *ExchangeRMBRecordMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExchangeRMBRecordMessage) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *ExchangeRMBRecordMessage) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ExchangeRMBRecordMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExchangeRMBRecordMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ExchangeRMBRecordMessage) GetExchangeScore() float64 {
	if m != nil {
		return m.ExchangeScore
	}
	return 0
}

func (m *ExchangeRMBRecordMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ExchangeRMBRecordMessage) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *ExchangeRMBRecordMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GetExchangeRMBRecordMessageResponse struct {
	Header   *Game_Common.Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32                       `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string                      `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   int32                       `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Message  []*ExchangeRMBRecordMessage `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
}

func (m *GetExchangeRMBRecordMessageResponse) Reset()         { *m = GetExchangeRMBRecordMessageResponse{} }
func (m *GetExchangeRMBRecordMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetExchangeRMBRecordMessageResponse) ProtoMessage()    {}
func (*GetExchangeRMBRecordMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{30}
}
func (m *GetExchangeRMBRecordMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExchangeRMBRecordMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExchangeRMBRecordMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExchangeRMBRecordMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExchangeRMBRecordMessageResponse.Merge(m, src)
}
func (m *GetExchangeRMBRecordMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetExchangeRMBRecordMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExchangeRMBRecordMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExchangeRMBRecordMessageResponse proto.InternalMessageInfo

func (m *GetExchangeRMBRecordMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetExchangeRMBRecordMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetExchangeRMBRecordMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetExchangeRMBRecordMessageResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetExchangeRMBRecordMessageResponse) GetMessage() []*ExchangeRMBRecordMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type NotifyExchangeMessage struct {
	Header  *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId  int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Id      int32               `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	OrderId string              `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	RealPay float64             `protobuf:"fixed64,5,opt,name=realPay,proto3" json:"realPay,omitempty"`
	Status  int32               `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *NotifyExchangeMessage) Reset()         { *m = NotifyExchangeMessage{} }
func (m *NotifyExchangeMessage) String() string { return proto.CompactTextString(m) }
func (*NotifyExchangeMessage) ProtoMessage()    {}
func (*NotifyExchangeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{31}
}
func (m *NotifyExchangeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyExchangeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyExchangeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyExchangeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyExchangeMessage.Merge(m, src)
}
func (m *NotifyExchangeMessage) XXX_Size() int {
	return m.Size()
}
func (m *NotifyExchangeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyExchangeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyExchangeMessage proto.InternalMessageInfo

func (m *NotifyExchangeMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NotifyExchangeMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *NotifyExchangeMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NotifyExchangeMessage) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *NotifyExchangeMessage) GetRealPay() float64 {
	if m != nil {
		return m.RealPay
	}
	return 0
}

func (m *NotifyExchangeMessage) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GetRandomNickNameMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetRandomNickNameMessage) Reset()         { *m = GetRandomNickNameMessage{} }
func (m *GetRandomNickNameMessage) String() string { return proto.CompactTextString(m) }
func (*GetRandomNickNameMessage) ProtoMessage()    {}
func (*GetRandomNickNameMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{32}
}
func (m *GetRandomNickNameMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRandomNickNameMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRandomNickNameMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRandomNickNameMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRandomNickNameMessage.Merge(m, src)
}
func (m *GetRandomNickNameMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetRandomNickNameMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRandomNickNameMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetRandomNickNameMessage proto.InternalMessageInfo

func (m *GetRandomNickNameMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetRandomNickNameMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetRandomNickNameMessageResponse struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode    int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg   string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId     int32               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	NickNameId int32               `protobuf:"varint,5,opt,name=nickNameId,proto3" json:"nickNameId,omitempty"`
	NickName   string              `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
}

func (m *GetRandomNickNameMessageResponse) Reset()         { *m = GetRandomNickNameMessageResponse{} }
func (m *GetRandomNickNameMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetRandomNickNameMessageResponse) ProtoMessage()    {}
func (*GetRandomNickNameMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{33}
}
func (m *GetRandomNickNameMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRandomNickNameMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRandomNickNameMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRandomNickNameMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRandomNickNameMessageResponse.Merge(m, src)
}
func (m *GetRandomNickNameMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRandomNickNameMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRandomNickNameMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRandomNickNameMessageResponse proto.InternalMessageInfo

func (m *GetRandomNickNameMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetRandomNickNameMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetRandomNickNameMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetRandomNickNameMessageResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetRandomNickNameMessageResponse) GetNickNameId() int32 {
	if m != nil {
		return m.NickNameId
	}
	return 0
}

func (m *GetRandomNickNameMessageResponse) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

type GetScoreRankMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetScoreRankMessage) Reset()         { *m = GetScoreRankMessage{} }
func (m *GetScoreRankMessage) String() string { return proto.CompactTextString(m) }
func (*GetScoreRankMessage) ProtoMessage()    {}
func (*GetScoreRankMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{34}
}
func (m *GetScoreRankMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScoreRankMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScoreRankMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScoreRankMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScoreRankMessage.Merge(m, src)
}
func (m *GetScoreRankMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetScoreRankMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScoreRankMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetScoreRankMessage proto.InternalMessageInfo

func (m *GetScoreRankMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetScoreRankMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type RankMessage struct {
	RankId    int32   `protobuf:"varint,1,opt,name=rankId,proto3" json:"rankId,omitempty"`
	UserId    int32   `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Score     float64 `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	HeadId    int32   `protobuf:"varint,4,opt,name=headId,proto3" json:"headId,omitempty"`
	HeadboxId int32   `protobuf:"varint,5,opt,name=headboxId,proto3" json:"headboxId,omitempty"`
	NickName  string  `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Gender    int32   `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Vip1      int32   `protobuf:"varint,8,opt,name=vip1,proto3" json:"vip1,omitempty"`
}

func (m *RankMessage) Reset()         { *m = RankMessage{} }
func (m *RankMessage) String() string { return proto.CompactTextString(m) }
func (*RankMessage) ProtoMessage()    {}
func (*RankMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{35}
}
func (m *RankMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankMessage.Merge(m, src)
}
func (m *RankMessage) XXX_Size() int {
	return m.Size()
}
func (m *RankMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RankMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RankMessage proto.InternalMessageInfo

func (m *RankMessage) GetRankId() int32 {
	if m != nil {
		return m.RankId
	}
	return 0
}

func (m *RankMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RankMessage) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RankMessage) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

func (m *RankMessage) GetHeadboxId() int32 {
	if m != nil {
		return m.HeadboxId
	}
	return 0
}

func (m *RankMessage) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *RankMessage) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *RankMessage) GetVip1() int32 {
	if m != nil {
		return m.Vip1
	}
	return 0
}

type GetScoreRankMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   int32               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Message  []*RankMessage      `protobuf:"bytes,5,rep,name=message,proto3" json:"message,omitempty"`
}

func (m *GetScoreRankMessageResponse) Reset()         { *m = GetScoreRankMessageResponse{} }
func (m *GetScoreRankMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetScoreRankMessageResponse) ProtoMessage()    {}
func (*GetScoreRankMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{36}
}
func (m *GetScoreRankMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetScoreRankMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetScoreRankMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetScoreRankMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScoreRankMessageResponse.Merge(m, src)
}
func (m *GetScoreRankMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetScoreRankMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScoreRankMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetScoreRankMessageResponse proto.InternalMessageInfo

func (m *GetScoreRankMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetScoreRankMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetScoreRankMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetScoreRankMessageResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetScoreRankMessageResponse) GetMessage() []*RankMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// online info.
type OnlineMessage struct {
	RankId        int32  `protobuf:"varint,1,opt,name=rankId,proto3" json:"rankId,omitempty"`
	UserId        int32  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName      string `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	HeadId        int32  `protobuf:"varint,4,opt,name=headId,proto3" json:"headId,omitempty"`
	HeadboxId     int32  `protobuf:"varint,5,opt,name=headboxId,proto3" json:"headboxId,omitempty"`
	Gender        int32  `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	TotonlineTime int32  `protobuf:"varint,7,opt,name=totonlineTime,proto3" json:"totonlineTime,omitempty"`
	Vip1          int32  `protobuf:"varint,8,opt,name=vip1,proto3" json:"vip1,omitempty"`
	Vip2          int32  `protobuf:"varint,9,opt,name=vip2,proto3" json:"vip2,omitempty"`
}

func (m *OnlineMessage) Reset()         { *m = OnlineMessage{} }
func (m *OnlineMessage) String() string { return proto.CompactTextString(m) }
func (*OnlineMessage) ProtoMessage()    {}
func (*OnlineMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{37}
}
func (m *OnlineMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnlineMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnlineMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnlineMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlineMessage.Merge(m, src)
}
func (m *OnlineMessage) XXX_Size() int {
	return m.Size()
}
func (m *OnlineMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlineMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OnlineMessage proto.InternalMessageInfo

func (m *OnlineMessage) GetRankId() int32 {
	if m != nil {
		return m.RankId
	}
	return 0
}

func (m *OnlineMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OnlineMessage) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *OnlineMessage) GetHeadId() int32 {
	if m != nil {
		return m.HeadId
	}
	return 0
}

func (m *OnlineMessage) GetHeadboxId() int32 {
	if m != nil {
		return m.HeadboxId
	}
	return 0
}

func (m *OnlineMessage) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *OnlineMessage) GetTotonlineTime() int32 {
	if m != nil {
		return m.TotonlineTime
	}
	return 0
}

func (m *OnlineMessage) GetVip1() int32 {
	if m != nil {
		return m.Vip1
	}
	return 0
}

func (m *OnlineMessage) GetVip2() int32 {
	if m != nil {
		return m.Vip2
	}
	return 0
}

type GetUserOnlineListMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int32               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUserOnlineListMessage) Reset()         { *m = GetUserOnlineListMessage{} }
func (m *GetUserOnlineListMessage) String() string { return proto.CompactTextString(m) }
func (*GetUserOnlineListMessage) ProtoMessage()    {}
func (*GetUserOnlineListMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{38}
}
func (m *GetUserOnlineListMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserOnlineListMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserOnlineListMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserOnlineListMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserOnlineListMessage.Merge(m, src)
}
func (m *GetUserOnlineListMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetUserOnlineListMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserOnlineListMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserOnlineListMessage proto.InternalMessageInfo

func (m *GetUserOnlineListMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetUserOnlineListMessage) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserOnlineListResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Message  []*OnlineMessage    `protobuf:"bytes,4,rep,name=message,proto3" json:"message,omitempty"`
}

func (m *GetUserOnlineListResponse) Reset()         { *m = GetUserOnlineListResponse{} }
func (m *GetUserOnlineListResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserOnlineListResponse) ProtoMessage()    {}
func (*GetUserOnlineListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{39}
}
func (m *GetUserOnlineListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserOnlineListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserOnlineListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserOnlineListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserOnlineListResponse.Merge(m, src)
}
func (m *GetUserOnlineListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserOnlineListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserOnlineListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserOnlineListResponse proto.InternalMessageInfo

func (m *GetUserOnlineListResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetUserOnlineListResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetUserOnlineListResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetUserOnlineListResponse) GetMessage() []*OnlineMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// get the user status info now.
type GetUpdateUserScoreMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int64               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUpdateUserScoreMessage) Reset()         { *m = GetUpdateUserScoreMessage{} }
func (m *GetUpdateUserScoreMessage) String() string { return proto.CompactTextString(m) }
func (*GetUpdateUserScoreMessage) ProtoMessage()    {}
func (*GetUpdateUserScoreMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{40}
}
func (m *GetUpdateUserScoreMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUpdateUserScoreMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUpdateUserScoreMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUpdateUserScoreMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateUserScoreMessage.Merge(m, src)
}
func (m *GetUpdateUserScoreMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetUpdateUserScoreMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateUserScoreMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateUserScoreMessage proto.InternalMessageInfo

func (m *GetUpdateUserScoreMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetUpdateUserScoreMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// get special status info reponse.
type GetUpdateUserScoreResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   int64               `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Score    int64               `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *GetUpdateUserScoreResponse) Reset()         { *m = GetUpdateUserScoreResponse{} }
func (m *GetUpdateUserScoreResponse) String() string { return proto.CompactTextString(m) }
func (*GetUpdateUserScoreResponse) ProtoMessage()    {}
func (*GetUpdateUserScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{41}
}
func (m *GetUpdateUserScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUpdateUserScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUpdateUserScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUpdateUserScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpdateUserScoreResponse.Merge(m, src)
}
func (m *GetUpdateUserScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUpdateUserScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpdateUserScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpdateUserScoreResponse proto.InternalMessageInfo

func (m *GetUpdateUserScoreResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetUpdateUserScoreResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetUpdateUserScoreResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetUpdateUserScoreResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetUpdateUserScoreResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type HallOnUserOfflineMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId int64               `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *HallOnUserOfflineMessage) Reset()         { *m = HallOnUserOfflineMessage{} }
func (m *HallOnUserOfflineMessage) String() string { return proto.CompactTextString(m) }
func (*HallOnUserOfflineMessage) ProtoMessage()    {}
func (*HallOnUserOfflineMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{42}
}
func (m *HallOnUserOfflineMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HallOnUserOfflineMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HallOnUserOfflineMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HallOnUserOfflineMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HallOnUserOfflineMessage.Merge(m, src)
}
func (m *HallOnUserOfflineMessage) XXX_Size() int {
	return m.Size()
}
func (m *HallOnUserOfflineMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HallOnUserOfflineMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HallOnUserOfflineMessage proto.InternalMessageInfo

func (m *HallOnUserOfflineMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HallOnUserOfflineMessage) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetDialogBoxNoticeMessage struct {
	Header *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetDialogBoxNoticeMessage) Reset()         { *m = GetDialogBoxNoticeMessage{} }
func (m *GetDialogBoxNoticeMessage) String() string { return proto.CompactTextString(m) }
func (*GetDialogBoxNoticeMessage) ProtoMessage()    {}
func (*GetDialogBoxNoticeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{43}
}
func (m *GetDialogBoxNoticeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDialogBoxNoticeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDialogBoxNoticeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDialogBoxNoticeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDialogBoxNoticeMessage.Merge(m, src)
}
func (m *GetDialogBoxNoticeMessage) XXX_Size() int {
	return m.Size()
}
func (m *GetDialogBoxNoticeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDialogBoxNoticeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetDialogBoxNoticeMessage proto.InternalMessageInfo

func (m *GetDialogBoxNoticeMessage) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetDialogBoxNoticeMessage) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetDialogBoxNoticeMessageResponse struct {
	Header   *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode  int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	ErrorMsg string              `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	UserId   uint32              `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Message  string              `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *GetDialogBoxNoticeMessageResponse) Reset()         { *m = GetDialogBoxNoticeMessageResponse{} }
func (m *GetDialogBoxNoticeMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetDialogBoxNoticeMessageResponse) ProtoMessage()    {}
func (*GetDialogBoxNoticeMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{44}
}
func (m *GetDialogBoxNoticeMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDialogBoxNoticeMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDialogBoxNoticeMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDialogBoxNoticeMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDialogBoxNoticeMessageResponse.Merge(m, src)
}
func (m *GetDialogBoxNoticeMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDialogBoxNoticeMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDialogBoxNoticeMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDialogBoxNoticeMessageResponse proto.InternalMessageInfo

func (m *GetDialogBoxNoticeMessageResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetDialogBoxNoticeMessageResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GetDialogBoxNoticeMessageResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetDialogBoxNoticeMessageResponse) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GetDialogBoxNoticeMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// user record item data now.
type GamePlaybackUserItem struct {
	Userid       uint32  `protobuf:"varint,1,opt,name=userid,proto3" json:"userid,omitempty"`
	ChangedScore float64 `protobuf:"fixed64,3,opt,name=changed_score,json=changedScore,proto3" json:"changed_score,omitempty"`
}

func (m *GamePlaybackUserItem) Reset()         { *m = GamePlaybackUserItem{} }
func (m *GamePlaybackUserItem) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackUserItem) ProtoMessage()    {}
func (*GamePlaybackUserItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{45}
}
func (m *GamePlaybackUserItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackUserItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackUserItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackUserItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackUserItem.Merge(m, src)
}
func (m *GamePlaybackUserItem) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackUserItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackUserItem.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackUserItem proto.InternalMessageInfo

func (m *GamePlaybackUserItem) GetUserid() uint32 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *GamePlaybackUserItem) GetChangedScore() float64 {
	if m != nil {
		return m.ChangedScore
	}
	return 0
}

// playback collect item data now.
type GamePlaybackCollectItem struct {
	BankerUserid   uint32                  `protobuf:"varint,1,opt,name=banker_userid,json=bankerUserid,proto3" json:"banker_userid,omitempty"`
	RecordUuid     string                  `protobuf:"bytes,2,opt,name=record_uuid,json=recordUuid,proto3" json:"record_uuid,omitempty"`
	RecordDatetime string                  `protobuf:"bytes,3,opt,name=record_datetime,json=recordDatetime,proto3" json:"record_datetime,omitempty"`
	User           []*GamePlaybackUserItem `protobuf:"bytes,4,rep,name=user,proto3" json:"user,omitempty"`
	ConfigId       uint32                  `protobuf:"varint,5,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	RecordId       uint32                  `protobuf:"varint,6,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	RoomName       string                  `protobuf:"bytes,7,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	ProcessState   uint32                  `protobuf:"varint,8,opt,name=process_state,json=processState,proto3" json:"process_state,omitempty"`
}

func (m *GamePlaybackCollectItem) Reset()         { *m = GamePlaybackCollectItem{} }
func (m *GamePlaybackCollectItem) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackCollectItem) ProtoMessage()    {}
func (*GamePlaybackCollectItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{46}
}
func (m *GamePlaybackCollectItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackCollectItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackCollectItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackCollectItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackCollectItem.Merge(m, src)
}
func (m *GamePlaybackCollectItem) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackCollectItem) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackCollectItem.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackCollectItem proto.InternalMessageInfo

func (m *GamePlaybackCollectItem) GetBankerUserid() uint32 {
	if m != nil {
		return m.BankerUserid
	}
	return 0
}

func (m *GamePlaybackCollectItem) GetRecordUuid() string {
	if m != nil {
		return m.RecordUuid
	}
	return ""
}

func (m *GamePlaybackCollectItem) GetRecordDatetime() string {
	if m != nil {
		return m.RecordDatetime
	}
	return ""
}

func (m *GamePlaybackCollectItem) GetUser() []*GamePlaybackUserItem {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GamePlaybackCollectItem) GetConfigId() uint32 {
	if m != nil {
		return m.ConfigId
	}
	return 0
}

func (m *GamePlaybackCollectItem) GetRecordId() uint32 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

func (m *GamePlaybackCollectItem) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *GamePlaybackCollectItem) GetProcessState() uint32 {
	if m != nil {
		return m.ProcessState
	}
	return 0
}

// 获取列表信息
type GamePlaybackCollectRequest struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	UserId     uint32              `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	GameId     uint32              `protobuf:"varint,3,opt,name=gameId,proto3" json:"gameId,omitempty"`
	LimitCount uint32              `protobuf:"varint,4,opt,name=limitCount,proto3" json:"limitCount,omitempty"`
}

func (m *GamePlaybackCollectRequest) Reset()         { *m = GamePlaybackCollectRequest{} }
func (m *GamePlaybackCollectRequest) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackCollectRequest) ProtoMessage()    {}
func (*GamePlaybackCollectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{47}
}
func (m *GamePlaybackCollectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackCollectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackCollectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackCollectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackCollectRequest.Merge(m, src)
}
func (m *GamePlaybackCollectRequest) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackCollectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackCollectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackCollectRequest proto.InternalMessageInfo

func (m *GamePlaybackCollectRequest) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GamePlaybackCollectRequest) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GamePlaybackCollectRequest) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GamePlaybackCollectRequest) GetLimitCount() uint32 {
	if m != nil {
		return m.LimitCount
	}
	return 0
}

// 列表返回
type GamePlaybackCollectResponse struct {
	Header  *Game_Common.Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode int32                      `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	UserId  uint32                     `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Item    []*GamePlaybackCollectItem `protobuf:"bytes,4,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *GamePlaybackCollectResponse) Reset()         { *m = GamePlaybackCollectResponse{} }
func (m *GamePlaybackCollectResponse) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackCollectResponse) ProtoMessage()    {}
func (*GamePlaybackCollectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{48}
}
func (m *GamePlaybackCollectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackCollectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackCollectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackCollectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackCollectResponse.Merge(m, src)
}
func (m *GamePlaybackCollectResponse) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackCollectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackCollectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackCollectResponse proto.InternalMessageInfo

func (m *GamePlaybackCollectResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GamePlaybackCollectResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GamePlaybackCollectResponse) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GamePlaybackCollectResponse) GetItem() []*GamePlaybackCollectItem {
	if m != nil {
		return m.Item
	}
	return nil
}

// 获取明细信息
type GamePlaybackDetailRequest struct {
	Header     *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RecordUuid string              `protobuf:"bytes,2,opt,name=record_uuid,json=recordUuid,proto3" json:"record_uuid,omitempty"`
	RecordId   int32               `protobuf:"varint,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	GameId     uint32              `protobuf:"varint,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
}

func (m *GamePlaybackDetailRequest) Reset()         { *m = GamePlaybackDetailRequest{} }
func (m *GamePlaybackDetailRequest) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackDetailRequest) ProtoMessage()    {}
func (*GamePlaybackDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{49}
}
func (m *GamePlaybackDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackDetailRequest.Merge(m, src)
}
func (m *GamePlaybackDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackDetailRequest proto.InternalMessageInfo

func (m *GamePlaybackDetailRequest) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GamePlaybackDetailRequest) GetRecordUuid() string {
	if m != nil {
		return m.RecordUuid
	}
	return ""
}

func (m *GamePlaybackDetailRequest) GetRecordId() int32 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

func (m *GamePlaybackDetailRequest) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

// 明细信息返回
type GamePlaybackDetailResponse struct {
	Header       *Game_Common.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RetCode      int32               `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	Content      []byte              `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	GameId       uint32              `protobuf:"varint,4,opt,name=gameId,proto3" json:"gameId,omitempty"`
	ReportUserid uint32              `protobuf:"varint,5,opt,name=report_userid,json=reportUserid,proto3" json:"report_userid,omitempty"`
}

func (m *GamePlaybackDetailResponse) Reset()         { *m = GamePlaybackDetailResponse{} }
func (m *GamePlaybackDetailResponse) String() string { return proto.CompactTextString(m) }
func (*GamePlaybackDetailResponse) ProtoMessage()    {}
func (*GamePlaybackDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bbc65a8f12a7c8d, []int{50}
}
func (m *GamePlaybackDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GamePlaybackDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GamePlaybackDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GamePlaybackDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GamePlaybackDetailResponse.Merge(m, src)
}
func (m *GamePlaybackDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GamePlaybackDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GamePlaybackDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GamePlaybackDetailResponse proto.InternalMessageInfo

func (m *GamePlaybackDetailResponse) GetHeader() *Game_Common.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GamePlaybackDetailResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *GamePlaybackDetailResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *GamePlaybackDetailResponse) GetGameId() uint32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GamePlaybackDetailResponse) GetReportUserid() uint32 {
	if m != nil {
		return m.ReportUserid
	}
	return 0
}

func init() {
	proto.RegisterEnum("HallServer.LoginMessageResponse_LoginRetCode", LoginMessageResponse_LoginRetCode_name, LoginMessageResponse_LoginRetCode_value)
	proto.RegisterType((*LoginMessage)(nil), "HallServer.LoginMessage")
	proto.RegisterType((*LoginMessageResponse)(nil), "HallServer.LoginMessageResponse")
	proto.RegisterType((*GameRoomMessage)(nil), "HallServer.GameRoomMessage")
	proto.RegisterType((*GameMessage)(nil), "HallServer.GameMessage")
	proto.RegisterType((*GetGameMessage)(nil), "HallServer.GetGameMessage")
	proto.RegisterType((*GetGameMessageResponse)(nil), "HallServer.GetGameMessageResponse")
	proto.RegisterType((*GetPlayingGameInfoMessage)(nil), "HallServer.GetPlayingGameInfoMessage")
	proto.RegisterType((*GetPlayingGameInfoMessageResponse)(nil), "HallServer.GetPlayingGameInfoMessageResponse")
	proto.RegisterType((*GetGameServerMessage)(nil), "HallServer.GetGameServerMessage")
	proto.RegisterType((*GetGameServerMessageResponse)(nil), "HallServer.GetGameServerMessageResponse")
	proto.RegisterType((*SetHeadIdMessage)(nil), "HallServer.SetHeadIdMessage")
	proto.RegisterType((*SetHeadIdMessageResponse)(nil), "HallServer.SetHeadIdMessageResponse")
	proto.RegisterType((*SetNickNameMessage)(nil), "HallServer.SetNickNameMessage")
	proto.RegisterType((*SetNickNameMessageResponse)(nil), "HallServer.SetNickNameMessageResponse")
	proto.RegisterType((*GetUserScoreMessage)(nil), "HallServer.GetUserScoreMessage")
	proto.RegisterType((*GetUserScoreMessageResponse)(nil), "HallServer.GetUserScoreMessageResponse")
	proto.RegisterType((*GetPlayRecordMessage)(nil), "HallServer.GetPlayRecordMessage")
	proto.RegisterType((*GameRecordInfo)(nil), "HallServer.GameRecordInfo")
	proto.RegisterType((*GetPlayRecordMessageResponse)(nil), "HallServer.GetPlayRecordMessageResponse")
	proto.RegisterType((*GamePlaybackRecordItem)(nil), "HallServer.GamePlaybackRecordItem")
	proto.RegisterType((*GamePlaybackRecord)(nil), "HallServer.GamePlaybackRecord")
	proto.RegisterType((*HallGetGameServerIPMessage)(nil), "HallServer.HallGetGameServerIPMessage")
	proto.RegisterType((*HallGetGameServerIPMessageResponse)(nil), "HallServer.HallGetGameServerIPMessageResponse")
	proto.RegisterType((*HallNotifyGetChatMessageFromServer)(nil), "HallServer.HallNotifyGetChatMessageFromServer")
	proto.RegisterType((*HallNotifyNewMailMessageFromServerMessage)(nil), "HallServer.HallNotifyNewMailMessageFromServerMessage")
	proto.RegisterType((*HallNotifyNoticeMessageFromServerMessage)(nil), "HallServer.HallNotifyNoticeMessageFromServerMessage")
	proto.RegisterType((*ExchangeScoreToRMBMessage)(nil), "HallServer.ExchangeScoreToRMBMessage")
	proto.RegisterType((*ExchangeScoreToRMBMessageResponse)(nil), "HallServer.ExchangeScoreToRMBMessageResponse")
	proto.RegisterType((*GetExchangeRMBRecordMessage)(nil), "HallServer.GetExchangeRMBRecordMessage")
	proto.RegisterType((*ExchangeRMBRecordMessage)(nil), "HallServer.ExchangeRMBRecordMessage")
	proto.RegisterType((*GetExchangeRMBRecordMessageResponse)(nil), "HallServer.GetExchangeRMBRecordMessageResponse")
	proto.RegisterType((*NotifyExchangeMessage)(nil), "HallServer.NotifyExchangeMessage")
	proto.RegisterType((*GetRandomNickNameMessage)(nil), "HallServer.GetRandomNickNameMessage")
	proto.RegisterType((*GetRandomNickNameMessageResponse)(nil), "HallServer.GetRandomNickNameMessageResponse")
	proto.RegisterType((*GetScoreRankMessage)(nil), "HallServer.GetScoreRankMessage")
	proto.RegisterType((*RankMessage)(nil), "HallServer.RankMessage")
	proto.RegisterType((*GetScoreRankMessageResponse)(nil), "HallServer.GetScoreRankMessageResponse")
	proto.RegisterType((*OnlineMessage)(nil), "HallServer.OnlineMessage")
	proto.RegisterType((*GetUserOnlineListMessage)(nil), "HallServer.GetUserOnlineListMessage")
	proto.RegisterType((*GetUserOnlineListResponse)(nil), "HallServer.GetUserOnlineListResponse")
	proto.RegisterType((*GetUpdateUserScoreMessage)(nil), "HallServer.GetUpdateUserScoreMessage")
	proto.RegisterType((*GetUpdateUserScoreResponse)(nil), "HallServer.GetUpdateUserScoreResponse")
	proto.RegisterType((*HallOnUserOfflineMessage)(nil), "HallServer.HallOnUserOfflineMessage")
	proto.RegisterType((*GetDialogBoxNoticeMessage)(nil), "HallServer.GetDialogBoxNoticeMessage")
	proto.RegisterType((*GetDialogBoxNoticeMessageResponse)(nil), "HallServer.GetDialogBoxNoticeMessageResponse")
	proto.RegisterType((*GamePlaybackUserItem)(nil), "HallServer.GamePlaybackUserItem")
	proto.RegisterType((*GamePlaybackCollectItem)(nil), "HallServer.GamePlaybackCollectItem")
	proto.RegisterType((*GamePlaybackCollectRequest)(nil), "HallServer.GamePlaybackCollectRequest")
	proto.RegisterType((*GamePlaybackCollectResponse)(nil), "HallServer.GamePlaybackCollectResponse")
	proto.RegisterType((*GamePlaybackDetailRequest)(nil), "HallServer.GamePlaybackDetailRequest")
	proto.RegisterType((*GamePlaybackDetailResponse)(nil), "HallServer.GamePlaybackDetailResponse")
}

func init() { proto.RegisterFile("HallServer.Message.proto", fileDescriptor_2bbc65a8f12a7c8d) }

var fileDescriptor_2bbc65a8f12a7c8d = []byte{
	// 2069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x9f, 0xb6, 0xdd, 0x76, 0xfc, 0x62, 0x67, 0x43, 0x4f, 0x98, 0xe9, 0xc9, 0x8c, 0x8c, 0xb7,
	0x32, 0x82, 0x20, 0xa4, 0x48, 0x3b, 0x8b, 0x84, 0x40, 0x2c, 0xd2, 0xe4, 0x83, 0xc4, 0x4c, 0xe2,
	0x8c, 0xca, 0x89, 0x40, 0x70, 0x30, 0x1d, 0x77, 0xc5, 0xd3, 0xc4, 0xdd, 0xe5, 0xed, 0x2e, 0xef,
	0x24, 0x07, 0x0e, 0x5c, 0x38, 0x2f, 0x07, 0x0e, 0x80, 0xc4, 0x81, 0x23, 0xd2, 0x72, 0x41, 0xa0,
	0xd5, 0xfe, 0x05, 0x48, 0x5c, 0x16, 0x21, 0x24, 0xb8, 0xad, 0x66, 0xfe, 0x01, 0x6e, 0x48, 0x48,
	0x48, 0xa8, 0xbe, 0xba, 0xab, 0xfd, 0x11, 0x34, 0x19, 0x93, 0xc9, 0xcd, 0xef, 0xd5, 0xeb, 0x7a,
	0xf5, 0x7e, 0xef, 0xd5, 0x7b, 0xaf, 0xaa, 0x0c, 0xee, 0x9e, 0x37, 0x18, 0x74, 0x48, 0xfc, 0x01,
	0x89, 0x37, 0x0e, 0x48, 0x92, 0x78, 0x7d, 0xb2, 0x31, 0x8c, 0x29, 0xa3, 0x0e, 0x64, 0x23, 0xab,
	0x9f, 0xdb, 0xf5, 0x42, 0xb2, 0xb1, 0x45, 0xc3, 0x90, 0x46, 0x72, 0x18, 0x1d, 0x43, 0x6d, 0x9f,
	0xf6, 0x83, 0x48, 0x7d, 0xe4, 0x7c, 0x05, 0xca, 0xcf, 0x88, 0xe7, 0x93, 0xd8, 0xb5, 0x9a, 0xd6,
	0xfa, 0xe2, 0xa3, 0xdb, 0x1b, 0xe6, 0x37, 0x7b, 0x62, 0x08, 0x2b, 0x11, 0xc7, 0x85, 0x4a, 0x42,
	0x92, 0x24, 0xa0, 0x91, 0x5b, 0x68, 0x5a, 0xeb, 0x55, 0xac, 0x49, 0xf4, 0xdb, 0x22, 0xac, 0x98,
	0xf3, 0x62, 0x92, 0x0c, 0x69, 0x94, 0xbc, 0xfa, 0xfc, 0x31, 0x61, 0x5b, 0xd4, 0x27, 0x62, 0x7e,
	0x1b, 0x6b, 0xd2, 0x59, 0x85, 0x05, 0x12, 0xc7, 0x34, 0x3e, 0x48, 0xfa, 0x6e, 0x51, 0xa8, 0x4e,
	0x69, 0xe7, 0x0e, 0x94, 0x47, 0x09, 0x89, 0x5b, 0xbe, 0x5b, 0x6a, 0x5a, 0xeb, 0x45, 0xac, 0x28,
	0x3e, 0x9b, 0xd7, 0xeb, 0xd1, 0x51, 0xc4, 0x5c, 0x5b, 0xae, 0x56, 0x91, 0x62, 0xa4, 0x4f, 0x22,
	0xd6, 0xf2, 0xdd, 0x72, 0xd3, 0x5a, 0xaf, 0x63, 0x4d, 0x72, 0x3d, 0x51, 0xd0, 0x3b, 0x6b, 0x7b,
	0x21, 0x71, 0x2b, 0x52, 0x8f, 0xa6, 0xb9, 0x1e, 0xbe, 0xce, 0x96, 0xef, 0x2e, 0x88, 0x8f, 0x14,
	0xe5, 0xac, 0x80, 0x9d, 0xf4, 0x68, 0x4c, 0xdc, 0xaa, 0x50, 0x2f, 0x09, 0x3e, 0x53, 0xdf, 0x0b,
	0xc9, 0x53, 0x2f, 0x49, 0x5c, 0x68, 0x5a, 0xeb, 0x35, 0x9c, 0xd2, 0xe8, 0xc7, 0xca, 0x09, 0x58,
	0x59, 0x57, 0x83, 0x85, 0xfd, 0xc3, 0xdd, 0x56, 0xbb, 0x7b, 0xf8, 0x64, 0xf9, 0x96, 0xf3, 0x00,
	0x5c, 0x49, 0x3d, 0xde, 0xda, 0x3a, 0x3c, 0x6e, 0x1f, 0x75, 0xba, 0xed, 0xc3, 0xa3, 0xee, 0xce,
	0xf7, 0x5a, 0x9d, 0xa3, 0x65, 0xcb, 0xb9, 0x0b, 0xb7, 0xe5, 0x68, 0x67, 0xe7, 0xf1, 0x7e, 0x2a,
	0xb2, 0x5c, 0x70, 0x1c, 0x58, 0x92, 0x03, 0xed, 0x9d, 0xa3, 0x4d, 0xbc, 0xf3, 0xf8, 0xc9, 0x72,
	0xd1, 0x59, 0x81, 0x65, 0xbc, 0xb3, 0xdb, 0xea, 0x1c, 0xed, 0xe0, 0xee, 0x71, 0xfb, 0x49, 0xfb,
	0xf0, 0xbb, 0xed, 0xe5, 0x15, 0xf4, 0xb3, 0x22, 0xbc, 0xc5, 0xbd, 0x80, 0x29, 0x0d, 0x75, 0x1c,
	0xdc, 0x81, 0x72, 0x4c, 0x69, 0xd8, 0xf2, 0x85, 0x9f, 0xea, 0x58, 0x51, 0xdc, 0x0c, 0xfe, 0x4b,
	0x00, 0x22, 0x7d, 0x9e, 0xd2, 0x4e, 0x03, 0x80, 0x79, 0x27, 0x03, 0xb2, 0x25, 0x30, 0x2e, 0x8a,
	0xef, 0x0c, 0x0e, 0x1f, 0x3f, 0x1d, 0x50, 0x1a, 0x77, 0x04, 0x3a, 0xd2, 0x39, 0x06, 0xc7, 0x79,
	0x00, 0xd5, 0x1e, 0x09, 0x06, 0x72, 0xd8, 0x16, 0xc3, 0x19, 0xc3, 0x79, 0x08, 0x75, 0x12, 0x31,
	0x12, 0x1f, 0x04, 0x91, 0x94, 0x28, 0x0b, 0x89, 0x3c, 0x33, 0x93, 0xf2, 0xce, 0xa5, 0x54, 0xc5,
	0x94, 0x52, 0x4c, 0x07, 0x41, 0x2d, 0x0c, 0xa2, 0xa7, 0x03, 0xef, 0x82, 0xc4, 0xed, 0x51, 0xa8,
	0x1c, 0x98, 0xe3, 0x09, 0x19, 0xef, 0x3c, 0x93, 0xa9, 0x2a, 0x19, 0x83, 0xe7, 0x7c, 0x11, 0x96,
	0x42, 0xef, 0xfc, 0x3b, 0x84, 0x31, 0xaa, 0x16, 0x05, 0x42, 0xdd, 0x18, 0x97, 0xa3, 0x99, 0x30,
	0x8f, 0x8d, 0x12, 0x77, 0x51, 0xc4, 0xb1, 0xa2, 0x78, 0xe0, 0xfd, 0x48, 0x88, 0x25, 0x6e, 0xad,
	0x59, 0x5c, 0x2f, 0x62, 0x4d, 0xa2, 0x7f, 0x5b, 0xb0, 0xc8, 0x7d, 0x62, 0xf8, 0x83, 0x87, 0x4b,
	0xe6, 0x0f, 0x49, 0xe9, 0xb0, 0x32, 0xfd, 0xa1, 0x69, 0x8e, 0x37, 0xff, 0xdd, 0xa1, 0x31, 0x8f,
	0x6c, 0xe5, 0x8f, 0x8c, 0xa3, 0xbf, 0x3d, 0xba, 0x18, 0x4a, 0x6f, 0xd4, 0x71, 0x4a, 0x73, 0x5f,
	0x08, 0x0d, 0xc9, 0x1e, 0x95, 0xdb, 0xa5, 0x8e, 0x33, 0x46, 0x3a, 0xb3, 0xb4, 0xa9, 0x2c, 0x6c,
	0x32, 0x38, 0xce, 0x7b, 0xb0, 0xd8, 0xd7, 0x01, 0x95, 0xf4, 0xdd, 0x4a, 0xb3, 0xb8, 0xbe, 0xf8,
	0xe8, 0xfe, 0x86, 0x91, 0xa4, 0xc6, 0xe2, 0x0d, 0x9b, 0xf2, 0xe8, 0x3d, 0x58, 0xda, 0x25, 0xcc,
	0x34, 0xff, 0x55, 0xd2, 0x06, 0xfa, 0xa3, 0x05, 0x77, 0xf2, 0xdf, 0x5f, 0x67, 0xfa, 0xf9, 0xba,
	0xb4, 0x5d, 0x69, 0x76, 0x4b, 0xc2, 0xf6, 0xbb, 0xe3, 0xb6, 0xe7, 0xec, 0x56, 0x04, 0xda, 0x83,
	0x7b, 0xbb, 0x84, 0xf1, 0xf0, 0x0a, 0xa2, 0x3e, 0x97, 0x6a, 0x45, 0xa7, 0xf4, 0xaa, 0x10, 0xbc,
	0x3d, 0x73, 0xaa, 0xab, 0xa1, 0x91, 0x45, 0x60, 0x21, 0x17, 0x81, 0x59, 0xa6, 0x28, 0xe6, 0x32,
	0x85, 0x81, 0x5e, 0x69, 0x36, 0x7a, 0x76, 0x1e, 0x3d, 0x94, 0xc0, 0x8a, 0x72, 0x9d, 0x04, 0xeb,
	0x4a, 0x75, 0xe9, 0x15, 0x97, 0x8a, 0x7e, 0x62, 0xc1, 0x83, 0x69, 0x5a, 0xaf, 0x31, 0x6c, 0x10,
	0x85, 0xe5, 0x0e, 0x61, 0x7b, 0xa2, 0x84, 0x5c, 0xd5, 0x68, 0x55, 0xf6, 0x0a, 0xb9, 0xb2, 0x97,
	0x95, 0xa9, 0xa2, 0xcc, 0x3d, 0x92, 0x42, 0x1f, 0x59, 0xe0, 0x8e, 0x6b, 0xbc, 0x09, 0x65, 0x3a,
	0x5b, 0xaf, 0x9d, 0x5b, 0xef, 0xcf, 0x2d, 0x70, 0x3a, 0x84, 0xb5, 0x55, 0xf9, 0x9d, 0x2b, 0x46,
	0x0d, 0x00, 0x5d, 0xd6, 0x53, 0x9c, 0x0c, 0x4e, 0xae, 0x0d, 0x28, 0xe5, 0xdb, 0x00, 0xf4, 0x57,
	0x0b, 0x56, 0x27, 0xd7, 0x75, 0x13, 0x90, 0xcc, 0x5b, 0x65, 0x5f, 0x6a, 0x55, 0x79, 0xcc, 0xaa,
	0xef, 0xc3, 0xed, 0x5d, 0xc2, 0x8e, 0x13, 0x22, 0x6b, 0xf3, 0x3c, 0xd1, 0x46, 0xbf, 0xb3, 0xe0,
	0xfe, 0x94, 0xc9, 0x6f, 0x02, 0x64, 0x69, 0xef, 0x66, 0x1b, 0xbd, 0x1b, 0xfa, 0x81, 0x48, 0x4a,
	0x3c, 0x99, 0x62, 0xd2, 0xa3, 0xb1, 0x3f, 0x87, 0xa4, 0x64, 0xeb, 0xa4, 0x84, 0x3e, 0xb4, 0x60,
	0x49, 0x54, 0x43, 0x31, 0x35, 0x4f, 0xd3, 0x4e, 0x53, 0x97, 0xcf, 0x51, 0xe4, 0xb7, 0xa9, 0x98,
	0xbc, 0x8a, 0x4d, 0x96, 0x91, 0xc9, 0xd4, 0x64, 0x2a, 0xe9, 0x22, 0xa8, 0x3d, 0x0f, 0xa2, 0x7d,
	0x9a, 0x10, 0xd9, 0x8e, 0xc8, 0x50, 0xce, 0xf1, 0xf4, 0xec, 0x3b, 0x91, 0x7f, 0x14, 0x84, 0xba,
	0x0f, 0x33, 0x59, 0xe8, 0x6f, 0x32, 0x1f, 0x4e, 0x18, 0x7c, 0xcd, 0x1e, 0x52, 0x70, 0x95, 0x4c,
	0xb8, 0x9c, 0x6f, 0x00, 0xf8, 0x84, 0x79, 0xc1, 0x80, 0x23, 0xe5, 0xda, 0xa2, 0xba, 0xae, 0x4e,
	0x74, 0x16, 0x29, 0x96, 0xd8, 0x90, 0x46, 0xbf, 0xe1, 0x8d, 0x01, 0x6f, 0xba, 0x07, 0xde, 0xc5,
	0x89, 0xd7, 0x3b, 0x53, 0x62, 0x8c, 0x84, 0x7c, 0xaf, 0x3c, 0x3f, 0xf0, 0x82, 0x68, 0x2b, 0xf4,
	0x5b, 0xdb, 0xc2, 0x2a, 0x1b, 0x1b, 0x1c, 0xde, 0x0f, 0x3d, 0xef, 0x8c, 0x4e, 0xe4, 0xb0, 0x34,
	0x23, 0x63, 0x70, 0x13, 0x0f, 0x92, 0xfe, 0xb6, 0xc7, 0x3c, 0x61, 0x47, 0x0d, 0x6b, 0x72, 0x2c,
	0xd0, 0x6c, 0xf3, 0x30, 0xd2, 0x7b, 0xe6, 0x05, 0x71, 0xba, 0x31, 0x35, 0x89, 0x30, 0x38, 0x93,
	0x6b, 0x74, 0xbe, 0xc9, 0x41, 0xec, 0x05, 0x8c, 0x84, 0xae, 0x25, 0x6c, 0x46, 0xe3, 0x36, 0x4f,
	0x1a, 0x85, 0xf5, 0x27, 0xe8, 0x3f, 0x16, 0xac, 0x72, 0xf1, 0x5c, 0x91, 0x6b, 0x3d, 0x9d, 0xc3,
	0xae, 0xb6, 0xcd, 0xbc, 0xdd, 0x37, 0xf3, 0xa7, 0x51, 0x74, 0xcf, 0x82, 0xc8, 0xcf, 0x10, 0x90,
	0x14, 0x47, 0x9c, 0x07, 0xed, 0x13, 0x39, 0xa6, 0xb2, 0x53, 0xc6, 0xe1, 0xe3, 0x27, 0xdc, 0x96,
	0x28, 0x22, 0x3d, 0xa6, 0x7b, 0xcc, 0x8c, 0xe3, 0x2c, 0x41, 0x21, 0x18, 0xaa, 0x43, 0x59, 0x21,
	0x18, 0xf2, 0x60, 0xea, 0xd1, 0xe8, 0x34, 0xe8, 0xab, 0x03, 0x99, 0x8d, 0x53, 0x1a, 0xfd, 0xaa,
	0x00, 0x68, 0xb6, 0xfd, 0x6f, 0x2e, 0xf1, 0x4c, 0x43, 0xcf, 0x9e, 0x81, 0x5e, 0xf9, 0x12, 0xf4,
	0x2a, 0x13, 0xe8, 0x49, 0x74, 0x16, 0x9a, 0xc5, 0x29, 0xe8, 0x54, 0xc7, 0xd0, 0x09, 0x24, 0x38,
	0x6d, 0xca, 0x82, 0xd3, 0x8b, 0x5d, 0xc2, 0xb6, 0x9e, 0x79, 0x4c, 0x41, 0xf3, 0xed, 0x98, 0x86,
	0x12, 0xad, 0xb9, 0x04, 0x09, 0x1a, 0xc2, 0x97, 0x33, 0x55, 0x6d, 0xc2, 0x37, 0xd8, 0x60, 0x42,
	0xd5, 0x3c, 0xc3, 0x12, 0xbd, 0x0f, 0xeb, 0x86, 0x46, 0xca, 0x82, 0x1e, 0x99, 0x8f, 0x42, 0x17,
	0x2a, 0xa1, 0xea, 0xf1, 0xd5, 0xe5, 0x87, 0x22, 0xd1, 0x2f, 0x2d, 0xb8, 0xb7, 0x73, 0xde, 0x7b,
	0xe6, 0x45, 0x7d, 0x99, 0x72, 0x8f, 0x28, 0x3e, 0xd8, 0x9c, 0xeb, 0x66, 0xe3, 0xc7, 0x5c, 0x53,
	0x83, 0x88, 0x33, 0x0b, 0xe7, 0x99, 0x8e, 0x03, 0x25, 0xa6, 0x0f, 0x77, 0x36, 0x16, 0xbf, 0xd1,
	0x4f, 0x0b, 0xf0, 0xf6, 0xcc, 0xc5, 0xdd, 0x90, 0x9d, 0x10, 0x93, 0x64, 0x34, 0x60, 0x7a, 0x27,
	0x48, 0x2a, 0x35, 0xa6, 0x9c, 0x19, 0x33, 0x09, 0x43, 0x65, 0x1a, 0x0c, 0x69, 0x51, 0x5f, 0x10,
	0xa3, 0xaa, 0xa8, 0xc7, 0xa2, 0x09, 0xd1, 0x50, 0xe0, 0x83, 0xcd, 0xd7, 0xab, 0xed, 0x53, 0xdd,
	0xb4, 0x04, 0x85, 0x34, 0x1f, 0x16, 0x5a, 0x3e, 0xfa, 0xa7, 0x05, 0xee, 0x4c, 0x8d, 0x52, 0xd8,
	0xd2, 0xc2, 0x1c, 0x56, 0x1a, 0xfb, 0xe9, 0xac, 0x55, 0xac, 0x49, 0xf3, 0x26, 0xab, 0x98, 0xbf,
	0xc9, 0x72, 0xa0, 0x14, 0x65, 0x4d, 0xaa, 0xf8, 0x9d, 0x02, 0x67, 0x5f, 0x06, 0x5c, 0x79, 0x1a,
	0x70, 0xd9, 0xb5, 0x45, 0x25, 0x77, 0x6d, 0xc1, 0x67, 0xe4, 0xad, 0xc3, 0x82, 0xd4, 0xc2, 0x7f,
	0x4b, 0xb7, 0x79, 0x09, 0x8d, 0x44, 0x7a, 0xa9, 0x62, 0x45, 0xa1, 0xcf, 0x2c, 0x58, 0xbb, 0x04,
	0xe7, 0x9b, 0x10, 0x71, 0xdf, 0xca, 0x76, 0xb2, 0xec, 0x27, 0x1e, 0x9a, 0xb5, 0x75, 0xe6, 0xca,
	0xd3, 0xfd, 0xfe, 0xb1, 0x05, 0x9f, 0x97, 0xf9, 0x45, 0xcb, 0xce, 0x3b, 0x88, 0x82, 0x34, 0x88,
	0x82, 0x5c, 0x5c, 0x94, 0x26, 0xe2, 0x22, 0x26, 0xde, 0xe0, 0xa9, 0x77, 0x21, 0x9c, 0x6d, 0x61,
	0x4d, 0x1a, 0x9e, 0x2c, 0x9b, 0x9e, 0x44, 0x5d, 0x70, 0x77, 0x09, 0xc3, 0x5e, 0xe4, 0xd3, 0x70,
	0x8e, 0x27, 0xab, 0x2c, 0xfd, 0xfe, 0xc3, 0x82, 0xe6, 0x2c, 0x0d, 0x37, 0xc1, 0xf7, 0xaf, 0x7f,
	0x46, 0x12, 0x5b, 0x05, 0x7b, 0xd1, 0xd9, 0x5c, 0x71, 0xfb, 0x8b, 0x05, 0x8b, 0xe6, 0xa4, 0x7c,
	0x7b, 0x79, 0xd1, 0x59, 0x9a, 0x20, 0x14, 0x35, 0x33, 0x68, 0xd2, 0x9c, 0x57, 0x34, 0x72, 0x9e,
	0x71, 0xb6, 0x2e, 0x99, 0x67, 0x6b, 0xde, 0xdd, 0xf2, 0x5f, 0x27, 0xf4, 0x3c, 0x05, 0x21, 0x63,
	0x5c, 0x86, 0x81, 0xe8, 0x5b, 0x48, 0xc4, 0x8d, 0x55, 0x29, 0x42, 0x52, 0x3c, 0x45, 0x7c, 0x10,
	0x0c, 0xdf, 0x51, 0x9d, 0x98, 0xf8, 0x8d, 0xfe, 0x2c, 0xcf, 0x7d, 0xe3, 0x80, 0xdd, 0x84, 0x30,
	0x78, 0x67, 0x3c, 0x05, 0xe4, 0x2e, 0xec, 0xcc, 0xc5, 0xa6, 0xbb, 0xfe, 0x5f, 0x16, 0xd4, 0x0f,
	0xa3, 0x41, 0x10, 0x91, 0xab, 0xfa, 0xc8, 0xc4, 0xb5, 0x38, 0xf3, 0x71, 0xe1, 0x55, 0x3c, 0x95,
	0x79, 0xa3, 0x9c, 0xf3, 0xc6, 0x43, 0xa8, 0x33, 0xca, 0xa8, 0x58, 0xad, 0x38, 0xf4, 0x49, 0x67,
	0xe5, 0x99, 0xd3, 0x7c, 0xa6, 0x78, 0x8f, 0x54, 0xcf, 0x28, 0x7e, 0xab, 0xa4, 0xc1, 0x8f, 0xef,
	0xd2, 0xfe, 0xfd, 0x20, 0x61, 0x73, 0x0d, 0xfe, 0xdf, 0x5b, 0xe2, 0x22, 0x34, 0xaf, 0xe1, 0x3a,
	0xc3, 0xe4, 0xdd, 0x2c, 0x1c, 0xe4, 0xfd, 0xed, 0x3d, 0x33, 0x1c, 0x72, 0x5e, 0xcf, 0x02, 0xe2,
	0x87, 0x72, 0xd1, 0x43, 0xdf, 0x63, 0xe4, 0xff, 0x73, 0x71, 0xf2, 0x91, 0x05, 0xab, 0x93, 0x2a,
	0x6e, 0xee, 0xbd, 0x49, 0x57, 0xbe, 0x4b, 0x1e, 0x46, 0xc2, 0x93, 0xa7, 0xa7, 0xe6, 0x66, 0x99,
	0x0b, 0x20, 0x12, 0xf2, 0xed, 0xc0, 0x1b, 0xd0, 0xfe, 0x26, 0x3d, 0xcf, 0xb5, 0xf7, 0xaf, 0xa3,
	0xa1, 0x9e, 0x6a, 0xf8, 0x58, 0x5e, 0xa4, 0x4f, 0x57, 0xf1, 0xe6, 0x90, 0xaf, 0x9b, 0x17, 0x09,
	0x59, 0xe6, 0xca, 0x1d, 0x43, 0x3a, 0xb0, 0x62, 0xde, 0x0b, 0x70, 0x1f, 0x88, 0xab, 0x0e, 0x35,
	0x53, 0x90, 0x3e, 0x25, 0x49, 0xca, 0x59, 0x83, 0xba, 0xec, 0x5e, 0xfc, 0xae, 0x59, 0x3a, 0x6a,
	0x8a, 0x29, 0x62, 0x0d, 0x7d, 0x52, 0x80, 0xbb, 0xe6, 0xac, 0x5b, 0x74, 0x30, 0x20, 0x3d, 0x26,
	0x26, 0x5e, 0x83, 0xfa, 0x89, 0x17, 0x9d, 0x91, 0xb8, 0x9b, 0x9b, 0xbf, 0x26, 0x99, 0xc7, 0x52,
	0xcb, 0x17, 0x60, 0x31, 0x16, 0x6d, 0x54, 0x77, 0x34, 0x0a, 0x74, 0x67, 0x0b, 0x92, 0x75, 0x3c,
	0x0a, 0x7c, 0xe7, 0x4b, 0xf0, 0x96, 0x12, 0xe0, 0x51, 0x2e, 0xfa, 0x4c, 0x89, 0xc5, 0x92, 0x64,
	0x6f, 0x2b, 0xae, 0xf3, 0x55, 0x28, 0x71, 0x3d, 0x6a, 0x87, 0x36, 0x67, 0xdd, 0x87, 0x68, 0xbb,
	0xb1, 0x90, 0x76, 0xee, 0x43, 0x55, 0x1e, 0x7c, 0xbb, 0x81, 0xaf, 0x1e, 0xb6, 0xd2, 0x93, 0x30,
	0x1f, 0x54, 0xba, 0x03, 0xfd, 0x14, 0xbc, 0x20, 0x19, 0x6a, 0x90, 0xd2, 0xb0, 0x1b, 0x19, 0x8f,
	0xc1, 0xe9, 0xdb, 0xe7, 0x1a, 0xd4, 0x87, 0x31, 0xed, 0x91, 0x24, 0xe9, 0xf2, 0xd6, 0x8a, 0xe8,
	0x27, 0x45, 0xc5, 0xec, 0x70, 0x1e, 0xfa, 0x05, 0xdf, 0xbf, 0x93, 0xe0, 0x61, 0xf2, 0xfe, 0x88,
	0x24, 0x6c, 0x2e, 0x01, 0x3b, 0x76, 0x0d, 0x93, 0xbd, 0x7d, 0x34, 0x00, 0x06, 0x41, 0x18, 0x30,
	0xf9, 0x38, 0x2b, 0x63, 0xc8, 0xe0, 0xa0, 0x3f, 0xf0, 0xe2, 0x3c, 0x6d, 0x6d, 0xf3, 0x0d, 0xf1,
	0x6c, 0xd9, 0xc5, 0xdc, 0xb2, 0xbf, 0x06, 0x25, 0x71, 0xb9, 0x25, 0x9d, 0xb9, 0x36, 0xcb, 0x99,
	0x46, 0xb8, 0x61, 0xf1, 0x01, 0xfa, 0x35, 0xaf, 0x15, 0x86, 0xc4, 0xb6, 0xb8, 0xee, 0xbb, 0x12,
	0xa4, 0xff, 0x33, 0x34, 0x73, 0xe1, 0x21, 0x1b, 0xf2, 0x2c, 0x3c, 0xf2, 0x17, 0x96, 0x29, 0xf0,
	0xe8, 0x93, 0x31, 0xa7, 0xeb, 0x05, 0xce, 0x17, 0x57, 0x17, 0x2a, 0x3d, 0x1a, 0x31, 0xa2, 0x8e,
	0x84, 0x35, 0xac, 0xc9, 0x59, 0xeb, 0xe2, 0x11, 0x1b, 0x93, 0x21, 0x8d, 0x99, 0xde, 0xad, 0x72,
	0x33, 0xd4, 0x24, 0x53, 0xee, 0xd6, 0x4d, 0xf7, 0x4f, 0x2f, 0x1a, 0xd6, 0xa7, 0x2f, 0x1a, 0xd6,
	0x67, 0x2f, 0x1a, 0xd6, 0x87, 0x2f, 0x1b, 0xb7, 0x3e, 0x7d, 0xd9, 0xb8, 0xf5, 0xf7, 0x97, 0x8d,
	0x5b, 0x27, 0x65, 0xf1, 0xff, 0x91, 0x77, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x54, 0x83, 0x1d,
	0xf1, 0x7a, 0x22, 0x00, 0x00,
}

func (m *LoginMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n1, err1 := m.Header.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Session) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	return i, nil
}

func (m *LoginMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n2, err2 := m.Header.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if m.AgentId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.AgentId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.HeadId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Score))
	}
	if len(m.GamePass) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.GamePass)))
		i += copy(dAtA[i:], m.GamePass)
	}
	return i, nil
}

func (m *GameRoomMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRoomMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RoomId))
	}
	if len(m.RoomName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.RoomName)))
		i += copy(dAtA[i:], m.RoomName)
	}
	if m.TableCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.TableCount))
	}
	if m.FloorScore != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.FloorScore))
	}
	if m.CeilScore != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.CeilScore))
	}
	if m.EnterMinScore != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.EnterMinScore))
	}
	if m.EnterMaxScore != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.EnterMaxScore))
	}
	if m.MinPlayerNum != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.MinPlayerNum))
	}
	if m.MaxPlayerNum != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.MaxPlayerNum))
	}
	if m.MaxJettonScore != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.MaxJettonScore))
	}
	if m.Status != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Status))
	}
	if len(m.Jettons) > 0 {
		dAtA4 := make([]byte, len(m.Jettons)*10)
		var j3 int
		for _, num1 := range m.Jettons {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GameMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GameId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if len(m.GameName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.GameName)))
		i += copy(dAtA[i:], m.GameName)
	}
	if m.GameSortId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameSortId))
	}
	if m.GameType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameType))
	}
	if m.GameIsHot != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameIsHot))
	}
	if m.GameStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameStatus))
	}
	if len(m.GameRoomMsg) > 0 {
		for _, msg := range m.GameRoomMsg {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetGameMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n5, err5 := m.Header.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}

func (m *GetGameMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n6, err6 := m.Header.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if len(m.GameMessage) > 0 {
		for _, msg := range m.GameMessage {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetPlayingGameInfoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayingGameInfoMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n7, err7 := m.Header.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}

func (m *GetPlayingGameInfoMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayingGameInfoMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n8, err8 := m.Header.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RoomId))
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *GetGameServerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameServerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n9, err9 := m.Header.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *GetGameServerMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGameServerMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n10, err10 := m.Header.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	return i, nil
}

func (m *SetHeadIdMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetHeadIdMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n11, err11 := m.Header.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.HeadId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadId))
	}
	return i, nil
}

func (m *SetHeadIdMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetHeadIdMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n12, err12 := m.Header.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.HeadId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadId))
	}
	return i, nil
}

func (m *SetNickNameMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNickNameMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n13, err13 := m.Header.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.NickNameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.NickNameId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	return i, nil
}

func (m *SetNickNameMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNickNameMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n14, err14 := m.Header.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.NickNameId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.NickNameId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	return i, nil
}

func (m *GetUserScoreMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserScoreMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n15, err15 := m.Header.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserScoreMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserScoreMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n16, err16 := m.Header.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *GetPlayRecordMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayRecordMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n17, err17 := m.Header.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	return i, nil
}

func (m *GameRecordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRecordInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameRoundNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.GameRoundNo)))
		i += copy(dAtA[i:], m.GameRoundNo)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RoomId))
	}
	if m.WinLoseScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.WinLoseScore))
	}
	if m.GameEndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameEndTime))
	}
	return i, nil
}

func (m *GetPlayRecordMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPlayRecordMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n18, err18 := m.Header.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.GameId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if len(m.DetailInfo) > 0 {
		for _, msg := range m.DetailInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GamePlaybackRecordItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackRecordItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WMainCmdID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.WMainCmdID))
	}
	if m.WSubCmdID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.WSubCmdID))
	}
	if len(m.MsgData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.MsgData)))
		i += copy(dAtA[i:], m.MsgData)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.ChairId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.ChairId))
	}
	return i, nil
}

func (m *GamePlaybackRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Recitem) > 0 {
		for _, msg := range m.Recitem {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HallGetGameServerIPMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallGetGameServerIPMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n19, err19 := m.Header.MarshalTo(dAtA[i:])
		if err19 != nil {
			return 0, err19
		}
		i += n19
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.KindId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.KindId))
	}
	if m.RoomKindId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RoomKindId))
	}
	if m.BReconnect != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.BReconnect))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.ConfigId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.ConfigId))
	}
	return i, nil
}

func (m *HallGetGameServerIPMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallGetGameServerIPMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n20, err20 := m.Header.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.KindId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.KindId))
	}
	if m.RoomKindId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RoomKindId))
	}
	if len(m.Ip) > 0 {
		for _, s := range m.Ip {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ConfigId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.ConfigId))
	}
	return i, nil
}

func (m *HallNotifyGetChatMessageFromServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallNotifyGetChatMessageFromServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n21, err21 := m.Header.MarshalTo(dAtA[i:])
		if err21 != nil {
			return 0, err21
		}
		i += n21
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HallNotifyNewMailMessageFromServerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallNotifyNewMailMessageFromServerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n22, err22 := m.Header.MarshalTo(dAtA[i:])
		if err22 != nil {
			return 0, err22
		}
		i += n22
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *HallNotifyNoticeMessageFromServerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallNotifyNoticeMessageFromServerMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n23, err23 := m.Header.MarshalTo(dAtA[i:])
		if err23 != nil {
			return 0, err23
		}
		i += n23
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ExchangeScoreToRMBMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeScoreToRMBMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n24, err24 := m.Header.MarshalTo(dAtA[i:])
		if err24 != nil {
			return 0, err24
		}
		i += n24
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.ExchangeScore != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExchangeScore))))
		i += 8
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ExchangeScoreToRMBMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeScoreToRMBMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n25, err25 := m.Header.MarshalTo(dAtA[i:])
		if err25 != nil {
			return 0, err25
		}
		i += n25
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Result))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Type))
	}
	if m.ExchangeScore != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExchangeScore))))
		i += 8
	}
	if m.Score != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	return i, nil
}

func (m *GetExchangeRMBRecordMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExchangeRMBRecordMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n26, err26 := m.Header.MarshalTo(dAtA[i:])
		if err26 != nil {
			return 0, err26
		}
		i += n26
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ExchangeRMBRecordMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRMBRecordMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Id))
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if len(m.Account) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Type))
	}
	if m.ExchangeScore != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ExchangeScore))))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Status))
	}
	if len(m.Time) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Time)))
		i += copy(dAtA[i:], m.Time)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *GetExchangeRMBRecordMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExchangeRMBRecordMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n27, err27 := m.Header.MarshalTo(dAtA[i:])
		if err27 != nil {
			return 0, err27
		}
		i += n27
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.Message) > 0 {
		for _, msg := range m.Message {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NotifyExchangeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyExchangeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n28, err28 := m.Header.MarshalTo(dAtA[i:])
		if err28 != nil {
			return 0, err28
		}
		i += n28
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Id))
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.RealPay != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RealPay))))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *GetRandomNickNameMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomNickNameMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n29, err29 := m.Header.MarshalTo(dAtA[i:])
		if err29 != nil {
			return 0, err29
		}
		i += n29
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetRandomNickNameMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRandomNickNameMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n30, err30 := m.Header.MarshalTo(dAtA[i:])
		if err30 != nil {
			return 0, err30
		}
		i += n30
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.NickNameId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.NickNameId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	return i, nil
}

func (m *GetScoreRankMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScoreRankMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n31, err31 := m.Header.MarshalTo(dAtA[i:])
		if err31 != nil {
			return 0, err31
		}
		i += n31
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *RankMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RankId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RankId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	if m.HeadId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadId))
	}
	if m.HeadboxId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadboxId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.Gender != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Gender))
	}
	if m.Vip1 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Vip1))
	}
	return i, nil
}

func (m *GetScoreRankMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetScoreRankMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n32, err32 := m.Header.MarshalTo(dAtA[i:])
		if err32 != nil {
			return 0, err32
		}
		i += n32
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.Message) > 0 {
		for _, msg := range m.Message {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OnlineMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnlineMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RankId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RankId))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.HeadId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadId))
	}
	if m.HeadboxId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.HeadboxId))
	}
	if m.Gender != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Gender))
	}
	if m.TotonlineTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.TotonlineTime))
	}
	if m.Vip1 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Vip1))
	}
	if m.Vip2 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Vip2))
	}
	return i, nil
}

func (m *GetUserOnlineListMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserOnlineListMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n33, err33 := m.Header.MarshalTo(dAtA[i:])
		if err33 != nil {
			return 0, err33
		}
		i += n33
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUserOnlineListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserOnlineListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n34, err34 := m.Header.MarshalTo(dAtA[i:])
		if err34 != nil {
			return 0, err34
		}
		i += n34
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if len(m.Message) > 0 {
		for _, msg := range m.Message {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetUpdateUserScoreMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUpdateUserScoreMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n35, err35 := m.Header.MarshalTo(dAtA[i:])
		if err35 != nil {
			return 0, err35
		}
		i += n35
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetUpdateUserScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUpdateUserScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n36, err36 := m.Header.MarshalTo(dAtA[i:])
		if err36 != nil {
			return 0, err36
		}
		i += n36
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.Score != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *HallOnUserOfflineMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HallOnUserOfflineMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n37, err37 := m.Header.MarshalTo(dAtA[i:])
		if err37 != nil {
			return 0, err37
		}
		i += n37
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetDialogBoxNoticeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDialogBoxNoticeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n38, err38 := m.Header.MarshalTo(dAtA[i:])
		if err38 != nil {
			return 0, err38
		}
		i += n38
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GetDialogBoxNoticeMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDialogBoxNoticeMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n39, err39 := m.Header.MarshalTo(dAtA[i:])
		if err39 != nil {
			return 0, err39
		}
		i += n39
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.ErrorMsg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.ErrorMsg)))
		i += copy(dAtA[i:], m.ErrorMsg)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *GamePlaybackUserItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackUserItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Userid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Userid))
	}
	if m.ChangedScore != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ChangedScore))))
		i += 8
	}
	return i, nil
}

func (m *GamePlaybackCollectItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackCollectItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BankerUserid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.BankerUserid))
	}
	if len(m.RecordUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.RecordUuid)))
		i += copy(dAtA[i:], m.RecordUuid)
	}
	if len(m.RecordDatetime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.RecordDatetime)))
		i += copy(dAtA[i:], m.RecordDatetime)
	}
	if len(m.User) > 0 {
		for _, msg := range m.User {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ConfigId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.ConfigId))
	}
	if m.RecordId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RecordId))
	}
	if len(m.RoomName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.RoomName)))
		i += copy(dAtA[i:], m.RoomName)
	}
	if m.ProcessState != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.ProcessState))
	}
	return i, nil
}

func (m *GamePlaybackCollectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackCollectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n40, err40 := m.Header.MarshalTo(dAtA[i:])
		if err40 != nil {
			return 0, err40
		}
		i += n40
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.LimitCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.LimitCount))
	}
	return i, nil
}

func (m *GamePlaybackCollectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackCollectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n41, err41 := m.Header.MarshalTo(dAtA[i:])
		if err41 != nil {
			return 0, err41
		}
		i += n41
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.UserId))
	}
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHallServer_Message(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GamePlaybackDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n42, err42 := m.Header.MarshalTo(dAtA[i:])
		if err42 != nil {
			return 0, err42
		}
		i += n42
	}
	if len(m.RecordUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.RecordUuid)))
		i += copy(dAtA[i:], m.RecordUuid)
	}
	if m.RecordId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RecordId))
	}
	if m.GameId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	return i, nil
}

func (m *GamePlaybackDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlaybackDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.Header.Size()))
		n43, err43 := m.Header.MarshalTo(dAtA[i:])
		if err43 != nil {
			return 0, err43
		}
		i += n43
	}
	if m.RetCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.RetCode))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.GameId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.GameId))
	}
	if m.ReportUserid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHallServer_Message(dAtA, i, uint64(m.ReportUserid))
	}
	return i, nil
}

func encodeVarintHallServer_Message(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoginMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *LoginMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.AgentId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.AgentId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.HeadId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadId))
	}
	if m.Score != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Score))
	}
	l = len(m.GamePass)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GameRoomMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RoomId))
	}
	l = len(m.RoomName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.TableCount != 0 {
		n += 1 + sovHallServer_Message(uint64(m.TableCount))
	}
	if m.FloorScore != 0 {
		n += 1 + sovHallServer_Message(uint64(m.FloorScore))
	}
	if m.CeilScore != 0 {
		n += 1 + sovHallServer_Message(uint64(m.CeilScore))
	}
	if m.EnterMinScore != 0 {
		n += 1 + sovHallServer_Message(uint64(m.EnterMinScore))
	}
	if m.EnterMaxScore != 0 {
		n += 1 + sovHallServer_Message(uint64(m.EnterMaxScore))
	}
	if m.MinPlayerNum != 0 {
		n += 1 + sovHallServer_Message(uint64(m.MinPlayerNum))
	}
	if m.MaxPlayerNum != 0 {
		n += 1 + sovHallServer_Message(uint64(m.MaxPlayerNum))
	}
	if m.MaxJettonScore != 0 {
		n += 1 + sovHallServer_Message(uint64(m.MaxJettonScore))
	}
	if m.Status != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Status))
	}
	if len(m.Jettons) > 0 {
		l = 0
		for _, e := range m.Jettons {
			l += sovHallServer_Message(uint64(e))
		}
		n += 1 + sovHallServer_Message(uint64(l)) + l
	}
	return n
}

func (m *GameMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	l = len(m.GameName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.GameSortId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameSortId))
	}
	if m.GameType != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameType))
	}
	if m.GameIsHot != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameIsHot))
	}
	if m.GameStatus != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameStatus))
	}
	if len(m.GameRoomMsg) > 0 {
		for _, e := range m.GameRoomMsg {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *GetGameMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GetGameMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if len(m.GameMessage) > 0 {
		for _, e := range m.GameMessage {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *GetPlayingGameInfoMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GetPlayingGameInfoMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if m.RoomId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RoomId))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GetGameServerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if m.RoomId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RoomId))
	}
	return n
}

func (m *GetGameServerMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *SetHeadIdMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.HeadId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadId))
	}
	return n
}

func (m *SetHeadIdMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.HeadId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadId))
	}
	return n
}

func (m *SetNickNameMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.NickNameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.NickNameId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *SetNickNameMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.NickNameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.NickNameId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GetUserScoreMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *GetUserScoreMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.Score != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Score))
	}
	return n
}

func (m *GetPlayRecordMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	return n
}

func (m *GameRecordInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameRoundNo)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RoomId))
	}
	if m.WinLoseScore != 0 {
		n += 1 + sovHallServer_Message(uint64(m.WinLoseScore))
	}
	if m.GameEndTime != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameEndTime))
	}
	return n
}

func (m *GetPlayRecordMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if len(m.DetailInfo) > 0 {
		for _, e := range m.DetailInfo {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *GamePlaybackRecordItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WMainCmdID != 0 {
		n += 1 + sovHallServer_Message(uint64(m.WMainCmdID))
	}
	if m.WSubCmdID != 0 {
		n += 1 + sovHallServer_Message(uint64(m.WSubCmdID))
	}
	l = len(m.MsgData)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.ChairId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.ChairId))
	}
	return n
}

func (m *GamePlaybackRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Recitem) > 0 {
		for _, e := range m.Recitem {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *HallGetGameServerIPMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if m.KindId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.KindId))
	}
	if m.RoomKindId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RoomKindId))
	}
	if m.BReconnect != 0 {
		n += 1 + sovHallServer_Message(uint64(m.BReconnect))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.ConfigId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.ConfigId))
	}
	return n
}

func (m *HallGetGameServerIPMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if m.KindId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.KindId))
	}
	if m.RoomKindId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RoomKindId))
	}
	if len(m.Ip) > 0 {
		for _, s := range m.Ip {
			l = len(s)
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	if m.ConfigId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.ConfigId))
	}
	return n
}

func (m *HallNotifyGetChatMessageFromServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *HallNotifyNewMailMessageFromServerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *HallNotifyNoticeMessageFromServerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *ExchangeScoreToRMBMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.ExchangeScore != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Type))
	}
	return n
}

func (m *ExchangeScoreToRMBMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.Result != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Result))
	}
	if m.Type != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Type))
	}
	if m.ExchangeScore != 0 {
		n += 9
	}
	if m.Score != 0 {
		n += 9
	}
	return n
}

func (m *GetExchangeRMBRecordMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Id))
	}
	return n
}

func (m *ExchangeRMBRecordMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Id))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Type))
	}
	if m.ExchangeScore != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Status))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GetExchangeRMBRecordMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *NotifyExchangeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.Id != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Id))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RealPay != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Status))
	}
	return n
}

func (m *GetRandomNickNameMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *GetRandomNickNameMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.NickNameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.NickNameId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GetScoreRankMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *RankMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RankId))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.Score != 0 {
		n += 9
	}
	if m.HeadId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadId))
	}
	if m.HeadboxId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadboxId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Gender))
	}
	if m.Vip1 != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Vip1))
	}
	return n
}

func (m *GetScoreRankMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *OnlineMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RankId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RankId))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.HeadId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadId))
	}
	if m.HeadboxId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.HeadboxId))
	}
	if m.Gender != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Gender))
	}
	if m.TotonlineTime != 0 {
		n += 1 + sovHallServer_Message(uint64(m.TotonlineTime))
	}
	if m.Vip1 != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Vip1))
	}
	if m.Vip2 != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Vip2))
	}
	return n
}

func (m *GetUserOnlineListMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *GetUserOnlineListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *GetUpdateUserScoreMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *GetUpdateUserScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.Score != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Score))
	}
	return n
}

func (m *HallOnUserOfflineMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *GetDialogBoxNoticeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	return n
}

func (m *GetDialogBoxNoticeMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	return n
}

func (m *GamePlaybackUserItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Userid != 0 {
		n += 1 + sovHallServer_Message(uint64(m.Userid))
	}
	if m.ChangedScore != 0 {
		n += 9
	}
	return n
}

func (m *GamePlaybackCollectItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BankerUserid != 0 {
		n += 1 + sovHallServer_Message(uint64(m.BankerUserid))
	}
	l = len(m.RecordUuid)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.RecordDatetime)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if len(m.User) > 0 {
		for _, e := range m.User {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	if m.ConfigId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.ConfigId))
	}
	if m.RecordId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RecordId))
	}
	l = len(m.RoomName)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.ProcessState != 0 {
		n += 1 + sovHallServer_Message(uint64(m.ProcessState))
	}
	return n
}

func (m *GamePlaybackCollectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if m.LimitCount != 0 {
		n += 1 + sovHallServer_Message(uint64(m.LimitCount))
	}
	return n
}

func (m *GamePlaybackCollectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	if m.UserId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.UserId))
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovHallServer_Message(uint64(l))
		}
	}
	return n
}

func (m *GamePlaybackDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	l = len(m.RecordUuid)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RecordId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RecordId))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	return n
}

func (m *GamePlaybackDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.RetCode != 0 {
		n += 1 + sovHallServer_Message(uint64(m.RetCode))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovHallServer_Message(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovHallServer_Message(uint64(m.GameId))
	}
	if m.ReportUserid != 0 {
		n += 1 + sovHallServer_Message(uint64(m.ReportUserid))
	}
	return n
}

func sovHallServer_Message(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHallServer_Message(x uint64) (n int) {
	return sovHallServer_Message(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentId", wireType)
			}
			m.AgentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GamePass", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GamePass = append(m.GamePass[:0], dAtA[iNdEx:postIndex]...)
			if m.GamePass == nil {
				m.GamePass = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRoomMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRoomMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRoomMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableCount", wireType)
			}
			m.TableCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloorScore", wireType)
			}
			m.FloorScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FloorScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CeilScore", wireType)
			}
			m.CeilScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CeilScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterMinScore", wireType)
			}
			m.EnterMinScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnterMinScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterMaxScore", wireType)
			}
			m.EnterMaxScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnterMaxScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPlayerNum", wireType)
			}
			m.MinPlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPlayerNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayerNum", wireType)
			}
			m.MaxPlayerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayerNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxJettonScore", wireType)
			}
			m.MaxJettonScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxJettonScore |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHallServer_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Jettons = append(m.Jettons, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHallServer_Message
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHallServer_Message
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthHallServer_Message
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Jettons) == 0 {
					m.Jettons = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHallServer_Message
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Jettons = append(m.Jettons, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Jettons", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSortId", wireType)
			}
			m.GameSortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameSortId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameIsHot", wireType)
			}
			m.GameIsHot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameIsHot |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			m.GameStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRoomMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRoomMsg = append(m.GameRoomMsg, &GameRoomMessage{})
			if err := m.GameRoomMsg[len(m.GameRoomMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMessage = append(m.GameMessage, &GameMessage{})
			if err := m.GameMessage[len(m.GameMessage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayingGameInfoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayingGameInfoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayingGameInfoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayingGameInfoMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayingGameInfoMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayingGameInfoMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameServerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameServerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameServerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGameServerMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGameServerMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGameServerMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetHeadIdMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetHeadIdMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetHeadIdMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetHeadIdMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetHeadIdMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetHeadIdMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNickNameMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetNickNameMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetNickNameMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickNameId", wireType)
			}
			m.NickNameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NickNameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNickNameMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetNickNameMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetNickNameMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickNameId", wireType)
			}
			m.NickNameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NickNameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserScoreMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserScoreMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserScoreMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserScoreMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserScoreMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserScoreMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayRecordMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayRecordMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayRecordMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRecordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRecordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRecordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameRoundNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameRoundNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinLoseScore", wireType)
			}
			m.WinLoseScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinLoseScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameEndTime", wireType)
			}
			m.GameEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPlayRecordMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPlayRecordMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPlayRecordMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetailInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DetailInfo = append(m.DetailInfo, &GameRecordInfo{})
			if err := m.DetailInfo[len(m.DetailInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackRecordItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackRecordItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackRecordItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WMainCmdID", wireType)
			}
			m.WMainCmdID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WMainCmdID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WSubCmdID", wireType)
			}
			m.WSubCmdID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WSubCmdID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgData = append(m.MsgData[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgData == nil {
				m.MsgData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChairId", wireType)
			}
			m.ChairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChairId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recitem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recitem = append(m.Recitem, &GamePlaybackRecordItem{})
			if err := m.Recitem[len(m.Recitem)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallGetGameServerIPMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallGetGameServerIPMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallGetGameServerIPMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KindId", wireType)
			}
			m.KindId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KindId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomKindId", wireType)
			}
			m.RoomKindId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomKindId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BReconnect", wireType)
			}
			m.BReconnect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BReconnect |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallGetGameServerIPMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallGetGameServerIPMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallGetGameServerIPMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KindId", wireType)
			}
			m.KindId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KindId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomKindId", wireType)
			}
			m.RoomKindId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomKindId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallNotifyGetChatMessageFromServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallNotifyGetChatMessageFromServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallNotifyGetChatMessageFromServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallNotifyNewMailMessageFromServerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallNotifyNewMailMessageFromServerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallNotifyNewMailMessageFromServerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallNotifyNoticeMessageFromServerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallNotifyNoticeMessageFromServerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallNotifyNoticeMessageFromServerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeScoreToRMBMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeScoreToRMBMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeScoreToRMBMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExchangeScore = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeScoreToRMBMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeScoreToRMBMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeScoreToRMBMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExchangeScore = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExchangeRMBRecordMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExchangeRMBRecordMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExchangeRMBRecordMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRMBRecordMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRMBRecordMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRMBRecordMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ExchangeScore = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExchangeRMBRecordMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExchangeRMBRecordMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExchangeRMBRecordMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &ExchangeRMBRecordMessage{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyExchangeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyExchangeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyExchangeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealPay", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RealPay = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomNickNameMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomNickNameMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomNickNameMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRandomNickNameMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRandomNickNameMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRandomNickNameMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickNameId", wireType)
			}
			m.NickNameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NickNameId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScoreRankMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScoreRankMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScoreRankMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			m.RankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadboxId", wireType)
			}
			m.HeadboxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadboxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip1", wireType)
			}
			m.Vip1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetScoreRankMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetScoreRankMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetScoreRankMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &RankMessage{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnlineMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnlineMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnlineMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			m.RankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			m.HeadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadboxId", wireType)
			}
			m.HeadboxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadboxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotonlineTime", wireType)
			}
			m.TotonlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotonlineTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip1", wireType)
			}
			m.Vip1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip2", wireType)
			}
			m.Vip2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserOnlineListMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserOnlineListMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserOnlineListMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserOnlineListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserOnlineListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserOnlineListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &OnlineMessage{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUpdateUserScoreMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUpdateUserScoreMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUpdateUserScoreMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUpdateUserScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUpdateUserScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUpdateUserScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HallOnUserOfflineMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HallOnUserOfflineMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HallOnUserOfflineMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDialogBoxNoticeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDialogBoxNoticeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDialogBoxNoticeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDialogBoxNoticeMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDialogBoxNoticeMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDialogBoxNoticeMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackUserItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackUserItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackUserItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			m.Userid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Userid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedScore", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ChangedScore = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackCollectItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackCollectItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackCollectItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankerUserid", wireType)
			}
			m.BankerUserid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankerUserid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordDatetime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordDatetime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User, &GamePlaybackUserItem{})
			if err := m.User[len(m.User)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			m.ConfigId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessState", wireType)
			}
			m.ProcessState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessState |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackCollectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackCollectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackCollectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitCount", wireType)
			}
			m.LimitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackCollectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackCollectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackCollectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &GamePlaybackCollectItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GamePlaybackDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlaybackDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlaybackDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Game_Common.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetCode", wireType)
			}
			m.RetCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportUserid", wireType)
			}
			m.ReportUserid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportUserid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHallServer_Message(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHallServer_Message
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHallServer_Message(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHallServer_Message
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHallServer_Message
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHallServer_Message
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHallServer_Message
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHallServer_Message
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHallServer_Message(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHallServer_Message
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHallServer_Message = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHallServer_Message   = fmt.Errorf("proto: integer overflow")
)
